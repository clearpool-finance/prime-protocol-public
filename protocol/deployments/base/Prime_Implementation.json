{
  "address": "0xF041A2838794266d19f79709F416A2977F896A9B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "OriginationRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "PenaltyRatePerYearUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "RiskScoreChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldIncrement",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newIncrement",
          "type": "uint256"
        }
      ],
      "name": "RollingIncrementChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "SpreadRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "stablecoins",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "penaltyRatePerYear_",
          "type": "uint256"
        }
      ],
      "name": "__Prime_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "blacklistMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_riskScore",
          "type": "uint256"
        }
      ],
      "name": "changeMemberRiskScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "spreadRate_",
          "type": "uint256"
        }
      ],
      "name": "changeSpreadRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementPerRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "isAssetAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAvailable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "membershipOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "riskScore",
              "type": "uint256"
            },
            {
              "internalType": "enum IPrime.MemberStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "created",
              "type": "bool"
            }
          ],
          "internalType": "struct IPrime.Member",
          "name": "member",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "originationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyRatePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_requester",
          "type": "address"
        }
      ],
      "name": "requestMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_originationRate",
          "type": "uint256"
        }
      ],
      "name": "setOriginationRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_incrementPerRoll",
          "type": "uint256"
        }
      ],
      "name": "setRollingIncrement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "treasury_",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spreadRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "penaltyRatePerYear_",
          "type": "uint256"
        }
      ],
      "name": "updatePenaltyRatePerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_riskScore",
          "type": "uint256"
        }
      ],
      "name": "whitelistMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fe11b2b4e133d86fc1aa4338ded10bddf52b937f6de22acbb850ced03e14338",
  "receipt": {
    "to": null,
    "from": "0xa333e18249D0E31ae6a57C9bE6E4CDF5CE0837ec",
    "contractAddress": "0xF041A2838794266d19f79709F416A2977F896A9B",
    "transactionIndex": 36,
    "gasUsed": "1250697",
    "logsBloom": "0x
    "blockHash": "0xd0810a776dce58ee91f0ec57f6d3f5d3aa0e0d601dc94bd41fe276e07b1bb076",
    "transactionHash": "0x9fe11b2b4e133d86fc1aa4338ded10bddf52b937f6de22acbb850ced03e14338",
    "logs": [
      {
        "transactionIndex": 36,
        "blockNumber": 12453147,
        "transactionHash": "0x9fe11b2b4e133d86fc1aa4338ded10bddf52b937f6de22acbb850ced03e14338",
        "address": "0xF041A2838794266d19f79709F416A2977F896A9B",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 217,
        "blockHash": "0xd0810a776dce58ee91f0ec57f6d3f5d3aa0e0d601dc94bd41fe276e07b1bb076"
      }
    ],
    "blockNumber": 12453147,
    "cumulativeGasUsed": "8994298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e74de8f4cfb240fa0503b18f7461ad5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"OriginationRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"PenaltyRatePerYearUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"RiskScoreChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldIncrement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newIncrement\",\"type\":\"uint256\"}],\"name\":\"RollingIncrementChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"SpreadRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stablecoins\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"penaltyRatePerYear_\",\"type\":\"uint256\"}],\"name\":\"__Prime_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"blacklistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_riskScore\",\"type\":\"uint256\"}],\"name\":\"changeMemberRiskScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spreadRate_\",\"type\":\"uint256\"}],\"name\":\"changeSpreadRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementPerRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"isAssetAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAvailable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"membershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"enum IPrime.MemberStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct IPrime.Member\",\"name\":\"member\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRatePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_requester\",\"type\":\"address\"}],\"name\":\"requestMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_originationRate\",\"type\":\"uint256\"}],\"name\":\"setOriginationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_incrementPerRoll\",\"type\":\"uint256\"}],\"name\":\"setRollingIncrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penaltyRatePerYear_\",\"type\":\"uint256\"}],\"name\":\"updatePenaltyRatePerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_riskScore\",\"type\":\"uint256\"}],\"name\":\"whitelistMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__Prime_init(address[],address,uint256)\":{\"details\":\"External function to initialize the contract after it's been added to the proxy.It initializes the inherited contracts.\",\"params\":{\"penaltyRatePerYear_\":\"The penalty rate per year\",\"stablecoins\":\"An array of stablecoins addresses\",\"treasury_\":\"The address that will receive the fees\"}},\"availableAssets()\":{\"returns\":{\"_0\":\"An array of available assets\"}},\"blacklistMember(address)\":{\"details\":\"Emits a {MemberBlacklisted} event.\",\"params\":{\"_member\":\"The member address\"}},\"changeMemberRiskScore(address,uint256)\":{\"details\":\"Emits a {RiskScoreChanged} event.\",\"params\":{\"_member\":\"The member address\",\"_riskScore\":\"The number up to 100 representing member's score\"}},\"changeSpreadRate(uint256)\":{\"details\":\"Callable only by owner. It is a mantissa value, so 1e18 is 100%\",\"params\":{\"spreadRate_\":\"New spread fee rate\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"isAssetAvailable(address)\":{\"params\":{\"asset\":\"The address of asset\"},\"returns\":{\"isAvailable\":\"Boolean flag containing asset availability\"}},\"isMember(address)\":{\"params\":{\"_member\":\"The address of member\"},\"returns\":{\"_0\":\"Boolean flag containing membership status\"}},\"membershipOf(address)\":{\"params\":{\"_member\":\"The address of member\"},\"returns\":{\"member\":\"The member info struct\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestMembership(address)\":{\"details\":\"Emits a {MemberCreated} event.\"},\"setOriginationRate(uint256)\":{\"details\":\"Callable only by owner\",\"params\":{\"_originationRate\":\"New origination fee rate\"}},\"setRollingIncrement(uint256)\":{\"details\":\"Callable only by owner\",\"params\":{\"_incrementPerRoll\":\"New origination fee rate\"}},\"setTreasury(address)\":{\"details\":\"Callable only by owner\",\"params\":{\"treasury_\":\"The address of the new treasury\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePenaltyRatePerYear(uint256)\":{\"details\":\"Callable only by owner\",\"params\":{\"penaltyRatePerYear_\":\"New penalty rate per year value\"}},\"whitelistMember(address,uint256)\":{\"details\":\"Emits a {MemberCreated} event.Emits a {MemberWhitelisted} event.Emits a {RiskScoreChanged} event.\",\"params\":{\"_member\":\"The member address\",\"_riskScore\":\"The number up to 100 representing member's score\"}}},\"stateVariables\":{\"_members\":{\"details\":\"A record of each member's info, by address\"},\"_stablecoins\":{\"details\":\"Data struct to simplify the operations with stablecoins addresses\"},\"spreadRate\":{\"details\":\"Protocol spread rate\"},\"treasury\":{\"details\":\"The address that will receive the fees\"}},\"title\":\"A contract for control Clearpool Prime membership database\",\"version\":1},\"userdoc\":{\"events\":{\"MemberBlacklisted(address)\":{\"notice\":\"An event that's emitted when a member is blacklisted\"},\"MemberCreated(address)\":{\"notice\":\"An event that's emitted when a member is created\"},\"MemberWhitelisted(address)\":{\"notice\":\"An event that's emitted when a member is whitelisted\"},\"OriginationRateChanged(uint256,uint256)\":{\"notice\":\"Emitted when origination fee rate is changed\"},\"PenaltyRatePerYearUpdated(uint256,uint256)\":{\"notice\":\"An event that's emitted when the value of the penaltyRatePerYear is changed\"},\"RiskScoreChanged(address,uint256)\":{\"notice\":\"An event that's emitted when a member's riskScore is changed\"},\"RollingIncrementChanged(uint256,uint256)\":{\"notice\":\"Emitted when rolling increment rate is changed\"},\"SpreadRateChanged(uint256,uint256)\":{\"notice\":\"An event that's emitted when the value of the spreadRate is changed\"},\"TreasuryChanged(address,address)\":{\"notice\":\"An event that's emitted when the value of the treasury is changed\"}},\"kind\":\"user\",\"methods\":{\"YEAR()\":{\"notice\":\"Standart year in seconds\"},\"availableAssets()\":{\"notice\":\"Returns an array of assets available for borrowing\"},\"blacklistMember(address)\":{\"notice\":\"Alter membership record by setting `_member` status\"},\"changeMemberRiskScore(address,uint256)\":{\"notice\":\"Alter membership record by setting member `_riskScore`\"},\"changeSpreadRate(uint256)\":{\"notice\":\"Changes the spread rate\"},\"incrementPerRoll()\":{\"notice\":\"Rolling increment rate for the origination fee\"},\"isAssetAvailable(address)\":{\"notice\":\"Check Stablecoin existence for a given `asset` address\"},\"isMember(address)\":{\"notice\":\"Check membership status for a given `_member`\"},\"membershipOf(address)\":{\"notice\":\"Get membership info for a given `_member`\"},\"originationRate()\":{\"notice\":\"Origination fee rate\"},\"penaltyRatePerYear()\":{\"notice\":\"Setted penalty rate per year value\"},\"requestMembership(address)\":{\"notice\":\"Request a membership record\"},\"setOriginationRate(uint256)\":{\"notice\":\"Changes the origination fee rate\"},\"setRollingIncrement(uint256)\":{\"notice\":\"Changes the rolling increment fee rate\"},\"setTreasury(address)\":{\"notice\":\"Sets a new treasury address for the contract\"},\"updatePenaltyRatePerYear(uint256)\":{\"notice\":\"Updates penalty rate per year value\"},\"whitelistMember(address,uint256)\":{\"notice\":\"Alter or creates membership record by setting `_member` status and `_riskScore`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrimeMembership/Prime.sol\":\"Prime\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/PrimeMembership/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary Asset {\\n  struct Data {\\n    mapping(address => bool) flags;\\n    mapping(address => uint256) addressIndex;\\n    address[] addresses;\\n    uint256 id;\\n  }\\n\\n  function insert(Data storage self, address asset) internal returns (bool) {\\n    if (self.flags[asset]) {\\n      return false;\\n    }\\n\\n    self.flags[asset] = true;\\n    self.addresses.push(asset);\\n    self.addressIndex[asset] = self.id;\\n    self.id++;\\n    return true;\\n  }\\n\\n  function contains(Data storage self, address asset) internal view returns (bool) {\\n    return self.flags[asset];\\n  }\\n\\n  function getList(Data storage self) internal view returns (address[] memory) {\\n    return self.addresses;\\n  }\\n}\\n\",\"keccak256\":\"0x547ccd6261de2629e1d120ba8f102ac7e2158dc8868f8816ef22882bff19a71b\",\"license\":\"Apache-2.0\"},\"contracts/PrimeMembership/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Interface of the Prime membership contract\\n */\\ninterface IPrime {\\n  /// @notice Member status enum\\n  enum MemberStatus {\\n    PENDING,\\n    WHITELISTED,\\n    BLACKLISTED\\n  }\\n\\n  /// @notice A record of member info\\n  struct Member {\\n    uint256 riskScore;\\n    MemberStatus status;\\n    bool created;\\n  }\\n\\n  /**\\n   * @notice Check membership status for a given `_member`\\n   * @param _member The address of member\\n   * @return Boolean flag containing membership status\\n   */\\n  function isMember(address _member) external view returns (bool);\\n\\n  /**\\n   * @notice Check Stablecoin existence for a given `asset` address\\n   * @param asset The address of asset\\n   * @return Boolean flag containing asset availability\\n   */\\n  function isAssetAvailable(address asset) external view returns (bool);\\n\\n  /**\\n   * @notice Get membership info for a given `_member`\\n   * @param _member The address of member\\n   * @return The member info struct\\n   */\\n  function membershipOf(address _member) external view returns (Member memory);\\n\\n  /**\\n   * @notice Returns current protocol rate value\\n   * @return The protocol rate as a mantissa between [0, 1e18]\\n   */\\n  function spreadRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current originated fee value\\n   * @return originated fee rate as a mantissa between [0, 1e18]\\n   */\\n  function originationRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current rolling increment fee\\n   * @return rolling fee rate as a mantissa between [0, 1e18]\\n   */\\n  function incrementPerRoll() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current protocol fee collector address\\n   * @return address of protocol fee collector\\n   */\\n  function treasury() external view returns (address);\\n\\n  /**\\n   * @notice Returns current penalty rate for 1 year\\n   * @return penalty fee rate as a mantissa between [0, 1e18]\\n   */\\n  function penaltyRatePerYear() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4593120ae00d8dc6962e313ec3e8eb9c483cb26a0761567b8765cbb92129cf4d\",\"license\":\"Apache-2.0\"},\"contracts/PrimeMembership/Prime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport {IPrime} from './IPrime.sol';\\nimport {Asset} from './Asset.sol';\\n\\nimport {NZAGuard} from '../utils/NZAGuard.sol';\\n\\n/// @title A contract for control Clearpool Prime membership database\\ncontract Prime is Initializable, OwnableUpgradeable, IPrime, NZAGuard {\\n  using Asset for Asset.Data;\\n\\n  /// @notice Standart year in seconds\\n  uint256 public constant YEAR = 360 days;\\n\\n  /// @notice Setted penalty rate per year value\\n  uint256 public penaltyRatePerYear;\\n\\n  /// @dev Protocol spread rate\\n  uint256 public spreadRate; // from 0 (0%) to 1e18 (100%)\\n\\n  /// @notice Origination fee rate\\n  uint256 public originationRate;\\n\\n  /// @notice Rolling increment rate for the origination fee\\n  uint256 public incrementPerRoll;\\n\\n  /// @dev The address that will receive the fees\\n  address public treasury;\\n\\n  /// @dev Data struct to simplify the operations with stablecoins addresses\\n  Asset.Data private _stablecoins;\\n\\n  /// @dev A record of each member's info, by address\\n  mapping(address => Member) private _members;\\n\\n  /// @notice An event that's emitted when a member is created\\n  event MemberCreated(address indexed member);\\n  /// @notice An event that's emitted when a member is whitelisted\\n  event MemberWhitelisted(address indexed member);\\n  /// @notice An event that's emitted when a member is blacklisted\\n  event MemberBlacklisted(address indexed member);\\n\\n  /// @notice An event that's emitted when a member's riskScore is changed\\n  event RiskScoreChanged(address indexed member, uint256 score);\\n\\n  /// @notice An event that's emitted when the value of the penaltyRatePerYear is changed\\n  event PenaltyRatePerYearUpdated(uint256 oldValue, uint256 newValue);\\n\\n  /// @notice An event that's emitted when the value of the spreadRate is changed\\n  event SpreadRateChanged(uint256 oldValue, uint256 newValue);\\n\\n  /// @notice An event that's emitted when the value of the treasury is changed\\n  event TreasuryChanged(address oldValue, address newValue);\\n\\n  /// @notice Emitted when origination fee rate is changed\\n  event OriginationRateChanged(uint256 oldFee, uint256 newFee);\\n\\n  /// @notice Emitted when rolling increment rate is changed\\n  event RollingIncrementChanged(uint256 oldIncrement, uint256 newIncrement);\\n\\n  /// @dev Modifier for checking membership record availability\\n  modifier onlyMember(address _member) {\\n    require(_members[_member].created, 'NPM');\\n    _;\\n  }\\n\\n  /// @dev Modifier for checking that risk score is in range of [1, 100]\\n  modifier riskScoreInRange(uint256 _riskScore) {\\n    require(_riskScore <= 100 && _riskScore > 0, 'RSI');\\n    _;\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @dev External function to initialize the contract after it's been added to the proxy.\\n  /// @dev It initializes the inherited contracts.\\n  /// @param stablecoins An array of stablecoins addresses\\n  /// @param treasury_ The address that will receive the fees\\n  /// @param penaltyRatePerYear_ The penalty rate per year\\n  function __Prime_init(\\n    address[] memory stablecoins,\\n    address treasury_,\\n    uint256 penaltyRatePerYear_\\n  ) external virtual initializer {\\n    __Ownable_init();\\n    __Prime_init_unchained(stablecoins, treasury_, penaltyRatePerYear_);\\n  }\\n\\n  /// @dev Internal function to initialize the contract after it's been added to the proxy\\n  /// @dev It initializes current contract with the given parameters.\\n  /// @param stablecoins An array of stablecoins addresses\\n  /// @param treasury_ The address that will receive the fees\\n  /// @param penaltyRatePerYear_ The penalty rate per year\\n  function __Prime_init_unchained(\\n    address[] memory stablecoins,\\n    address treasury_,\\n    uint256 penaltyRatePerYear_\\n  ) internal nonZeroAddress(treasury_) nonZeroValue(penaltyRatePerYear_) onlyInitializing {\\n    require(penaltyRatePerYear_ <= 1e19, 'PRI'); // 1000%;\\n    treasury = treasury_;\\n    penaltyRatePerYear = penaltyRatePerYear_;\\n\\n    for (uint256 i = 0; i < stablecoins.length; i++) {\\n      require(_stablecoins.insert(stablecoins[i]), 'TIF');\\n    }\\n  }\\n\\n  /**\\n   * @inheritdoc IPrime\\n   */\\n  function isMember(address _member) external view override returns (bool) {\\n    Member storage member = _members[_member];\\n    return member.created && member.status == MemberStatus.WHITELISTED;\\n  }\\n\\n  /**\\n   * @inheritdoc IPrime\\n   */\\n  function isAssetAvailable(\\n    address asset\\n  ) external view override nonZeroAddress(asset) returns (bool isAvailable) {\\n    return _stablecoins.contains(asset);\\n  }\\n\\n  /// @notice Returns an array of assets available for borrowing\\n  /// @return An array of available assets\\n  function availableAssets() external view returns (address[] memory) {\\n    return _stablecoins.getList();\\n  }\\n\\n  /**\\n   * @inheritdoc IPrime\\n   */\\n  function membershipOf(address _member) external view override returns (Member memory member) {\\n    return _members[_member];\\n  }\\n\\n  /**\\n   * @notice Request a membership record\\n   *\\n   *\\n   * @dev Emits a {MemberCreated} event.\\n   */\\n  function requestMembership(address _requester) public nonZeroAddress(_requester) {\\n    require(!_members[_requester].created, 'MAC');\\n\\n    _members[_requester] = Member(0, MemberStatus.PENDING, true);\\n    emit MemberCreated(_requester);\\n  }\\n\\n  /**\\n   * @notice Alter or creates membership record by setting `_member` status and `_riskScore`\\n   * @param _member The member address\\n   * @param _riskScore The number up to 100 representing member's score\\n   *\\n   * @dev Emits a {MemberCreated} event.\\n   * @dev Emits a {MemberWhitelisted} event.\\n   * @dev Emits a {RiskScoreChanged} event.\\n   */\\n  function whitelistMember(\\n    address _member,\\n    uint256 _riskScore\\n  ) external nonZeroAddress(_member) riskScoreInRange(_riskScore) onlyOwner {\\n    _whitelistMember(_member, _riskScore);\\n  }\\n\\n  /// @dev Internal function that whitelists member\\n  /// @param _member The member address\\n  /// @param _riskScore The number up to 100 representing member's score\\n  function _whitelistMember(address _member, uint256 _riskScore) internal {\\n    Member storage member = _members[_member];\\n\\n    if (!member.created) {\\n      requestMembership(_member);\\n    }\\n\\n    require(member.status != MemberStatus.WHITELISTED, 'AAD');\\n\\n    member.status = MemberStatus.WHITELISTED;\\n    emit MemberWhitelisted(_member);\\n\\n    if (member.riskScore != _riskScore) {\\n      member.riskScore = _riskScore;\\n      emit RiskScoreChanged(_member, _riskScore);\\n    }\\n  }\\n\\n  /**\\n   * @notice Alter membership record by setting `_member` status\\n   * @param _member The member address\\n   *\\n   * @dev Emits a {MemberBlacklisted} event.\\n   */\\n  function blacklistMember(\\n    address _member\\n  ) external nonZeroAddress(_member) onlyMember(_member) onlyOwner {\\n    Member storage member = _members[_member];\\n\\n    require(member.status != MemberStatus.BLACKLISTED, 'AAD');\\n\\n    member.status = MemberStatus.BLACKLISTED;\\n    emit MemberBlacklisted(_member);\\n  }\\n\\n  /**\\n   * @notice Alter membership record by setting member `_riskScore`\\n   * @param _member The member address\\n   * @param _riskScore The number up to 100 representing member's score\\n   *\\n   * @dev Emits a {RiskScoreChanged} event.\\n   */\\n  function changeMemberRiskScore(\\n    address _member,\\n    uint256 _riskScore\\n  ) external nonZeroAddress(_member) onlyMember(_member) riskScoreInRange(_riskScore) onlyOwner {\\n    Member storage member = _members[_member];\\n    if (member.riskScore != _riskScore) {\\n      member.riskScore = _riskScore;\\n      emit RiskScoreChanged(_member, _riskScore);\\n    }\\n  }\\n\\n  /**\\n   * @notice Changes the spread rate\\n   * @dev Callable only by owner. It is a mantissa value, so 1e18 is 100%\\n   * @param spreadRate_ New spread fee rate\\n   */\\n  function changeSpreadRate(\\n    uint256 spreadRate_\\n  ) external onlyOwner nonMoreThenOne(spreadRate_) nonSameValue(spreadRate_, spreadRate) {\\n    uint256 currentValue = spreadRate;\\n    spreadRate = spreadRate_;\\n    emit SpreadRateChanged(currentValue, spreadRate_);\\n  }\\n\\n  /// @notice Changes the origination fee rate\\n  /// @dev Callable only by owner\\n  /// @param _originationRate New origination fee rate\\n  function setOriginationRate(\\n    uint256 _originationRate\\n  )\\n    external\\n    onlyOwner\\n    nonMoreThenOne(_originationRate)\\n    nonSameValue(_originationRate, originationRate)\\n  {\\n    uint256 currentFee = originationRate;\\n\\n    originationRate = _originationRate;\\n    emit OriginationRateChanged(currentFee, _originationRate);\\n  }\\n\\n  /// @notice Changes the rolling increment fee rate\\n  /// @dev Callable only by owner\\n  /// @param _incrementPerRoll New origination fee rate\\n  function setRollingIncrement(\\n    uint256 _incrementPerRoll\\n  )\\n    external\\n    onlyOwner\\n    nonMoreThenOne(_incrementPerRoll)\\n    nonSameValue(_incrementPerRoll, incrementPerRoll)\\n  {\\n    uint256 currentIncrement = incrementPerRoll;\\n\\n    incrementPerRoll = _incrementPerRoll;\\n    emit RollingIncrementChanged(currentIncrement, _incrementPerRoll);\\n  }\\n\\n  /// @notice Sets a new treasury address for the contract\\n  /// @dev Callable only by owner\\n  /// @param treasury_ The address of the new treasury\\n  function setTreasury(\\n    address treasury_\\n  ) external nonZeroAddress(treasury_) nonSameAddress(treasury_, treasury) onlyOwner {\\n    address currentValue = treasury;\\n\\n    treasury = treasury_;\\n    emit TreasuryChanged(currentValue, treasury_);\\n  }\\n\\n  /// @notice Updates penalty rate per year value\\n  /// @dev Callable only by owner\\n  /// @param penaltyRatePerYear_ New penalty rate per year value\\n  function updatePenaltyRatePerYear(\\n    uint256 penaltyRatePerYear_\\n  ) external onlyOwner nonSameValue(penaltyRatePerYear_, penaltyRatePerYear) {\\n    require(penaltyRatePerYear_ <= 1e19, 'PRI'); // 1000%;\\n    uint256 currentValue = penaltyRatePerYear;\\n\\n    penaltyRatePerYear = penaltyRatePerYear_;\\n    emit PenaltyRatePerYearUpdated(currentValue, penaltyRatePerYear_);\\n  }\\n}\\n\",\"keccak256\":\"0xe389484a8412b71e4f02b821fa8548e9d931cf3927bd2b3ccdf7621d9f831773\",\"license\":\"Apache-2.0\"},\"contracts/utils/NZAGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\\nabstract contract NZAGuard {\\n  modifier nonZeroAddress(address _address) {\\n    require(_address != address(0), 'NZA');\\n    _;\\n  }\\n  modifier nonZeroValue(uint256 _value) {\\n    require(_value != 0, 'ZVL');\\n    _;\\n  }\\n  modifier nonSameValue(uint256 _value1, uint256 _value2) {\\n    require(_value1 != _value2, 'SVR');\\n    _;\\n  }\\n  modifier nonSameAddress(address _address1, address _address2) {\\n    require(_address1 != _address2, 'SVA');\\n    _;\\n  }\\n  modifier nonMoreThenOne(uint256 _value) {\\n    require(_value <= 1e18, 'UTR');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9f9eb25d75ff7023215c7374675aedafb27c7d30df09e1bb01c29a12f328aa10\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61152a806100ed6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715e3021116100c3578063a230c5241161007c578063a230c524146102a8578063a821832e146102bb578063bdc252ad146102ce578063f0f44260146102e1578063f2fde38b146102f4578063f6c2e5601461030757600080fd5b8063715e30211461023a578063723ae6fd1461024d578063821b10b01461027057806383914540146102795780638c85cf2d146102845780638da5cb5b1461029757600080fd5b80634920bb38116101155780634920bb38146101c55780634df0b506146101d857806355dc3d5d146101eb5780635ab2af51146101fe57806361d027b314610207578063715018a61461023257600080fd5b806305a570a8146101525780630d692cc11461017b5780630fe7b7bb14610192578063179541ca146101a757806320124bce146101b0575b600080fd5b610165610160366004611219565b61031a565b604051610172919061124a565b60405180910390f35b61018460665481565b604051908152602001610172565b6101a56101a036600461128f565b6103a9565b005b61018460655481565b6101b86104e7565b60405161017291906112b9565b6101a56101d3366004611306565b6104f8565b6101a56101e6366004611219565b6105a9565b6101a56101f9366004611306565b6106df565b61018460675481565b60695461021a906001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6101a561077c565b6101a561024836600461128f565b610790565b61026061025b366004611219565b610813565b6040519015158152602001610172565b61018460685481565b6101846301da9c0081565b6101a5610292366004611306565b61084e565b6033546001600160a01b031661021a565b6102606102b6366004611219565b6108e0565b6101a56102c9366004611306565b61092e565b6101a56102dc366004611335565b6109c0565b6101a56102ef366004611219565b610ad5565b6101a5610302366004611219565b610ba6565b6101a5610315366004611219565b610c1f565b6040805160608082018352600080835260208084018290528385018290526001600160a01b0386168252606e8152908490208451928301909452835482526001840154929391929083019060ff16600281111561037957610379611234565b600281111561038a5761038a611234565b815260019190910154610100900460ff16151560209091015292915050565b816001600160a01b0381166103d95760405162461bcd60e51b81526004016103d090611415565b60405180910390fd5b6001600160a01b0383166000908152606e60205260409020600101548390610100900460ff166104315760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016103d0565b82606481111580156104435750600081115b6104755760405162461bcd60e51b815260206004820152600360248201526252534960e81b60448201526064016103d0565b61047d610d59565b6001600160a01b0385166000908152606e60205260409020805485146104df578481556040518581526001600160a01b038716907fc11794e295293b0555bba7e077274bbdc4988a5fbd20fa8f875163c6e0ecfcca9060200160405180910390a25b505050505050565b60606104f3606a610db3565b905090565b610500610d59565b806065548082036105235760405162461bcd60e51b81526004016103d090611432565b678ac7230489e800008311156105615760405162461bcd60e51b815260206004820152600360248201526250524960e81b60448201526064016103d0565b606580549084905560408051828152602081018690527f5c9e7807505c382f6cd71e36ec29b3a1fb7a714114be8893d22271630a5816df91015b60405180910390a150505050565b806001600160a01b0381166105d05760405162461bcd60e51b81526004016103d090611415565b6001600160a01b0382166000908152606e60205260409020600101548290610100900460ff166106285760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016103d0565b610630610d59565b6001600160a01b0383166000908152606e602052604090206002600182015460ff16600281111561066357610663611234565b036106965760405162461bcd60e51b815260206004820152600360248201526210505160ea1b60448201526064016103d0565b60018101805460ff191660021790556040516001600160a01b038516907f0980e8fb3e23ceaaed73ff0de40847dfa8c9e43aa49f7f689fa660a1a92eadaf90600090a250505050565b6106e7610d59565b80670de0b6b3a76400008111156107105760405162461bcd60e51b81526004016103d09061144f565b816067548082036107335760405162461bcd60e51b81526004016103d090611432565b606780549085905560408051828152602081018790527f817813b712ac80eec87c757eebb97d83b55ec09cd1fd4e3c814510c183ea810f91015b60405180910390a15050505050565b610784610d59565b61078e6000610e19565b565b816001600160a01b0381166107b75760405162461bcd60e51b81526004016103d090611415565b81606481111580156107c95750600081115b6107fb5760405162461bcd60e51b815260206004820152600360248201526252534960e81b60448201526064016103d0565b610803610d59565b61080d8484610e6b565b50505050565b6000816001600160a01b03811661083c5760405162461bcd60e51b81526004016103d090611415565b610847606a84610f7d565b9392505050565b610856610d59565b80670de0b6b3a764000081111561087f5760405162461bcd60e51b81526004016103d09061144f565b816066548082036108a25760405162461bcd60e51b81526004016103d090611432565b606680549085905560408051828152602081018790527f0a283689a2a67d2cfa1b5437ddc673b67543282fb40bcce95c12eae21c7c5dd1910161076d565b6001600160a01b0381166000908152606e602052604081206001810154610100900460ff168015610847575060018082015460ff16600281111561092657610926611234565b149392505050565b610936610d59565b80670de0b6b3a764000081111561095f5760405162461bcd60e51b81526004016103d09061144f565b816068548082036109825760405162461bcd60e51b81526004016103d090611432565b606880549085905560408051828152602081018790527f975d37bd9c0c4bb722f6e4ff14ace70da5feaaff5a86847948a4e4fd17c739cb910161076d565b600054610100900460ff16158080156109e05750600054600160ff909116105b806109fa5750303b1580156109fa575060005460ff166001145b610a5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d0565b6000805460ff191660011790558015610a80576000805461ff0019166101001790555b610a88610fa0565b610a93848484610fcf565b801561080d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161059b565b806001600160a01b038116610afc5760405162461bcd60e51b81526004016103d090611415565b60695482906001600160a01b03908116908216819003610b445760405162461bcd60e51b815260206004820152600360248201526253564160e81b60448201526064016103d0565b610b4c610d59565b606980546001600160a01b038681166001600160a01b031983168117909355604080519190921680825260208201939093527f8c3aa5f43a388513435861bf27dfad7829cd248696fed367c62d441f62954496910161076d565b610bae610d59565b6001600160a01b038116610c135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d0565b610c1c81610e19565b50565b806001600160a01b038116610c465760405162461bcd60e51b81526004016103d090611415565b6001600160a01b0382166000908152606e6020526040902060010154610100900460ff1615610c9d5760405162461bcd60e51b81526020600482015260036024820152624d414360e81b60448201526064016103d0565b6040805160608101909152600080825260208201908152600160209182018190526001600160a01b0385166000908152606e835260409020835181559183015182820180549192909160ff191690836002811115610cfd57610cfd611234565b0217905550604091820151600190910180549115156101000261ff0019909216919091179055516001600160a01b038316907feac79790ec7572f2c7ebd3d58fa84f2bb652383d683c622cb6fddbf2153d82ff90600090a25050565b6033546001600160a01b0316331461078e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d0565b606081600201805480602002602001604051908101604052809291908181526020018280548015610e0d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610def575b50505050509050919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152606e602052604090206001810154610100900460ff16610e9d57610e9d83610c1f565b60018082015460ff166002811115610eb757610eb7611234565b03610eea5760405162461bcd60e51b815260206004820152600360248201526210505160ea1b60448201526064016103d0565b6001818101805460ff191690911790556040516001600160a01b038416907fbd7a4b880bfb037ef981159fb51a5b65887258bced43263d699b2abbdddaf21290600090a280548214610f78578181556040518281526001600160a01b038416907fc11794e295293b0555bba7e077274bbdc4988a5fbd20fa8f875163c6e0ecfcca9060200160405180910390a25b505050565b6001600160a01b03811660009081526020839052604090205460ff165b92915050565b600054610100900460ff16610fc75760405162461bcd60e51b81526004016103d09061146c565b61078e61112f565b816001600160a01b038116610ff65760405162461bcd60e51b81526004016103d090611415565b818060000361102d5760405162461bcd60e51b815260206004820152600360248201526216959360ea1b60448201526064016103d0565b600054610100900460ff166110545760405162461bcd60e51b81526004016103d09061146c565b678ac7230489e800008311156110925760405162461bcd60e51b815260206004820152600360248201526250524960e81b60448201526064016103d0565b606980546001600160a01b0319166001600160a01b038616179055606583905560005b85518110156104df576110eb8682815181106110d3576110d36114b7565b6020026020010151606a61115f90919063ffffffff16565b61111d5760405162461bcd60e51b81526020600482015260036024820152622a24a360e91b60448201526064016103d0565b80611127816114cd565b9150506110b5565b600054610100900460ff166111565760405162461bcd60e51b81526004016103d09061146c565b61078e33610e19565b6001600160a01b03811660009081526020839052604081205460ff161561118857506000610f9a565b6001600160a01b038216600081815260208581526040808320805460ff1916600190811790915560028801805480830182559085528385200180546001600160a01b031916861790556003880180549585529088019092528220839055906111ef836114cd565b909155506001949350505050565b80356001600160a01b038116811461121457600080fd5b919050565b60006020828403121561122b57600080fd5b610847826111fd565b634e487b7160e01b600052602160045260246000fd5b81518152602082015160608201906003811061127657634e487b7160e01b600052602160045260246000fd5b8060208401525060408301511515604083015292915050565b600080604083850312156112a257600080fd5b6112ab836111fd565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156112fa5783516001600160a01b0316835292840192918401916001016112d5565b50909695505050505050565b60006020828403121561131857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561134a57600080fd5b833567ffffffffffffffff8082111561136257600080fd5b818601915086601f83011261137657600080fd5b813560208282111561138a5761138a61131f565b8160051b604051601f19603f830116810181811086821117156113af576113af61131f565b60405292835281830193508481018201928a8411156113cd57600080fd5b948201945b838610156113f2576113e3866111fd565b855294820194938201936113d2565b975061140190508882016111fd565b955050505050604084013590509250925092565b6020808252600390820152624e5a4160e81b604082015260600190565b60208082526003908201526229ab2960e91b604082015260600190565b6020808252600390820152622aaa2960e91b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016114ed57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d1a63aef080b9591a7a5496217066861cb8db283173c34813adc16ce2eeeb29764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715e3021116100c3578063a230c5241161007c578063a230c524146102a8578063a821832e146102bb578063bdc252ad146102ce578063f0f44260146102e1578063f2fde38b146102f4578063f6c2e5601461030757600080fd5b8063715e30211461023a578063723ae6fd1461024d578063821b10b01461027057806383914540146102795780638c85cf2d146102845780638da5cb5b1461029757600080fd5b80634920bb38116101155780634920bb38146101c55780634df0b506146101d857806355dc3d5d146101eb5780635ab2af51146101fe57806361d027b314610207578063715018a61461023257600080fd5b806305a570a8146101525780630d692cc11461017b5780630fe7b7bb14610192578063179541ca146101a757806320124bce146101b0575b600080fd5b610165610160366004611219565b61031a565b604051610172919061124a565b60405180910390f35b61018460665481565b604051908152602001610172565b6101a56101a036600461128f565b6103a9565b005b61018460655481565b6101b86104e7565b60405161017291906112b9565b6101a56101d3366004611306565b6104f8565b6101a56101e6366004611219565b6105a9565b6101a56101f9366004611306565b6106df565b61018460675481565b60695461021a906001600160a01b031681565b6040516001600160a01b039091168152602001610172565b6101a561077c565b6101a561024836600461128f565b610790565b61026061025b366004611219565b610813565b6040519015158152602001610172565b61018460685481565b6101846301da9c0081565b6101a5610292366004611306565b61084e565b6033546001600160a01b031661021a565b6102606102b6366004611219565b6108e0565b6101a56102c9366004611306565b61092e565b6101a56102dc366004611335565b6109c0565b6101a56102ef366004611219565b610ad5565b6101a5610302366004611219565b610ba6565b6101a5610315366004611219565b610c1f565b6040805160608082018352600080835260208084018290528385018290526001600160a01b0386168252606e8152908490208451928301909452835482526001840154929391929083019060ff16600281111561037957610379611234565b600281111561038a5761038a611234565b815260019190910154610100900460ff16151560209091015292915050565b816001600160a01b0381166103d95760405162461bcd60e51b81526004016103d090611415565b60405180910390fd5b6001600160a01b0383166000908152606e60205260409020600101548390610100900460ff166104315760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016103d0565b82606481111580156104435750600081115b6104755760405162461bcd60e51b815260206004820152600360248201526252534960e81b60448201526064016103d0565b61047d610d59565b6001600160a01b0385166000908152606e60205260409020805485146104df578481556040518581526001600160a01b038716907fc11794e295293b0555bba7e077274bbdc4988a5fbd20fa8f875163c6e0ecfcca9060200160405180910390a25b505050505050565b60606104f3606a610db3565b905090565b610500610d59565b806065548082036105235760405162461bcd60e51b81526004016103d090611432565b678ac7230489e800008311156105615760405162461bcd60e51b815260206004820152600360248201526250524960e81b60448201526064016103d0565b606580549084905560408051828152602081018690527f5c9e7807505c382f6cd71e36ec29b3a1fb7a714114be8893d22271630a5816df91015b60405180910390a150505050565b806001600160a01b0381166105d05760405162461bcd60e51b81526004016103d090611415565b6001600160a01b0382166000908152606e60205260409020600101548290610100900460ff166106285760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016103d0565b610630610d59565b6001600160a01b0383166000908152606e602052604090206002600182015460ff16600281111561066357610663611234565b036106965760405162461bcd60e51b815260206004820152600360248201526210505160ea1b60448201526064016103d0565b60018101805460ff191660021790556040516001600160a01b038516907f0980e8fb3e23ceaaed73ff0de40847dfa8c9e43aa49f7f689fa660a1a92eadaf90600090a250505050565b6106e7610d59565b80670de0b6b3a76400008111156107105760405162461bcd60e51b81526004016103d09061144f565b816067548082036107335760405162461bcd60e51b81526004016103d090611432565b606780549085905560408051828152602081018790527f817813b712ac80eec87c757eebb97d83b55ec09cd1fd4e3c814510c183ea810f91015b60405180910390a15050505050565b610784610d59565b61078e6000610e19565b565b816001600160a01b0381166107b75760405162461bcd60e51b81526004016103d090611415565b81606481111580156107c95750600081115b6107fb5760405162461bcd60e51b815260206004820152600360248201526252534960e81b60448201526064016103d0565b610803610d59565b61080d8484610e6b565b50505050565b6000816001600160a01b03811661083c5760405162461bcd60e51b81526004016103d090611415565b610847606a84610f7d565b9392505050565b610856610d59565b80670de0b6b3a764000081111561087f5760405162461bcd60e51b81526004016103d09061144f565b816066548082036108a25760405162461bcd60e51b81526004016103d090611432565b606680549085905560408051828152602081018790527f0a283689a2a67d2cfa1b5437ddc673b67543282fb40bcce95c12eae21c7c5dd1910161076d565b6001600160a01b0381166000908152606e602052604081206001810154610100900460ff168015610847575060018082015460ff16600281111561092657610926611234565b149392505050565b610936610d59565b80670de0b6b3a764000081111561095f5760405162461bcd60e51b81526004016103d09061144f565b816068548082036109825760405162461bcd60e51b81526004016103d090611432565b606880549085905560408051828152602081018790527f975d37bd9c0c4bb722f6e4ff14ace70da5feaaff5a86847948a4e4fd17c739cb910161076d565b600054610100900460ff16158080156109e05750600054600160ff909116105b806109fa5750303b1580156109fa575060005460ff166001145b610a5d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103d0565b6000805460ff191660011790558015610a80576000805461ff0019166101001790555b610a88610fa0565b610a93848484610fcf565b801561080d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200161059b565b806001600160a01b038116610afc5760405162461bcd60e51b81526004016103d090611415565b60695482906001600160a01b03908116908216819003610b445760405162461bcd60e51b815260206004820152600360248201526253564160e81b60448201526064016103d0565b610b4c610d59565b606980546001600160a01b038681166001600160a01b031983168117909355604080519190921680825260208201939093527f8c3aa5f43a388513435861bf27dfad7829cd248696fed367c62d441f62954496910161076d565b610bae610d59565b6001600160a01b038116610c135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103d0565b610c1c81610e19565b50565b806001600160a01b038116610c465760405162461bcd60e51b81526004016103d090611415565b6001600160a01b0382166000908152606e6020526040902060010154610100900460ff1615610c9d5760405162461bcd60e51b81526020600482015260036024820152624d414360e81b60448201526064016103d0565b6040805160608101909152600080825260208201908152600160209182018190526001600160a01b0385166000908152606e835260409020835181559183015182820180549192909160ff191690836002811115610cfd57610cfd611234565b0217905550604091820151600190910180549115156101000261ff0019909216919091179055516001600160a01b038316907feac79790ec7572f2c7ebd3d58fa84f2bb652383d683c622cb6fddbf2153d82ff90600090a25050565b6033546001600160a01b0316331461078e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103d0565b606081600201805480602002602001604051908101604052809291908181526020018280548015610e0d57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610def575b50505050509050919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152606e602052604090206001810154610100900460ff16610e9d57610e9d83610c1f565b60018082015460ff166002811115610eb757610eb7611234565b03610eea5760405162461bcd60e51b815260206004820152600360248201526210505160ea1b60448201526064016103d0565b6001818101805460ff191690911790556040516001600160a01b038416907fbd7a4b880bfb037ef981159fb51a5b65887258bced43263d699b2abbdddaf21290600090a280548214610f78578181556040518281526001600160a01b038416907fc11794e295293b0555bba7e077274bbdc4988a5fbd20fa8f875163c6e0ecfcca9060200160405180910390a25b505050565b6001600160a01b03811660009081526020839052604090205460ff165b92915050565b600054610100900460ff16610fc75760405162461bcd60e51b81526004016103d09061146c565b61078e61112f565b816001600160a01b038116610ff65760405162461bcd60e51b81526004016103d090611415565b818060000361102d5760405162461bcd60e51b815260206004820152600360248201526216959360ea1b60448201526064016103d0565b600054610100900460ff166110545760405162461bcd60e51b81526004016103d09061146c565b678ac7230489e800008311156110925760405162461bcd60e51b815260206004820152600360248201526250524960e81b60448201526064016103d0565b606980546001600160a01b0319166001600160a01b038616179055606583905560005b85518110156104df576110eb8682815181106110d3576110d36114b7565b6020026020010151606a61115f90919063ffffffff16565b61111d5760405162461bcd60e51b81526020600482015260036024820152622a24a360e91b60448201526064016103d0565b80611127816114cd565b9150506110b5565b600054610100900460ff166111565760405162461bcd60e51b81526004016103d09061146c565b61078e33610e19565b6001600160a01b03811660009081526020839052604081205460ff161561118857506000610f9a565b6001600160a01b038216600081815260208581526040808320805460ff1916600190811790915560028801805480830182559085528385200180546001600160a01b031916861790556003880180549585529088019092528220839055906111ef836114cd565b909155506001949350505050565b80356001600160a01b038116811461121457600080fd5b919050565b60006020828403121561122b57600080fd5b610847826111fd565b634e487b7160e01b600052602160045260246000fd5b81518152602082015160608201906003811061127657634e487b7160e01b600052602160045260246000fd5b8060208401525060408301511515604083015292915050565b600080604083850312156112a257600080fd5b6112ab836111fd565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156112fa5783516001600160a01b0316835292840192918401916001016112d5565b50909695505050505050565b60006020828403121561131857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561134a57600080fd5b833567ffffffffffffffff8082111561136257600080fd5b818601915086601f83011261137657600080fd5b813560208282111561138a5761138a61131f565b8160051b604051601f19603f830116810181811086821117156113af576113af61131f565b60405292835281830193508481018201928a8411156113cd57600080fd5b948201945b838610156113f2576113e3866111fd565b855294820194938201936113d2565b975061140190508882016111fd565b955050505050604084013590509250925092565b6020808252600390820152624e5a4160e81b604082015260600190565b60208082526003908201526229ab2960e91b604082015260600190565b6020808252600390820152622aaa2960e91b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600182016114ed57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d1a63aef080b9591a7a5496217066861cb8db283173c34813adc16ce2eeeb29764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "__Prime_init(address[],address,uint256)": {
        "details": "External function to initialize the contract after it's been added to the proxy.It initializes the inherited contracts.",
        "params": {
          "penaltyRatePerYear_": "The penalty rate per year",
          "stablecoins": "An array of stablecoins addresses",
          "treasury_": "The address that will receive the fees"
        }
      },
      "availableAssets()": {
        "returns": {
          "_0": "An array of available assets"
        }
      },
      "blacklistMember(address)": {
        "details": "Emits a {MemberBlacklisted} event.",
        "params": {
          "_member": "The member address"
        }
      },
      "changeMemberRiskScore(address,uint256)": {
        "details": "Emits a {RiskScoreChanged} event.",
        "params": {
          "_member": "The member address",
          "_riskScore": "The number up to 100 representing member's score"
        }
      },
      "changeSpreadRate(uint256)": {
        "details": "Callable only by owner. It is a mantissa value, so 1e18 is 100%",
        "params": {
          "spreadRate_": "New spread fee rate"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "isAssetAvailable(address)": {
        "params": {
          "asset": "The address of asset"
        },
        "returns": {
          "isAvailable": "Boolean flag containing asset availability"
        }
      },
      "isMember(address)": {
        "params": {
          "_member": "The address of member"
        },
        "returns": {
          "_0": "Boolean flag containing membership status"
        }
      },
      "membershipOf(address)": {
        "params": {
          "_member": "The address of member"
        },
        "returns": {
          "member": "The member info struct"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestMembership(address)": {
        "details": "Emits a {MemberCreated} event."
      },
      "setOriginationRate(uint256)": {
        "details": "Callable only by owner",
        "params": {
          "_originationRate": "New origination fee rate"
        }
      },
      "setRollingIncrement(uint256)": {
        "details": "Callable only by owner",
        "params": {
          "_incrementPerRoll": "New origination fee rate"
        }
      },
      "setTreasury(address)": {
        "details": "Callable only by owner",
        "params": {
          "treasury_": "The address of the new treasury"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePenaltyRatePerYear(uint256)": {
        "details": "Callable only by owner",
        "params": {
          "penaltyRatePerYear_": "New penalty rate per year value"
        }
      },
      "whitelistMember(address,uint256)": {
        "details": "Emits a {MemberCreated} event.Emits a {MemberWhitelisted} event.Emits a {RiskScoreChanged} event.",
        "params": {
          "_member": "The member address",
          "_riskScore": "The number up to 100 representing member's score"
        }
      }
    },
    "stateVariables": {
      "_members": {
        "details": "A record of each member's info, by address"
      },
      "_stablecoins": {
        "details": "Data struct to simplify the operations with stablecoins addresses"
      },
      "spreadRate": {
        "details": "Protocol spread rate"
      },
      "treasury": {
        "details": "The address that will receive the fees"
      }
    },
    "title": "A contract for control Clearpool Prime membership database",
    "version": 1
  },
  "userdoc": {
    "events": {
      "MemberBlacklisted(address)": {
        "notice": "An event that's emitted when a member is blacklisted"
      },
      "MemberCreated(address)": {
        "notice": "An event that's emitted when a member is created"
      },
      "MemberWhitelisted(address)": {
        "notice": "An event that's emitted when a member is whitelisted"
      },
      "OriginationRateChanged(uint256,uint256)": {
        "notice": "Emitted when origination fee rate is changed"
      },
      "PenaltyRatePerYearUpdated(uint256,uint256)": {
        "notice": "An event that's emitted when the value of the penaltyRatePerYear is changed"
      },
      "RiskScoreChanged(address,uint256)": {
        "notice": "An event that's emitted when a member's riskScore is changed"
      },
      "RollingIncrementChanged(uint256,uint256)": {
        "notice": "Emitted when rolling increment rate is changed"
      },
      "SpreadRateChanged(uint256,uint256)": {
        "notice": "An event that's emitted when the value of the spreadRate is changed"
      },
      "TreasuryChanged(address,address)": {
        "notice": "An event that's emitted when the value of the treasury is changed"
      }
    },
    "kind": "user",
    "methods": {
      "YEAR()": {
        "notice": "Standart year in seconds"
      },
      "availableAssets()": {
        "notice": "Returns an array of assets available for borrowing"
      },
      "blacklistMember(address)": {
        "notice": "Alter membership record by setting `_member` status"
      },
      "changeMemberRiskScore(address,uint256)": {
        "notice": "Alter membership record by setting member `_riskScore`"
      },
      "changeSpreadRate(uint256)": {
        "notice": "Changes the spread rate"
      },
      "incrementPerRoll()": {
        "notice": "Rolling increment rate for the origination fee"
      },
      "isAssetAvailable(address)": {
        "notice": "Check Stablecoin existence for a given `asset` address"
      },
      "isMember(address)": {
        "notice": "Check membership status for a given `_member`"
      },
      "membershipOf(address)": {
        "notice": "Get membership info for a given `_member`"
      },
      "originationRate()": {
        "notice": "Origination fee rate"
      },
      "penaltyRatePerYear()": {
        "notice": "Setted penalty rate per year value"
      },
      "requestMembership(address)": {
        "notice": "Request a membership record"
      },
      "setOriginationRate(uint256)": {
        "notice": "Changes the origination fee rate"
      },
      "setRollingIncrement(uint256)": {
        "notice": "Changes the rolling increment fee rate"
      },
      "setTreasury(address)": {
        "notice": "Sets a new treasury address for the contract"
      },
      "updatePenaltyRatePerYear(uint256)": {
        "notice": "Updates penalty rate per year value"
      },
      "whitelistMember(address,uint256)": {
        "notice": "Alter or creates membership record by setting `_member` status and `_riskScore`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1093,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10091,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "penaltyRatePerYear",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 10094,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "spreadRate",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 10097,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "originationRate",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 10100,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "incrementPerRoll",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 10103,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "treasury",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 10107,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "_stablecoins",
        "offset": 0,
        "slot": "106",
        "type": "t_struct(Data)9907_storage"
      },
      {
        "astId": 10113,
        "contract": "contracts/PrimeMembership/Prime.sol:Prime",
        "label": "_members",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_struct(Member)10003_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(MemberStatus)9995": {
        "encoding": "inplace",
        "label": "enum IPrime.MemberStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Member)10003_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPrime.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)10003_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)9907_storage": {
        "encoding": "inplace",
        "label": "struct Asset.Data",
        "members": [
          {
            "astId": 9897,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "flags",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9901,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "addressIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9904,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "addresses",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9906,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "id",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Member)10003_storage": {
        "encoding": "inplace",
        "label": "struct IPrime.Member",
        "members": [
          {
            "astId": 9997,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "riskScore",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10000,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(MemberStatus)9995"
          },
          {
            "astId": 10002,
            "contract": "contracts/PrimeMembership/Prime.sol:Prime",
            "label": "created",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}