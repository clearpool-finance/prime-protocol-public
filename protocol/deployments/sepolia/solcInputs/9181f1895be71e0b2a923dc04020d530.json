{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/mock/PoolFactoryHarness.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {PoolFactory} from '../Pool/PoolFactory.sol';\n\ncontract PoolFactoryHarness is PoolFactory {\n  event MinDepositWindowChanged(uint256 newValue);\n  event MinMonthlyMaturityChanged(uint256 newValue);\n  event LiquidityMinRangeChanged(uint256 newValue);\n\n  function updateMinDepositWindow(uint256 newValue) external onlyOwner {\n    minDepositWindow = newValue;\n    emit MinDepositWindowChanged(newValue);\n  }\n\n  function updateMinMonthlyMaturity(uint256 newValue) external onlyOwner {\n    minMonthlyMaturity = newValue;\n    emit MinMonthlyMaturityChanged(newValue);\n  }\n\n  function updateLiquidityMinRange(uint256 newValue) external onlyOwner {\n    liquidityMinRange = newValue;\n    emit LiquidityMinRangeChanged(newValue);\n  }\n}\n"
    },
    "contracts/mock/PoolHarness.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {Pool} from '../Pool/Pool.sol';\n\ncontract PoolHarness is Pool {\n  event GracePeriodChanged(uint256 newPeriod);\n  event MonthlyRoundPeriodChanged(uint256 newPeriod);\n  event RollRangePeriodChanged(uint256 newPeriod);\n\n  function updateGracePeriod(uint256 newPeriod) external onlyBorrower {\n    gracePeriodDuration = newPeriod;\n    emit GracePeriodChanged(newPeriod);\n  }\n\n  function updateMonthlyRoundPeriod(uint256 newPeriod) external onlyBorrower {\n    monthlyPaymentRoundDuration = newPeriod;\n    emit MonthlyRoundPeriodChanged(newPeriod);\n  }\n\n  function updateRollRangePeriod(uint256 newPeriod) external onlyBorrower {\n    rollRangeDuration = newPeriod;\n    emit RollRangePeriodChanged(newPeriod);\n  }\n}\n"
    },
    "contracts/Pool/IPool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/// @title Prime IPool contract interface\ninterface IPool {\n  /// @notice Pool member data struct\n  struct Member {\n    bool isCreated; // True if the member is created\n    bool isWhitelisted; // True if the member is whitelisted\n    uint256 principal; // Principal amount\n    uint256 accrualTs; // Timestamp of the last accrual\n    uint256 totalOriginationFee;\n    uint256 totalInterest;\n  }\n\n  /// @notice Roll data struct\n  struct Roll {\n    uint256 startDate; // Start date of the roll\n    uint256 endDate; // End date of the roll\n  }\n\n  /// @notice Callback data struct\n  struct CallBack {\n    bool isCreated; // True if the callback is created\n    uint256 timestamp; // Timestamp of the callback\n  }\n\n  /// @notice Struct to store lender deposits as separate position\n  struct Position {\n    uint256 interest; // total interest for entire deposit period\n    uint256 startAt; // Timestamp of the deposit\n    uint256 endAt; // Timestamp when the interest ends\n  }\n\n  /// @notice Struct to avoid stack too deep error\n  struct PoolData {\n    bool isBulletLoan; // True if the pool is bullet loan, False if the pool is term loan\n    address asset;\n    uint256 size;\n    uint256 tenor;\n    uint256 rateMantissa;\n    uint256 depositWindow;\n  }\n\n  /// @notice Initialize the pool\n  /// @dev This function is called only once during the pool creation\n  /// @param _borrower - Pool borrower address\n  /// @param _spreadRate - Pool protocol spread rate\n  /// @param _originationRate - Pool origination fee rate\n  /// @param _incrementPerRoll - Pool rolling increment rate of origination fee\n  /// @param _penaltyRatePerYear - Pool penalty rate calculated for 1 year\n  /// @param _poolData - Pool data struct: asset, size, tenor, rateMantissa, depositWindow\n  /// @param _members - Pool members (lenders) addresses encoded in bytes\n  function __Pool_init(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) external;\n\n  /// @notice Whitelists lenders\n  /// @dev Can be called only by the borrower\n  /// @param lenders - Lenders addresses encoded in bytes\n  function whitelistLenders(bytes calldata lenders) external returns (bool);\n\n  /// @notice Blacklists lenders\n  /// @dev Can be called only by the borrower\n  /// @param lenders - Lenders addresses encoded in bytes\n  function blacklistLenders(bytes calldata lenders) external returns (bool);\n\n  /// @notice Converts the pool to public\n  /// @dev Can be called only by the borrower\n  /// @return success - True if the pool is converted to public\n  function switchToPublic() external returns (bool success);\n\n  /// @notice Lends funds to the pool\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @param amount - Amount of funds to lend\n  /// @return success - True if the funds are lent\n  function lend(uint256 amount) external returns (bool success);\n\n  /// @notice Fully repays the lender with the principal and interest\n  /// @dev Can be called only by the borrower\n  /// @param lender - Lender address\n  /// @return success - True if the lender is repaid\n  function repay(address lender) external returns (bool success);\n\n  /// @notice Repays all lenders with the principal and interest\n  /// @dev Can be called only by the borrower\n  /// @return success - True if all lenders are repaid\n  function repayAll() external returns (bool success);\n\n  /// @notice Repays interest to the lender\n  /// @dev Can be called only by the borrower in monthly loans\n  function repayInterest() external;\n\n  /// @notice Creates the callback\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @return success - True if the callback is created by the lender\n  function requestCallBack() external returns (bool success);\n\n  /// @notice Cancels the callback\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @return success - True if the callback is cancelled by the lender\n  function cancelCallBack() external returns (bool success);\n\n  /// @notice Requests the roll\n  /// @dev Can be called only by the borrower\n  function requestRoll() external;\n\n  /// @notice Accepts the roll\n  /// @dev Can be called only by the whitelisted Prime lenders\n  function acceptRoll() external;\n\n  /// @notice Defaults the pool\n  /// @dev Can be called only by lender or borrower if time conditions are met\n  /// @dev Can be called by governor without time conditions\n  function markPoolDefaulted() external;\n\n  /// @notice Closes the pool\n  /// @dev Can be called only by the borrower\n  /// @return success - True if the pool is closed\n  function close() external returns (bool success);\n\n  /// @notice Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\n  /// @return totalDue - Total due amount for repayment\n  function totalDue() external view returns (uint256 totalDue);\n\n  /// @notice Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\n  /// @param lender - The address of the lender\n  /// @return due - Due amount for repayment\n  /// @return spreadFee - Protocol spread fee\n  /// @return originationFee - Origination protocol fee\n  /// @return penalty - Penalty fee\n  function dueOf(\n    address lender\n  ) external view returns (uint256 due, uint256 spreadFee, uint256 originationFee, uint256 penalty);\n\n  /// @notice Calculates the total interest and penalty amount for the next payment for all lenders\n  /// @return totalInterest The interest amount\n  function totalDueInterest() external returns (uint256 totalInterest);\n\n  /// @notice Calculates the total interest and penalty for the next payment to the lender\n  /// @param lender The lender address\n  /// @return due The interest amount\n  /// @return spreadFee The spread amount\n  /// @return penalty The penalty amount\n  function dueInterestOf(\n    address lender\n  ) external view returns (uint256 due, uint256 spreadFee, uint256 penalty);\n\n  /// @notice Calculates the accrued amount until today, excluding penalty\n  /// @param lender - The address of the lender\n  /// @return interestAccrued - Accrued amount until today\n  function balanceOf(address lender) external view returns (uint256);\n\n  /// @notice When maturity date passed, calculates the penalty fee for the lender\n  /// @param lender - The address of the lender\n  /// @return penaltyFee - Penalty fee\n  function penaltyOf(address lender) external view returns (uint256);\n\n  /// @notice Calculates the next payment timestamp for the borrower\n  /// @return payableToTimestamp - The timestamp of the next payment\n  function getNextPaymentTimestamp() external view returns (uint256);\n\n  /// @notice Checks if the pool can be defaulted by borrower or lender\n  /// @return isAbleToDefault True if the pool can be defaulted\n  function canBeDefaulted() external view returns (bool isAbleToDefault);\n}\n"
    },
    "contracts/Pool/IPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPool} from './IPool.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\n\n/// @title Prime IPoolFactory interface\ninterface IPoolFactory {\n  /// @notice Initialize the contract\n  /// @dev This function is called only once during the contract deployment\n  /// @param _prime Prime contract address\n  /// @param _poolBeacon Beacon address for pool proxy pattern\n  function __PoolFactory_init(address _prime, address _poolBeacon) external;\n\n  /// @notice Creates a new pool\n  /// @dev Callable only by prime members\n  /// @param pooldata Bla bla bla\n  /// @param members Pool members address encoded in bytes\n  function createPool(IPool.PoolData calldata pooldata, bytes calldata members) external;\n\n  function prime() external view returns (IPrime);\n}\n"
    },
    "contracts/Pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPool} from './IPool.sol';\nimport {IPoolFactory} from './IPoolFactory.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\n\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\n\nimport {NZAGuard} from '../utils/NZAGuard.sol';\nimport {AddressCoder} from '../utils/AddressCoder.sol';\n\n/// @title Pool contract is responsible for managing the pool\ncontract Pool is IPool, Initializable, ReentrancyGuardUpgradeable, NZAGuard {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  /// @notice Standart year in seconds\n  uint256 public constant YEAR = 360 days;\n\n  /// @notice Pool repayment option. Bullet loan or monthly repayment\n  bool public isBulletLoan;\n\n  /// @notice Pool publicity status\n  bool public isPublic;\n\n  /// @notice Pool availability status\n  bool public isClosed;\n\n  /// @notice Roll request status\n  bool public isRollRequested;\n\n  /// @notice Pool borrower address\n  address public borrower;\n\n  /// @notice Asset address of the pool\n  address public asset;\n\n  /// @notice Pool factory address\n  IPoolFactory public factory;\n\n  /// @notice Pool current size\n  uint256 public currentSize;\n\n  /// @notice Pool maximum size\n  uint256 public maxSize;\n\n  /// @notice Pool interest rate (in mantissa)\n  uint256 public rateMantissa;\n\n  /// @notice Protocol spread rate\n  uint256 public spreadRate;\n\n  /// @notice Origination fee rate\n  uint256 public originationRate;\n\n  /// @notice Pool rolling increment fee rate\n  uint256 public incrementPerRoll;\n\n  /// @notice Pool deposit window (in seconds)\n  uint256 public depositWindow;\n\n  /// @notice Pool deposit maturity\n  uint256 public depositMaturity;\n\n  /// @notice Pool tenor\n  uint256 public tenor;\n\n  /// @notice Pool maturity date\n  uint256 public maturityDate;\n\n  /// @notice Pool active roll id\n  uint256 public activeRollId;\n\n  /// @notice The last timestamp at which a payment was made or received in monthly repayment pool.\n  uint256 public lastPaidTimestamp;\n\n  /// @notice If pool is defaulted, this is the timestamp of the default\n  uint256 public defaultedAt;\n\n  /// @notice Pool lenders array\n  address[] private _lenders;\n\n  /// @notice Pool next roll id counter\n  uint256 private _nextRollId;\n\n  /// @notice Pool active lenders count\n  uint256 internal _activeLendersCount;\n\n  /// @notice Pool active callbacks count\n  uint256 private _activeCallbacksCount;\n\n  /// @notice Pool members mapping (lender address => Member struct)\n  mapping(address => Member) private poolMembers;\n\n  /// @notice Pool rolls mapping (roll id => Roll struct)\n  mapping(uint256 => Roll) private _poolRolls;\n\n  /// @notice Pool lender's positions (lender address => Positions array)\n  mapping(address => Position[]) private _lenderPositions;\n\n  /// @notice Pool callbacks mapping (lender address => CallBack struct)\n  mapping(address => CallBack) private _poolCallbacks;\n\n  /// @notice Pool penalty rate calculated for 1 year\n  uint256 public penaltyRatePerYear;\n\n  /// @dev config variables allowing to easily test the time features on testnets\n\n  /// @notice Pool monthly repayment schedule duration (by default is 30 days)\n  uint256 internal monthlyPaymentRoundDuration;\n\n  /// @notice Pool roll request ending range duration (xTs before ending)\n  uint256 internal rollRangeDuration;\n\n  /// @notice Pool grace period duration until the pool can be marked as Default\n  uint256 internal gracePeriodDuration;\n\n  /// @notice Emitted when the pool is activated\n  /// @param depositMaturity - Lender can deposit until this timestamp\n  /// @param maturityDate - Borrower's maturity date (timestamp)\n  event Activated(uint256 depositMaturity, uint256 maturityDate);\n\n  /// @notice Emitted when pool is converted to public\n  event ConvertedToPublic();\n\n  /// @notice Emitted when pool is defaulted\n  event Defaulted();\n\n  /// @notice Emitted when the pool is closed\n  event Closed();\n\n  /// @notice Emitted when the roll is requested\n  /// @param rollId - Id of the roll\n  event RollRequested(uint256 indexed rollId);\n\n  /// @notice Emitted when the pool is rolled\n  /// @param rollId - Id of the new roll\n  /// @param newMaturity - New maturity date (timestamp)\n  event RollAccepted(uint256 indexed rollId, uint256 newMaturity);\n\n  /// @notice Emitted when the roll is rejected\n  /// @param rollId - Id of the roll\n  /// @param user - Address of the user who rejected the roll\n  event RollRejected(uint256 indexed rollId, address user);\n\n  /// @notice Emitted when new lender is added to the pool\n  event LenderWhitelisted(address lender);\n\n  /// @notice Emitted when lender is removed from the pool\n  event LenderBlacklisted(address lender);\n\n  /// @notice Emitted when funds are lent to the pool\n  event Lent(address indexed lender, uint256 amount);\n\n  /// @notice Emitted when lender is fully repayed\n  event Repayed(\n    address indexed lender,\n    uint256 repayed,\n    uint256 spreadFee,\n    uint256 originationFee,\n    uint256 penalty\n  );\n\n  /// @notice Emitted when interest is repayed to the lender\n  event RepayedInterest(\n    address indexed lender,\n    uint256 repayed,\n    uint256 spreadFee,\n    uint256 penalty\n  );\n\n  /// @notice Emitted when callback is created\n  event CallbackCreated(address indexed lender);\n\n  /// @notice Emitted when callback is cancelled\n  event CallbackCancelled(address indexed lender);\n\n  /// @notice Modifier to check if the caller is a prime member\n  modifier onlyPrime() {\n    _isPrimeMember(msg.sender);\n    _;\n  }\n\n  /// @notice Modifier to check if the caller is a pool borrower\n  modifier onlyBorrower() {\n    require(msg.sender == borrower, 'NCR');\n    _;\n  }\n\n  /// @notice Modifier to check if the pool is not closed\n  modifier nonClosed() {\n    require(!isClosed, 'OAC');\n    _;\n  }\n\n  /// @notice Modifier to check if the pool is not defaulted\n  modifier nonDefaulted() {\n    require(defaultedAt == 0, 'PDD');\n    _;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @inheritdoc IPool\n  function __Pool_init(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) external initializer {\n    __ReentrancyGuard_init();\n    __Pool_init_unchained(\n      _borrower,\n      _spreadRate,\n      _originationRate,\n      _incrementPerRoll,\n      _penaltyRatePerYear,\n      _poolData,\n      _members\n    );\n  }\n\n  /// @dev The __Pool_init_unchained sets initial parameters for the pool\n  /// @param _borrower The address of the borrower that created the pool\n  /// @param _spreadRate The rate at which protocol will earn spread\n  /// @param _originationRate The rate of yield enhancement intended to incentivize collateral providers\n  /// @param _penaltyRatePerYear The rate at which borrower will pay additional interest for 1 year\n  /// @param _incrementPerRoll - Pool rolling increment fee rate\n  /// @param _poolData Data regarding the pool\n  /// @param _members The list of members who rose the funds for the borrower\n  function __Pool_init_unchained(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) internal onlyInitializing {\n    /// @dev Fill pool data\n    borrower = _borrower;\n    asset = _poolData.asset;\n    maxSize = _poolData.size;\n    tenor = _poolData.tenor;\n    rateMantissa = _poolData.rateMantissa;\n    depositWindow = _poolData.depositWindow;\n    isBulletLoan = _poolData.isBulletLoan;\n    spreadRate = _spreadRate;\n    originationRate = _originationRate;\n    incrementPerRoll = _incrementPerRoll;\n    penaltyRatePerYear = _penaltyRatePerYear;\n\n    /// @dev config variables\n    monthlyPaymentRoundDuration = 30 days;\n    rollRangeDuration = 48 hours;\n    gracePeriodDuration = 3 days;\n\n    /// @dev Starting new rolls from 1\n    ++_nextRollId;\n\n    /// @dev Factory is caller of initializer\n    factory = IPoolFactory(msg.sender);\n\n    /// @dev Pool is available for all prime users if it is public\n    if (_members.length == 0) {\n      isPublic = true;\n    } else {\n      _parseLenders(true, _members);\n    }\n  }\n\n  /// @inheritdoc IPool\n  function whitelistLenders(\n    bytes calldata lenders\n  ) external override onlyBorrower nonReentrant returns (bool success) {\n    require(lenders.length != 0, 'LLZ');\n\n    /// @dev Pool converts to private if it is public\n    if (isPublic) {\n      isPublic = false;\n    }\n    _parseLenders(true, lenders);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function blacklistLenders(\n    bytes calldata lenders\n  ) external override onlyBorrower nonReentrant returns (bool success) {\n    require(!isPublic, 'OPP');\n    require(lenders.length != 0, 'LLZ');\n\n    _parseLenders(false, lenders);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function switchToPublic() external override onlyBorrower nonReentrant returns (bool success) {\n    require(!isPublic, 'AAD');\n\n    isPublic = true;\n\n    emit ConvertedToPublic();\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function lend(\n    uint256 amount\n  )\n    external\n    override\n    nonReentrant\n    onlyPrime\n    nonZeroValue(amount)\n    nonClosed\n    nonDefaulted\n    returns (bool success)\n  {\n    return _lend(amount, msg.sender);\n  }\n\n  /// @inheritdoc IPool\n  function repay(\n    address lender\n  )\n    external\n    override\n    onlyBorrower\n    nonZeroAddress(lender)\n    nonDefaulted\n    nonReentrant\n    returns (bool success)\n  {\n    return _repayTo(lender);\n  }\n\n  /// @inheritdoc IPool\n  function repayAll()\n    external\n    override\n    onlyBorrower\n    nonDefaulted\n    nonReentrant\n    returns (bool success)\n  {\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      _repayTo(_lenders[i]);\n    }\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function repayInterest() external override onlyBorrower nonDefaulted nonReentrant {\n    require(!isBulletLoan, 'NML');\n    _repayInterest();\n  }\n\n  /// @inheritdoc IPool\n  function requestCallBack()\n    external\n    override\n    onlyPrime\n    nonDefaulted\n    nonClosed\n    returns (bool success)\n  {\n    /// @dev Lender should have principal\n    require(poolMembers[msg.sender].principal != 0, 'LZL');\n\n    /// @dev Lender should not have created callback\n    require(!_poolCallbacks[msg.sender].isCreated, 'AAD');\n\n    /// @dev Callback can be created only before the maturity date\n    require(block.timestamp < maturityDate, 'EMD');\n\n    /// @dev If last lender requests callback and roll is requested\n    /// @dev then roll is rejected\n    if (isRollRequested) {\n      _rejectRoll();\n    }\n\n    /// @dev Increases the number of active callbacks\n    _activeCallbacksCount++;\n\n    /// @dev Saves callback as a struct\n    _poolCallbacks[msg.sender] = CallBack(true, block.timestamp);\n\n    emit CallbackCreated(msg.sender);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function cancelCallBack()\n    external\n    override\n    nonDefaulted\n    nonClosed\n    onlyPrime\n    returns (bool success)\n  {\n    /// @dev Lender should have created callback\n    require(_poolCallbacks[msg.sender].isCreated, 'AAD');\n\n    /// @dev Removes callback\n    delete _poolCallbacks[msg.sender];\n\n    emit CallbackCancelled(msg.sender);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function requestRoll() external override onlyBorrower nonDefaulted nonClosed {\n    /// @dev Roll should not be requested\n    require(!isRollRequested, 'RAR');\n\n    /// @dev Roll can be requested only if there is one active lender and no active callbacks\n    require(_activeLendersCount == 1, 'RCR');\n\n    /// @dev New roll can be activated only after deposit window until {@dev rollRangeDuration} before the maturity date\n    require(\n      block.timestamp > depositMaturity &&\n        block.timestamp > _poolRolls[activeRollId].startDate &&\n        block.timestamp < maturityDate - rollRangeDuration,\n      'RTR'\n    );\n\n    isRollRequested = true;\n\n    emit RollRequested(_nextRollId);\n  }\n\n  /// @inheritdoc IPool\n  function acceptRoll() external override onlyPrime nonClosed nonDefaulted {\n    /// @notice check if the roll was requested\n    require(isRollRequested, 'ARM');\n\n    /// @dev Lender can accept roll only before it starts\n    require(block.timestamp < maturityDate, 'RTR');\n\n    Member storage member = poolMembers[msg.sender];\n\n    /// @dev Should be an authorized lender\n    require(member.principal != 0, 'IMB');\n\n    isRollRequested = false; // renew request status\n\n    /// @dev Get the current roll id\n    uint256 currentRollId = _nextRollId;\n\n    /// @dev Increment the rolls counter\n    ++_nextRollId;\n\n    /// @dev Update the roll id tracker\n    activeRollId = currentRollId;\n\n    /// @dev Save the new roll as Roll struct\n    _poolRolls[currentRollId] = Roll(maturityDate, maturityDate + tenor);\n\n    /// @dev update positions amounts\n    member.totalInterest += (member.principal * _annualRate(rateMantissa, tenor)) / 1e18;\n\n    /// @dev Prolongate the maturity date\n    maturityDate += tenor;\n\n    emit RollAccepted(currentRollId, maturityDate);\n  }\n\n  /// @inheritdoc IPool\n  function markPoolDefaulted() external nonClosed nonDefaulted {\n    /// @dev Governor is able to mark pool as defaulted through the Factory\n    if (msg.sender != address(factory)) {\n      /// @dev Lender or the borrower with loan can mark pool as defaulted\n      _isPrimeMember(msg.sender);\n\n      if (msg.sender != borrower) {\n        /// @dev Lender should have principal\n        require(poolMembers[msg.sender].principal != 0, 'IMB');\n      }\n\n      require(canBeDefaulted(), 'EDR');\n    }\n\n    /// @dev Set the pool default timestamp\n    defaultedAt = block.timestamp;\n\n    emit Defaulted();\n  }\n\n  /// @inheritdoc IPool\n  function close() external override onlyBorrower nonClosed returns (bool success) {\n    /// @dev The pool can be closed only if it's size is 0\n    require(currentSize == 0, 'OHD');\n    _close();\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function totalDue() external view override returns (uint256 totalDueAmount) {\n    /// @dev Gas optimization\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      (uint256 due, uint256 spreadFee, uint256 originationFee, ) = dueOf(_lenders[i]);\n      totalDueAmount += due + spreadFee + originationFee;\n    }\n  }\n\n  /// @inheritdoc IPool\n  function dueOf(\n    address lender\n  )\n    public\n    view\n    override\n    returns (uint256 due, uint256 spreadFee, uint256 originationFee, uint256 penalty)\n  {\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, interest is zero too\n    if (member.principal == 0) {\n      return (0, 0, 0, 0);\n    }\n    (due, spreadFee, penalty) = _dueInterestOf(lender, member.totalInterest, member.accrualTs);\n    originationFee = _getOriginationFee(lender);\n    due += member.principal;\n  }\n\n  /// @inheritdoc IPool\n  function totalDueInterest() external view override returns (uint256 totalInterest) {\n    /// @dev Gas optimization\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      /// @dev Lenders address from the array\n      address lender = _lenders[i];\n      (uint256 interest, uint256 spreadAmount, ) = dueInterestOf(lender);\n      totalInterest += interest + spreadAmount;\n    }\n  }\n\n  /// @inheritdoc IPool\n  function dueInterestOf(\n    address lender\n  ) public view override returns (uint256 due, uint256 spreadFee, uint256 penalty) {\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, interest is zero too\n    if (member.principal == 0) {\n      return (0, 0, 0);\n    }\n\n    if (isBulletLoan) {\n      (due, spreadFee, penalty) = _dueInterestOf(lender, member.totalInterest, member.accrualTs);\n    } else {\n      uint256 timestamp = getNextPaymentTimestamp();\n      uint256 endDate = block.timestamp > timestamp ? block.timestamp : timestamp;\n\n      if (defaultedAt != 0) {\n        endDate = defaultedAt;\n      }\n\n      (due, spreadFee) = _dueInterestFor(member.totalInterest, member.accrualTs, endDate);\n      penalty = _penaltyOf(lender);\n      due += penalty;\n    }\n  }\n\n  /// @inheritdoc IPool\n  function balanceOf(address lender) external view override returns (uint256 balance) {\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, balance is zero too\n    if (member.principal == 0) {\n      return 0;\n    }\n\n    uint256 currentTs = block.timestamp;\n    if (defaultedAt != 0) {\n      currentTs = defaultedAt;\n    }\n\n    balance = member.principal;\n    uint256 positionsLength = _lenderPositions[lender].length;\n    for (uint256 i = 0; i < positionsLength; ++i) {\n      Position memory position = _lenderPositions[lender][i];\n      balance +=\n        (position.interest * (currentTs - position.startAt)) /\n        (position.endAt - position.startAt);\n    }\n  }\n\n  /// @inheritdoc IPool\n  function penaltyOf(address lender) public view override returns (uint256 penalty) {\n    /// @dev In common case, penalty starts from maturity date in case of bullet loan\n    /// @dev or from the last paid timestamp in case of monthly loan\n    return _penaltyOf(lender);\n  }\n\n  /// @inheritdoc IPool\n  function getNextPaymentTimestamp() public view returns (uint256 payableToTimestamp) {\n    /// @dev Initial timestamp is the last paid timestamp\n    payableToTimestamp = lastPaidTimestamp;\n\n    /// @dev If pool is active and last month is paid, next month is payable\n    if (\n      payableToTimestamp != 0 && payableToTimestamp < block.timestamp + monthlyPaymentRoundDuration\n    ) {\n      payableToTimestamp += monthlyPaymentRoundDuration;\n\n      if (payableToTimestamp > maturityDate) {\n        payableToTimestamp = maturityDate;\n      }\n    }\n    return payableToTimestamp;\n  }\n\n  /// @inheritdoc IPool\n  function canBeDefaulted() public view override returns (bool isAbleToDefault) {\n    /// @dev Pool can be marked as defaulted only if it is not defaulted already and has lenders\n    if (defaultedAt != 0 || _activeLendersCount == 0) {\n      return false;\n    }\n\n    if (isBulletLoan) {\n      /// @dev Pool can be marked as defaulted by lender only after ({@dev gracePeriodDuration} + maturity date) in case of bullet loan\n      return block.timestamp > maturityDate + gracePeriodDuration;\n    } else {\n      /// @dev Otherwise, pool can be marked as defaulted by lender only after {@dev gracePeriodDuration + monthlyPaymentRoundDuration} days since last payment\n      return\n        block.timestamp > lastPaidTimestamp + monthlyPaymentRoundDuration + gracePeriodDuration;\n    }\n  }\n\n  /**\n   * @notice Calculates the penalty rate for a given interval\n   * @param interval The interval in seconds\n   * @return The penalty rate as a mantissa between [0, 1e18]\n   */\n  function penaltyRate(uint256 interval) public view returns (uint256) {\n    return (penaltyRatePerYear * interval) / YEAR;\n  }\n\n  /// @notice Returns Prime address\n  /// @dev Prime converted as IPrime interface\n  /// @return primeInstance - Prime address\n  function prime() public view returns (IPrime primeInstance) {\n    /// @dev Factory should keep actual link to Prime\n    return factory.prime();\n  }\n\n  /// @notice Parses the members encoded in bytes and calls _parseLender() for each member\n  /// @dev Internal function\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  /// @param members - The encoded members bytes\n  function _parseLenders(bool isWhitelistOperation, bytes calldata members) internal {\n    if (members.length == 20) {\n      _parseLender(isWhitelistOperation, AddressCoder.decodeAddress(members)[0]);\n    } else {\n      address[] memory addresses = AddressCoder.decodeAddress(members);\n      uint256 length = addresses.length;\n\n      require(length <= 60, 'EAL');\n\n      for (uint256 i = 0; i < length; i++) {\n        _parseLender(isWhitelistOperation, addresses[i]);\n      }\n    }\n  }\n\n  /// @notice Creates lender if not exists and updates the whitelist status\n  /// @dev Internal function\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  /// @param member - The address of the lender\n  function _parseLender(bool isWhitelistOperation, address member) internal {\n    _isPrimeMember(member);\n\n    /// @dev Gas saving link to lender's member struct\n    Member storage memberStruct = poolMembers[member];\n\n    /// @dev Whitelist Lender\n    if (isWhitelistOperation) {\n      /// @dev Creates member if not exists\n      if (!memberStruct.isCreated) {\n        _initLender(member, true);\n      } else {\n        /// @dev Whitelists member if it is not whitelisted\n        memberStruct.isWhitelisted = true;\n      }\n\n      emit LenderWhitelisted(member);\n    } else {\n      /// @dev If we blacklist a lender, it should exist\n      require(memberStruct.isCreated, 'IMB');\n\n      memberStruct.isWhitelisted = false;\n\n      emit LenderBlacklisted(member);\n    }\n  }\n\n  /// @dev Creates lender if not exists and updates the whitelist status\n  /// @param member - The address of the lender\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  function _initLender(address member, bool isWhitelistOperation) internal {\n    /// @dev Creates lender if not exists\n    if (!poolMembers[member].isCreated) {\n      /// @dev Borrower cannot be a lender\n      require(borrower != member, 'BLS');\n      /// @dev Init struct for lender's data\n      poolMembers[member] = Member(true, isWhitelistOperation, 0, 0, 0, 0);\n      _lenders.push(member);\n    }\n  }\n\n  /// @notice Lends funds to the pool\n  /// @dev Internal function\n  /// @param amount - Amount of funds to lend\n  /// @param lender - Lender address\n  /// @return success - True if the funds are lent\n  function _lend(uint256 amount, address lender) internal returns (bool success) {\n    /// @dev New size of the pool shouldn't be greater than max allowed size\n    require(currentSize + amount <= maxSize, 'OSE');\n\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If roll is public, we should create it's data structure\n    if (isPublic) {\n      _initLender(lender, true);\n    } else {\n      /// @dev If roll is private, lender should be whitelisted\n      require(member.isWhitelisted, 'IMB');\n    }\n\n    /// @dev If depositMaturity is zero, it means that the pool is not activated yet\n    if (depositMaturity == 0) {\n      /// @dev Set depositMaturity and maturityDate\n      depositMaturity = block.timestamp + depositWindow;\n      maturityDate = block.timestamp + tenor;\n\n      if (!isBulletLoan) {\n        lastPaidTimestamp = block.timestamp;\n      }\n      emit Activated(depositMaturity, maturityDate);\n    } else {\n      require(block.timestamp <= depositMaturity, 'DWC');\n    }\n    /// @dev Increase pool size, lender's deposit and active lenders count\n    currentSize += amount;\n\n    if (member.principal == 0) {\n      ++_activeLendersCount;\n      member.accrualTs = block.timestamp;\n    }\n    uint256 timeInTenor = maturityDate - block.timestamp;\n\n    _lenderPositions[lender].push(\n      Position({\n        interest: (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18,\n        startAt: block.timestamp,\n        endAt: maturityDate\n      })\n    );\n\n    member.totalInterest += (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18;\n    member.totalOriginationFee += (amount * _annualRate(originationRate, timeInTenor)) / 1e18;\n    /// @dev Update lender's member struct\n    member.principal += amount;\n\n    emit Lent(lender, amount);\n\n    _safeTransferFrom(asset, lender, borrower, amount);\n    return true;\n  }\n\n  /// @notice Repays all the funds to the lender and Pool.\n  /// @dev Internal function\n  /// @param lender - Lender address\n  /// @return success - True if the lender is repaid\n  function _repayTo(address lender) internal returns (bool success) {\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    /// @dev Short circuit for non lenders\n    if (member.principal == 0) {\n      return true;\n    }\n\n    /// @dev Calculate the amount of funds to repay\n    (uint256 memberDueAmount, uint256 spreadFee, uint256 originationFee, uint256 penalty) = dueOf(\n      lender\n    );\n\n    /// @dev Cleanup lender callbacks\n    if (_poolCallbacks[lender].isCreated) {\n      _poolCallbacks[lender].isCreated = false;\n    }\n\n    /// @dev Cleanup lender roll\n    if (activeRollId != 0) {\n      activeRollId = 0;\n    }\n\n    /// @dev Emit repay event before potential pool closure\n    emit Repayed(lender, memberDueAmount, spreadFee, originationFee, penalty);\n\n    /// @dev Cleanup related data\n    currentSize -= member.principal;\n    member.totalInterest = 0;\n    member.totalOriginationFee = 0;\n    member.principal = 0;\n    member.accrualTs = block.timestamp;\n    --_activeLendersCount;\n\n    /// @dev Remove all lender positions\n    delete _lenderPositions[lender];\n\n    /// @dev Close pool if it is empty and deposit window is over\n    if (currentSize == 0 && depositMaturity <= block.timestamp) {\n      _close();\n    }\n\n    uint256 totalFees = spreadFee + originationFee;\n\n    /// @dev Treasury is always not zero address. Pay protocol fees if any\n    if (totalFees != 0) {\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), totalFees);\n    }\n    _safeTransferFrom(asset, msg.sender, lender, memberDueAmount);\n    return true;\n  }\n\n  /// @dev Repays the interest to all lenders\n  function _repayInterest() internal {\n    require(block.timestamp > lastPaidTimestamp, 'RTE');\n\n    /// @dev Get next payment timestamp\n    uint256 newPaidTimestamp = getNextPaymentTimestamp();\n\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      /// @dev Iterate over all lenders and repay interest to each of them\n      _repayInterestTo(_lenders[i], newPaidTimestamp);\n    }\n    lastPaidTimestamp = newPaidTimestamp;\n  }\n\n  /// @dev Repays the interest to the lender\n  function _repayInterestTo(address lender, uint256 lastPaidTs) internal {\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    /// @dev Do not repay interest to non lenders or if already paid\n    if (member.principal == 0) {\n      return;\n    }\n\n    (uint256 interest, uint256 spreadFee, uint256 penalty) = dueInterestOf(lender);\n\n    /// @dev Substract borrow interest from total interest\n    member.totalInterest -=\n      (member.totalInterest * (lastPaidTs - member.accrualTs)) /\n      (maturityDate - member.accrualTs);\n    member.accrualTs = lastPaidTs;\n    emit RepayedInterest(lender, interest, spreadFee, penalty);\n\n    /// @dev Repay fees if any\n    if (spreadFee != 0) {\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), spreadFee);\n    }\n    /// @dev Repay interest and penalty if any.\n    /// @dev interest == 0 is not possible because of the check above for member.accrualTs\n    _safeTransferFrom(asset, msg.sender, lender, interest);\n  }\n\n  /// @dev Rejects the roll\n  function _rejectRoll() internal {\n    isRollRequested = false;\n    emit RollRejected(_nextRollId, msg.sender);\n  }\n\n  /// @dev Closes the pool\n  function _close() internal {\n    isClosed = true;\n    emit Closed();\n  }\n\n  function _getOriginationFee(address lender) internal view returns (uint256 originationFee) {\n    if (originationRate == 0) {\n      return 0;\n    }\n\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    originationFee = member.totalOriginationFee;\n\n    /// @dev Initial maturity date equals to [depositMaturity - depositWindow + tenor].\n    if (\n      _poolCallbacks[lender].isCreated && block.timestamp < depositMaturity - depositWindow + tenor\n    ) {\n      /// @dev If lender hasn't created callback, and borrower repays the loan before the maturity date,\n      /// @dev not all origination fee is used.\n      uint256 unusedTime = maturityDate - block.timestamp;\n\n      originationFee -= (member.principal * (_annualRate(originationRate, unusedTime))) / 1e18;\n    }\n\n    /// @dev If there was a roll and increment per roll is not zero, adjust origination fee\n    if (_nextRollId != 1 && incrementPerRoll != 0) {\n      /// @dev originationFeeAmount is applied only on the original tenure set on the pool,\n      /// @dev and an additional X% annualized added to the originationFeeAmount for every roll.\n      uint256 fullOriginationFeePerRoll = (((member.principal *\n        _annualRate(originationRate, tenor)) / 1e18) * incrementPerRoll) / 1e18;\n\n      if (\n        _poolCallbacks[lender].isCreated &&\n        block.timestamp > _poolRolls[1].startDate &&\n        block.timestamp < maturityDate\n      ) {\n        /// @dev If Callback been requested, origination fee is calculated from the start of the roll\n        /// @dev [times of tenor passed from maturity date] == (daysPassed) / tenor\n        /// @dev Summ origination fee with rolling origination fee\n        originationFee +=\n          (fullOriginationFeePerRoll * (block.timestamp - _poolRolls[1].startDate)) /\n          tenor;\n      } else {\n        originationFee += (fullOriginationFeePerRoll * (_nextRollId - 1));\n      }\n    }\n  }\n\n  function _dueInterestOf(\n    address lender,\n    uint256 totalInterest,\n    uint256 accrualTs\n  ) internal view returns (uint256 due, uint256 spreadFee, uint256 penalty) {\n    /// @dev By default due is calculated up to maturity date\n    uint256 currentTs = maturityDate;\n\n    if (defaultedAt != 0) {\n      currentTs = defaultedAt;\n    } else if (block.timestamp > maturityDate) {\n      currentTs = block.timestamp;\n      /// @dev If the lender requesting callback is repayed up to maturity or currentTs is after maturity use block timestamp\n    } else if (_poolCallbacks[lender].isCreated && block.timestamp < maturityDate) {\n      /// @dev On monthly pools lender interest maybe be repayed in advance, therefore we should pay no interest\n      currentTs = block.timestamp;\n\n      if (!isBulletLoan && accrualTs > currentTs) {\n        currentTs = accrualTs;\n      }\n    }\n    (due, spreadFee) = _dueInterestFor(totalInterest, accrualTs, currentTs);\n    penalty = _penaltyOf(lender);\n\n    /// @dev Due calculation. due == interest + penalty - spreadFee\n    due += penalty;\n  }\n\n  /// @dev Calculates the annual rate for a given interest rate and specific interval\n  /// @param _rateMantissa The interest rate as a mantissa between [0, 1e18]\n  /// @param _timeDelta The interval in seconds\n  /// @return rate as a mantissa between [0, 1e18]\n  function _annualRate(uint256 _rateMantissa, uint256 _timeDelta) internal pure returns (uint256) {\n    return (_rateMantissa * _timeDelta) / YEAR;\n  }\n\n  /// @dev Checks if the address is a prime member\n  /// @param _member - The address of the member\n  function _isPrimeMember(address _member) internal view {\n    require(prime().isMember(_member), 'NPM');\n  }\n\n  /// @dev Calculates the interest for specific time\n  /// @param totalInterest - The interest amount calculated for entire time\n  /// @param accrualTs - The timestamp to which the interest was paid\n  /// @param timestamp - The timestamp to which the interest is calculated\n  /// @return interest - The interest amount for given timestamp (spread is substracted)\n  /// @return spreadAmount - The spread amount\n  function _dueInterestFor(\n    uint256 totalInterest,\n    uint256 accrualTs,\n    uint256 timestamp\n  ) internal view returns (uint256 interest, uint256 spreadAmount) {\n    interest = (totalInterest * (timestamp - accrualTs)) / (maturityDate - accrualTs);\n    spreadAmount = (interest * spreadRate) / 1e18;\n    interest -= spreadAmount;\n  }\n\n  /// @dev Calculates penalty fee for the lender\n  /// @param lender - The address of the lender\n  function _penaltyOf(address lender) internal view returns (uint256) {\n    /// @dev Link to member's data struct\n    Member storage member = poolMembers[lender];\n    /// @dev If principal is zero, no penalty fee is charged.\n    /// @dev If monthly loan penalty fee does not charged if it is a first on time payment.\n    if (member.principal == 0) {\n      return 0;\n    }\n\n    /// @dev Penalty fee is charged from the next month after the last payment in case of monthly loan,\n    /// @dev and from the maturity in case of bullet loan.\n    uint256 startingDate = isBulletLoan\n      ? maturityDate\n      : member.accrualTs + monthlyPaymentRoundDuration;\n\n    /// @dev Adjust starting date if it is greater than maturity date\n    if (!isBulletLoan && startingDate > maturityDate) {\n      startingDate = maturityDate;\n    }\n\n    /// @dev In common case, penalty fee is calculated to the current time\n    uint256 endingDate = block.timestamp;\n\n    if (defaultedAt != 0) {\n      /// @dev If pool is defaulted, penalty fee is calculated to the default date\n      endingDate = defaultedAt;\n    }\n\n    /// @dev Calculate overdue amounts only if pool is overdue or defaulted\n    if (endingDate > startingDate) {\n      uint256 penaltyRateMantissa = penaltyRate(endingDate - startingDate);\n\n      /// @dev If penalty rate is zero, no penalty fee is charged\n      if (penaltyRateMantissa == 0) {\n        return 0;\n      }\n\n      /// @dev Penalty fee == (penaltyRateForTime * principal)\n      /// @dev function callable only if principal is not zero\n      return (penaltyRateMantissa * member.principal) / 1e18;\n    } else {\n      /// @dev Else return zero\n      return 0;\n    }\n  }\n\n  function _safeTransferFrom(\n    address token,\n    address sender,\n    address receiver,\n    uint256 amount\n  ) internal {\n    return IERC20Upgradeable(token).safeTransferFrom(sender, receiver, amount);\n  }\n}\n"
    },
    "contracts/Pool/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPoolFactory} from './IPoolFactory.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\nimport {Pool, IPool} from './Pool.sol';\n\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {BeaconProxy} from '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\n\nimport {NZAGuard} from '../utils/NZAGuard.sol';\n\n/// @title Prime PoolFactory contract is responsible for creating new pools\ncontract PoolFactory is\n  IPoolFactory,\n  Initializable,\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  NZAGuard\n{\n  /// @notice Prime contract address\n  IPrime public prime;\n\n  /// @notice Beacon address for pool proxy pattern\n  address public poolBeacon;\n\n  /// @notice Array of pool addresses\n  address[] public pools;\n\n  /// @notice Deposit window minimum duration\n  uint256 internal minDepositWindow;\n\n  /// @notice Minimum range between deposit window and maturity\n  uint256 internal liquidityMinRange;\n\n  /// @notice monthly pool maturity minimal value\n  uint256 internal minMonthlyMaturity;\n\n  /// @notice Emitted when prime contract address is changed\n  event PrimeContractChanged(address oldAddress, address newAddress);\n\n  /// @notice Emitted when pool beacon address is changed\n  event PoolBeaconChanged(address oldAddress, address newAddress);\n\n  /// @notice Emitted when a new pool is created\n  event PoolCreated(\n    address pool,\n    address indexed borrower,\n    bool isBulletLoan,\n    address indexed asset,\n    uint256 size,\n    uint256 rateMantissa,\n    uint256 tenor,\n    uint256 depositWindow,\n    uint256 spreadRate,\n    uint256 originationRate,\n    uint256 incrementPerRoll,\n    uint256 penaltyRatePerYear\n  );\n\n  /// @notice Modifier to check if the caller is a prime member\n  modifier onlyPrime() {\n    _isPrimeMember(msg.sender);\n    _;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @inheritdoc IPoolFactory\n  function __PoolFactory_init(\n    address _prime,\n    address _poolBeacon\n  ) external override nonZeroAddress(_prime) nonZeroAddress(_poolBeacon) initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    prime = IPrime(_prime);\n    poolBeacon = _poolBeacon;\n\n    /// @dev deposit window should be greater than 1 hour\n    minDepositWindow = 1 hours;\n\n    /// @dev Tenor should be greater than 65 days for non bullet (monthly repayment) loans\n    minMonthlyMaturity = 65 days;\n\n    /// @dev Tenor should be greater than 50 hours and greater than deposit window\n    liquidityMinRange = 49 hours;\n  }\n\n  struct PrimeRates {\n    uint256 spreadRate;\n    uint256 originationRate;\n    uint256 incrementPerRoll;\n    uint256 penaltyRatePerYear;\n  }\n\n  /// @inheritdoc IPoolFactory\n  function createPool(\n    IPool.PoolData calldata pooldata,\n    bytes calldata members\n  ) external override onlyPrime nonZeroAddress(pooldata.asset) nonZeroValue(pooldata.size) {\n    require(pooldata.depositWindow >= minDepositWindow, 'UTR');\n    require(pooldata.tenor >= pooldata.depositWindow + liquidityMinRange, 'DET');\n    if (!pooldata.isBulletLoan) {\n      require(pooldata.tenor >= minMonthlyMaturity, 'TTS');\n    }\n    require(prime.isAssetAvailable(pooldata.asset), 'AAI');\n\n    /// @dev Fetches spread, origination rate and rolling increment from prime contract\n    PrimeRates memory rates = PrimeRates(\n      prime.spreadRate(),\n      prime.originationRate(),\n      prime.incrementPerRoll(),\n      prime.penaltyRatePerYear()\n    );\n\n    /// @dev Creates a pool using beacon proxy pattern\n    address pool = address(new BeaconProxy(poolBeacon, ''));\n\n    /// @dev Initializes the pool according to the pool beacon pattern\n    IPool(pool).__Pool_init(\n      msg.sender,\n      rates.spreadRate,\n      rates.originationRate,\n      rates.incrementPerRoll,\n      rates.penaltyRatePerYear,\n      pooldata,\n      members\n    );\n\n    pools.push(pool);\n\n    emit PoolCreated(\n      pool,\n      msg.sender,\n      pooldata.isBulletLoan,\n      pooldata.asset,\n      pooldata.size,\n      pooldata.rateMantissa,\n      pooldata.tenor,\n      pooldata.depositWindow,\n      rates.spreadRate,\n      rates.originationRate,\n      rates.incrementPerRoll,\n      rates.penaltyRatePerYear\n    );\n  }\n\n  /// @notice Marks the pools as defaulted\n  /// @dev Callable only by owner\n  function defaultPools(address[] calldata _pools) external onlyOwner {\n    uint256 length = _pools.length;\n    for (uint256 i = 0; i < length; ++i) {\n      IPool(_pools[i]).markPoolDefaulted();\n    }\n  }\n\n  /// @notice Returns the pools array\n  /// @return Array of pool addresses\n  function getPools() external view returns (address[] memory) {\n    return pools;\n  }\n\n  /// @notice Changes the prime contract address\n  /// @dev Callable only by owner\n  /// @param newAddress New prime contract address\n  function setPrimeContract(\n    address newAddress\n  ) external nonZeroAddress(newAddress) nonSameAddress(newAddress, address(prime)) onlyOwner {\n    address currentAddress = address(prime);\n\n    prime = IPrime(newAddress);\n    emit PrimeContractChanged(currentAddress, newAddress);\n  }\n\n  /// @notice Changes the pool beacon address\n  /// @dev Callable only by owner\n  /// @param _newPoolBeacon New pool beacon address\n  function setPoolBeacon(\n    address _newPoolBeacon\n  ) external nonZeroAddress(_newPoolBeacon) nonSameAddress(_newPoolBeacon, poolBeacon) onlyOwner {\n    address currentAddress = poolBeacon;\n    poolBeacon = _newPoolBeacon;\n\n    emit PoolBeaconChanged(currentAddress, _newPoolBeacon);\n  }\n\n  /// @notice Checks if the caller is a prime member\n  /// @dev Internal function, reverts if the caller is not a prime member\n  /// @param _member Member address\n  function _isPrimeMember(address _member) internal view {\n    require(prime.isMember(_member), 'NPM');\n  }\n}\n"
    },
    "contracts/PrimeMembership/IPrime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/**\n * @title Interface of the Prime membership contract\n */\ninterface IPrime {\n  /// @notice Member status enum\n  enum MemberStatus {\n    PENDING,\n    WHITELISTED,\n    BLACKLISTED\n  }\n\n  /// @notice A record of member info\n  struct Member {\n    uint256 riskScore;\n    MemberStatus status;\n    bool created;\n  }\n\n  /**\n   * @notice Check membership status for a given `_member`\n   * @param _member The address of member\n   * @return Boolean flag containing membership status\n   */\n  function isMember(address _member) external view returns (bool);\n\n  /**\n   * @notice Check Stablecoin existence for a given `asset` address\n   * @param asset The address of asset\n   * @return Boolean flag containing asset availability\n   */\n  function isAssetAvailable(address asset) external view returns (bool);\n\n  /**\n   * @notice Get membership info for a given `_member`\n   * @param _member The address of member\n   * @return The member info struct\n   */\n  function membershipOf(address _member) external view returns (Member memory);\n\n  /**\n   * @notice Returns current protocol rate value\n   * @return The protocol rate as a mantissa between [0, 1e18]\n   */\n  function spreadRate() external view returns (uint256);\n\n  /**\n   * @notice Returns current originated fee value\n   * @return originated fee rate as a mantissa between [0, 1e18]\n   */\n  function originationRate() external view returns (uint256);\n\n  /**\n   * @notice Returns current rolling increment fee\n   * @return rolling fee rate as a mantissa between [0, 1e18]\n   */\n  function incrementPerRoll() external view returns (uint256);\n\n  /**\n   * @notice Returns current protocol fee collector address\n   * @return address of protocol fee collector\n   */\n  function treasury() external view returns (address);\n\n  /**\n   * @notice Returns current penalty rate for 1 year\n   * @return penalty fee rate as a mantissa between [0, 1e18]\n   */\n  function penaltyRatePerYear() external view returns (uint256);\n}\n"
    },
    "contracts/utils/AddressCoder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nlibrary AddressCoder {\n  function encodeAddress(address[] calldata addresses) internal pure returns (bytes memory data) {\n    for (uint256 i = 0; i < addresses.length; i++) {\n      data = abi.encodePacked(data, addresses[i]);\n    }\n  }\n\n  function decodeAddress(bytes calldata data) internal pure returns (address[] memory addresses) {\n    uint256 n = data.length / 20;\n    addresses = new address[](n);\n\n    for (uint256 i = 0; i < n; i++) {\n      addresses[i] = bytesToAddress(data[i * 20:(i + 1) * 20]);\n    }\n  }\n\n  function bytesToAddress(bytes calldata data) private pure returns (address addr) {\n    bytes memory b = data;\n    assembly {\n      addr := mload(add(b, 20))\n    }\n  }\n}\n"
    },
    "contracts/utils/NZAGuard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\nabstract contract NZAGuard {\n  modifier nonZeroAddress(address _address) {\n    require(_address != address(0), 'NZA');\n    _;\n  }\n  modifier nonZeroValue(uint256 _value) {\n    require(_value != 0, 'ZVL');\n    _;\n  }\n  modifier nonSameValue(uint256 _value1, uint256 _value2) {\n    require(_value1 != _value2, 'SVR');\n    _;\n  }\n  modifier nonSameAddress(address _address1, address _address2) {\n    require(_address1 != _address2, 'SVA');\n    _;\n  }\n  modifier nonMoreThenOne(uint256 _value) {\n    require(_value <= 1e18, 'UTR');\n    _;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}