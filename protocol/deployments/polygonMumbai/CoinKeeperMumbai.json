{
  "address": "0x63F7aacD49Db3e3d94698F6218fBef840f18AF1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isMintable",
          "type": "bool"
        }
      ],
      "name": "addTokenToList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTokenMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokenTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTokenToMe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "myBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "tokenBySymbol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnershipOfToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokenFromTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokenTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferTokenToMe",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa937e0bfd7aac8cbf40da7f437cc6db50c184f6ce363252860e5e9131d537ef6",
  "receipt": {
    "to": null,
    "from": "0xB3FFde53f0076295f2C183f13b4A07dE288Df61D",
    "contractAddress": "0x63F7aacD49Db3e3d94698F6218fBef840f18AF1C",
    "transactionIndex": 5,
    "gasUsed": "918098",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000002000000000000000000000000000000000000000000000000000800000000000000000040100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000201000000000000000040000000000000000000000000000000040000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xeab8f88a04e3aa1c2814160e412566b31e404809408f752d657ae252fb80a1f6",
    "transactionHash": "0xa937e0bfd7aac8cbf40da7f437cc6db50c184f6ce363252860e5e9131d537ef6",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 34278670,
        "transactionHash": "0xa937e0bfd7aac8cbf40da7f437cc6db50c184f6ce363252860e5e9131d537ef6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b3ffde53f0076295f2c183f13b4a07de288df61d",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005be121f7820ce00000000000000000000000000000000000000000000000005b1f345e2d0a9b6000000000000000000000000000000000000000000000f62fcbf35d52a2433dc00000000000000000000000000000000000000000000000005ac3533c35888e8000000000000000000000000000000000000000000000f62fcc4f3e7499c54aa",
        "logIndex": 15,
        "blockHash": "0xeab8f88a04e3aa1c2814160e412566b31e404809408f752d657ae252fb80a1f6"
      }
    ],
    "blockNumber": 34278670,
    "cumulativeGasUsed": "2840405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "faecb149194b1734b54ae1888daf8156",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMintable\",\"type\":\"bool\"}],\"name\":\"addTokenToList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTokenMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTokenToMe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"myBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"tokenBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOfToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenFromTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferTokenToMe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenToList(address,string,bool)\":{\"params\":{\"isMintable\":\"Whether the token is mintable\",\"symbol\":\"Symbol of the token\",\"token\":\"Address of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokenToList(address,string,bool)\":{\"notice\":\"Adds token to the list of tokens\"},\"claim(address,uint256)\":{\"notice\":\"Gives amount of token to msg.sender\"},\"claimAll()\":{\"notice\":\"Gives 1000 of each token to msg.sender\"},\"mintTokenTo(address,address,uint256)\":{\"notice\":\"Mints token to 'to'\"},\"mintTokenToMe(address,uint256)\":{\"notice\":\"Mints token to msg.sender\"},\"myBalanceOf(address)\":{\"notice\":\"Returns msg.sender's balance of token\"},\"transferOwnershipOfToken(address,address)\":{\"notice\":\"Transfers ownership of token to 'newOwner'\"},\"transferTokenFromTo(address,address,address,uint256)\":{\"notice\":\"Transfers token from 'from' to 'to'\"},\"transferTokenTo(address,address,uint256)\":{\"notice\":\"Transfers token from this to 'to'\"},\"transferTokenToMe(address,uint256)\":{\"notice\":\"Transfers token from this to msg.sender\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/CoinKeeperMumbai.sol\":\"CoinKeeperMumbai\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/mock/CoinKeeperMumbai.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './ICoinKeeper.sol';\\n\\ninterface IERC20MintableBurnable is IERC20 {\\n  function faucet(uint256 amount) external;\\n\\n  function faucetTo(address receiver, uint256 amount) external;\\n}\\n\\ncontract CoinKeeperMumbai is ICoinKeeper {\\n  address[] public allTokens;\\n\\n  mapping(string => address) public tokenBySymbol;\\n  mapping(address => bool) public isTokenMintable;\\n  mapping(address => bool) public isTokenExists;\\n\\n  /// @notice Returns msg.sender's balance of token\\n  function myBalanceOf(address token) external view returns (uint256) {\\n    return IERC20(token).balanceOf(msg.sender);\\n  }\\n\\n  /// @notice Gives amount of token to msg.sender\\n  function claim(address token, uint256 amount) public tokenExists(token) returns (bool) {\\n    uint256 balance = IERC20(token).balanceOf(address(this));\\n    if (balance > amount) {\\n      return IERC20(token).transfer(msg.sender, amount);\\n    }\\n    if (isTokenMintable[token]) {\\n      IERC20MintableBurnable(token).faucetTo(msg.sender, amount);\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  /// @notice Gives 1000 of each token to msg.sender\\n  function claimAll() external returns (bool) {\\n    for (uint256 i = 0; i < allTokens.length; i++) {\\n      uint256 tokenDecimals = IERC20Metadata(allTokens[i]).decimals();\\n      uint256 amount = 1000 * 10 ** tokenDecimals;\\n      claim(allTokens[i], amount);\\n    }\\n    return true;\\n  }\\n\\n  /// @notice Adds token to the list of tokens\\n  /// @param token Address of the token\\n  /// @param symbol Symbol of the token\\n  /// @param isMintable Whether the token is mintable\\n  function addTokenToList(\\n    address token,\\n    string calldata symbol,\\n    bool isMintable\\n  ) external returns (bool) {\\n    require(!isTokenExists[token], 'Token already exists');\\n    require(tokenBySymbol[symbol] == address(0), 'Symbol already exists');\\n\\n    allTokens.push(token);\\n\\n    isTokenMintable[token] = isMintable;\\n    isTokenExists[token] = true;\\n    tokenBySymbol[symbol] = token;\\n\\n    return true;\\n  }\\n\\n  /// @notice Mints token to msg.sender\\n  function mintTokenToMe(address token, uint256 amount) external returns (bool) {\\n    return mintTokenTo(token, msg.sender, amount);\\n  }\\n\\n  /// @notice Mints token to 'to'\\n  function mintTokenTo(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) public tokenExists(token) returns (bool) {\\n    require(isTokenMintable[token], 'Token is not mintable');\\n    IERC20MintableBurnable(token).faucetTo(to, amount);\\n    return true;\\n  }\\n\\n  /// @notice Transfers token from this to msg.sender\\n  function transferTokenToMe(\\n    address token,\\n    uint256 amount\\n  ) external tokenExists(token) returns (bool) {\\n    return transferTokenTo(token, msg.sender, amount);\\n  }\\n\\n  /// @notice Transfers token from this to 'to'\\n  function transferTokenTo(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) public tokenExists(token) returns (bool) {\\n    return IERC20(token).transfer(to, amount);\\n  }\\n\\n  /// @notice Transfers token from 'from' to 'to'\\n  function transferTokenFromTo(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external tokenExists(token) returns (bool) {\\n    return IERC20(token).transferFrom(from, to, amount);\\n  }\\n\\n  /// @notice Transfers ownership of token to 'newOwner'\\n  function transferOwnershipOfToken(address token, address newOwner) external tokenExists(token) {\\n    Ownable(token).transferOwnership(newOwner);\\n  }\\n\\n  modifier tokenExists(address token) {\\n    require(isTokenExists[token], 'Token does not exist');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x784d40cde8c3c0b3aa5e6729f3ed8991e8149040b1c8f6cff0a17c60569977bd\",\"license\":\"Apache-2.0\"},\"contracts/mock/ICoinKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\ninterface ICoinKeeper {\\n  function tokenBySymbol(string calldata symbol) external view returns (address);\\n\\n  function isTokenMintable(address token) external view returns (bool);\\n\\n  function isTokenExists(address token) external view returns (bool);\\n\\n  /// @notice Returns msg.sender's balance of token\\n  function myBalanceOf(address token) external view returns (uint256);\\n\\n  /// @notice Gives amount of token to msg.sender\\n  function claim(address token, uint256 amount) external returns (bool);\\n\\n  /// @notice Gives 1000 of each token to msg.sender\\n  function claimAll() external returns (bool);\\n\\n  /// @notice Adds token to the list of tokens\\n  /// @param token Address of the token\\n  /// @param symbol Symbol of the token\\n  /// @param isMintable Whether the token is mintable\\n  function addTokenToList(\\n    address token,\\n    string calldata symbol,\\n    bool isMintable\\n  ) external returns (bool);\\n\\n  /// @notice Mints token to 'to'\\n  function mintTokenTo(address token, address to, uint256 amount) external returns (bool);\\n\\n  /// @notice Transfers token amount from this to msg.sender\\n  function transferTokenToMe(address token, uint256 amount) external returns (bool);\\n\\n  /// @notice Transfers token from this to 'to'\\n  function transferTokenTo(address token, address to, uint256 amount) external returns (bool);\\n\\n  /// @notice Transfers token from 'from' to 'to'\\n  function transferTokenFromTo(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) external returns (bool);\\n\\n  /// @notice Transfers ownership of token to 'newOwner'\\n  function transferOwnershipOfToken(address token, address newOwner) external;\\n}\\n\",\"keccak256\":\"0x739f7cb8688c0dd438db3da751713036c11d27a156a94efff3d4bdbb5165597e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80639ed4fa5a1161008c578063b3a842ff11610066578063b3a842ff14610208578063bdb636061461023c578063d1058e591461024f578063d2a7780c1461025757600080fd5b80639ed4fa5a146101bf578063aad3ec96146101e2578063afcc6303146101f557600080fd5b8063480a3e89116100c8578063480a3e891461014b57806356ea8fd21461015e5780635da619a914610171578063634282af1461019457600080fd5b8063055dbc28146100ef5780630d172a011461011557806336849a6714610138575b600080fd5b6101026100fd366004610b07565b61026c565b6040519081526020015b60405180910390f35b610128610123366004610b22565b6102dd565b604051901515815260200161010c565b610128610146366004610b5e565b61039c565b610128610159366004610b5e565b6103b0565b61012861016c366004610b22565b6103ff565b61012861017f366004610b07565b60026020526000908152604090205460ff1681565b6101a76101a2366004610b88565b610506565b6040516001600160a01b03909116815260200161010c565b6101286101cd366004610b07565b60036020526000908152604090205460ff1681565b6101286101f0366004610b5e565b610530565b610128610203366004610ba1565b6106ee565b6101a7610216366004610c02565b80516020818301810180516001825292820191909301209152546001600160a01b031681565b61012861024a366004610cc4565b6107ad565b61012861094e565b61026a610265366004610d5a565b610a51565b005b6040516370a0823160e01b81523360048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa1580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d79190610d8d565b92915050565b6001600160a01b038316600090815260036020526040812054849060ff166103205760405162461bcd60e51b815260040161031790610da6565b60405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0385811660048301526024820185905286169063a9059cbb906044016020604051808303816000875af115801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190610dd4565b95945050505050565b60006103a98333846103ff565b9392505050565b6001600160a01b038216600090815260036020526040812054839060ff166103ea5760405162461bcd60e51b815260040161031790610da6565b6103f58433856102dd565b91505b5092915050565b6001600160a01b038316600090815260036020526040812054849060ff166104395760405162461bcd60e51b815260040161031790610da6565b6001600160a01b03851660009081526002602052604090205460ff166104995760405162461bcd60e51b8152602060048201526015602482015274546f6b656e206973206e6f74206d696e7461626c6560581b6044820152606401610317565b604051632f2ab52560e11b81526001600160a01b03858116600483015260248201859052861690635e556a4a90604401600060405180830381600087803b1580156104e357600080fd5b505af11580156104f7573d6000803e3d6000fd5b50600198975050505050505050565b6000818154811061051657600080fd5b6000918252602090912001546001600160a01b0316905081565b6001600160a01b038216600090815260036020526040812054839060ff1661056a5760405162461bcd60e51b815260040161031790610da6565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190610d8d565b9050838111156106585760405163a9059cbb60e01b8152336004820152602481018590526001600160a01b0386169063a9059cbb906044016020604051808303816000875af115801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190610dd4565b9250506103f8565b6001600160a01b03851660009081526002602052604090205460ff16156106e357604051632f2ab52560e11b8152336004820152602481018590526001600160a01b03861690635e556a4a90604401600060405180830381600087803b1580156106c157600080fd5b505af11580156106d5573d6000803e3d6000fd5b5050505060019250506103f8565b506000949350505050565b6001600160a01b038416600090815260036020526040812054859060ff166107285760405162461bcd60e51b815260040161031790610da6565b6040516323b872dd60e01b81526001600160a01b0386811660048301528581166024830152604482018590528716906323b872dd906064016020604051808303816000875af115801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190610dd4565b9695505050505050565b6001600160a01b03841660009081526003602052604081205460ff161561080d5760405162461bcd60e51b8152602060048201526014602482015273546f6b656e20616c72656164792065786973747360601b6044820152606401610317565b60006001600160a01b03166001858560405161082a929190610df1565b908152604051908190036020019020546001600160a01b0316146108885760405162461bcd60e51b815260206004820152601560248201527453796d626f6c20616c72656164792065786973747360581b6044820152606401610317565b60008054600180820183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0319166001600160a01b0389169081179091558252600260209081526040808420805460ff199081168815151790915560039092529283902080549091168217905590518691906109149087908790610df1565b90815260405190819003602001902080546001600160a01b03929092166001600160a01b0319909216919091179055506001949350505050565b6000805b600054811015610a4957600080828154811061097057610970610e01565b600091825260209182902001546040805163313ce56760e01b815290516001600160a01b039092169263313ce567926004808401938290030181865afa1580156109be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e29190610e17565b60ff16905060006109f482600a610f34565b610a00906103e8610f40565b9050610a3360008481548110610a1857610a18610e01565b6000918252602090912001546001600160a01b031682610530565b5050508080610a4190610f57565b915050610952565b506001905090565b6001600160a01b038216600090815260036020526040902054829060ff16610a8b5760405162461bcd60e51b815260040161031790610da6565b60405163f2fde38b60e01b81526001600160a01b03838116600483015284169063f2fde38b90602401600060405180830381600087803b158015610ace57600080fd5b505af1158015610ae2573d6000803e3d6000fd5b50505050505050565b80356001600160a01b0381168114610b0257600080fd5b919050565b600060208284031215610b1957600080fd5b6103a982610aeb565b600080600060608486031215610b3757600080fd5b610b4084610aeb565b9250610b4e60208501610aeb565b9150604084013590509250925092565b60008060408385031215610b7157600080fd5b610b7a83610aeb565b946020939093013593505050565b600060208284031215610b9a57600080fd5b5035919050565b60008060008060808587031215610bb757600080fd5b610bc085610aeb565b9350610bce60208601610aeb565b9250610bdc60408601610aeb565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610c1457600080fd5b813567ffffffffffffffff80821115610c2c57600080fd5b818401915084601f830112610c4057600080fd5b813581811115610c5257610c52610bec565b604051601f8201601f19908116603f01168101908382118183101715610c7a57610c7a610bec565b81604052828152876020848701011115610c9357600080fd5b826020860160208301376000928101602001929092525095945050505050565b8015158114610cc157600080fd5b50565b60008060008060608587031215610cda57600080fd5b610ce385610aeb565b9350602085013567ffffffffffffffff80821115610d0057600080fd5b818701915087601f830112610d1457600080fd5b813581811115610d2357600080fd5b886020828501011115610d3557600080fd5b6020830195508094505050506040850135610d4f81610cb3565b939692955090935050565b60008060408385031215610d6d57600080fd5b610d7683610aeb565b9150610d8460208401610aeb565b90509250929050565b600060208284031215610d9f57600080fd5b5051919050565b602080825260149082015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b600060208284031215610de657600080fd5b81516103a981610cb3565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610e2957600080fd5b815160ff811681146103a957600080fd5b634e487b7160e01b600052601160045260246000fd5b600181815b80851115610e8b578160001904821115610e7157610e71610e3a565b80851615610e7e57918102915b93841c9390800290610e55565b509250929050565b600082610ea2575060016102d7565b81610eaf575060006102d7565b8160018114610ec55760028114610ecf57610eeb565b60019150506102d7565b60ff841115610ee057610ee0610e3a565b50506001821b6102d7565b5060208310610133831016604e8410600b8410161715610f0e575081810a6102d7565b610f188383610e50565b8060001904821115610f2c57610f2c610e3a565b029392505050565b60006103a98383610e93565b80820281158282048414176102d7576102d7610e3a565b600060018201610f6957610f69610e3a565b506001019056fea2646970667358221220477165f15b539e144b2848625d86f770e6ff893a67a80115d3619706374a14fc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokenToList(address,string,bool)": {
        "params": {
          "isMintable": "Whether the token is mintable",
          "symbol": "Symbol of the token",
          "token": "Address of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokenToList(address,string,bool)": {
        "notice": "Adds token to the list of tokens"
      },
      "claim(address,uint256)": {
        "notice": "Gives amount of token to msg.sender"
      },
      "claimAll()": {
        "notice": "Gives 1000 of each token to msg.sender"
      },
      "mintTokenTo(address,address,uint256)": {
        "notice": "Mints token to 'to'"
      },
      "mintTokenToMe(address,uint256)": {
        "notice": "Mints token to msg.sender"
      },
      "myBalanceOf(address)": {
        "notice": "Returns msg.sender's balance of token"
      },
      "transferOwnershipOfToken(address,address)": {
        "notice": "Transfers ownership of token to 'newOwner'"
      },
      "transferTokenFromTo(address,address,address,uint256)": {
        "notice": "Transfers token from 'from' to 'to'"
      },
      "transferTokenTo(address,address,uint256)": {
        "notice": "Transfers token from this to 'to'"
      },
      "transferTokenToMe(address,uint256)": {
        "notice": "Transfers token from this to msg.sender"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10162,
        "contract": "contracts/mock/CoinKeeperMumbai.sol:CoinKeeperMumbai",
        "label": "allTokens",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10166,
        "contract": "contracts/mock/CoinKeeperMumbai.sol:CoinKeeperMumbai",
        "label": "tokenBySymbol",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 10170,
        "contract": "contracts/mock/CoinKeeperMumbai.sol:CoinKeeperMumbai",
        "label": "isTokenMintable",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10174,
        "contract": "contracts/mock/CoinKeeperMumbai.sol:CoinKeeperMumbai",
        "label": "isTokenExists",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}