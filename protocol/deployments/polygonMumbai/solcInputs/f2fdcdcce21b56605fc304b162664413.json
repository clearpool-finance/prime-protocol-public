{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/Pool/IERC20Lite.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Minimal interface for ERC20 transfers, used by the Pool to transfer\r\ninterface IERC20Lite {\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/Pool/IPool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title Prime IPool contract interface\r\ninterface IPool {\r\n    /// @notice Pool member data struct\r\n    struct Member {\r\n        bool isCreated; // True if the member is created\r\n        bool isWhitelisted; // True if the member is whitelisted\r\n        uint256 principal; // Principal amount\r\n        uint256 accrualTs; // Timestamp of the last accrual\r\n        uint256 totalOriginationFee;\r\n        uint256 totalInterest;\r\n    }\r\n\r\n    /// @notice Roll data struct\r\n    struct Roll {\r\n        uint256 startDate; // Start date of the roll\r\n        uint256 endDate; // End date of the roll\r\n    }\r\n\r\n    /// @notice Callback data struct\r\n    struct CallBack {\r\n        bool isCreated; // True if the callback is created\r\n        uint256 timestamp; // Timestamp of the callback\r\n    }\r\n\r\n    /// @notice Struct to store lender deposits as separate position\r\n    struct Position {\r\n        uint256 interest; // total interest for entire deposit period\r\n        uint256 startAt; // Timestamp of the deposit\r\n    }\r\n\r\n    /// @notice Struct to avoid stack too deep error\r\n    struct PoolData {\r\n        bool isBulletLoan; // True if the pool is bullet loan, False if the pool is term loan\r\n        address asset;\r\n        uint256 size;\r\n        uint256 tenor;\r\n        uint256 rateMantissa;\r\n        uint256 depositWindow;\r\n    }\r\n\r\n    /// @notice Initialize the pool\r\n    /// @dev This function is called only once during the pool creation\r\n    /// @param _borrower - Pool borrower address\r\n    /// @param _spreadRate - Pool protocol spread rate\r\n    /// @param _originationRate - Pool origination fee rate\r\n    /// @param _incrementPerRoll - Pool rolling increment rate of origination fee\r\n    /// @param _poolData - Pool data struct: asset, size, tenor, rateMantissa, depositWindow\r\n    /// @param _members - Pool members (lenders) addresses encoded in bytes\r\n    function __Pool_init(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) external;\r\n\r\n    /// @notice Whitelists lenders\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lenders - Lenders addresses encoded in bytes\r\n    function whitelistLenders(bytes calldata lenders) external returns (bool);\r\n\r\n    /// @notice Blacklists lenders\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lenders - Lenders addresses encoded in bytes\r\n    function blacklistLenders(bytes calldata lenders) external returns (bool);\r\n\r\n    /// @notice Converts the pool to public\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if the pool is converted to public\r\n    function switchToPublic() external returns (bool success);\r\n\r\n    /// @notice Lends funds to the pool\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @param amount - Amount of funds to lend\r\n    /// @return success - True if the funds are lent\r\n    function lend(uint256 amount) external returns (bool success);\r\n\r\n    /// @notice Fully repays the lender with the principal and interest\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the lender is repaid\r\n    function repay(address lender) external returns (bool success);\r\n\r\n    /// @notice Repays all lenders with the principal and interest\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if all lenders are repaid\r\n    function repayAll() external returns (bool success);\r\n\r\n    /// @notice Repays interest to the lender\r\n    /// @dev Can be called only by the borrower in monthly loans\r\n    function repayInterest() external;\r\n\r\n    /// @notice Creates the callback\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @return success - True if the callback is created by the lender\r\n    function requestCallBack() external returns (bool success);\r\n\r\n    /// @notice Cancels the callback\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @return success - True if the callback is cancelled by the lender\r\n    function cancelCallBack() external returns (bool success);\r\n\r\n    /// @notice Requests the roll\r\n    /// @dev Can be called only by the borrower\r\n    function requestRoll() external;\r\n\r\n    /// @notice Accepts the roll\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    function acceptRoll() external;\r\n\r\n    /// @notice Defaults the pool\r\n    /// @dev Can be called only by lender or borrower if time conditions are met\r\n    /// @dev Can be called by governor without time conditions\r\n    function markPoolDefaulted() external;\r\n\r\n    /// @notice Closes the pool\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if the pool is closed\r\n    function close() external returns (bool success);\r\n\r\n    /// @notice Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\r\n    /// @return totalDue - Total due amount for repayment\r\n    function totalDue() external view returns (uint256 totalDue);\r\n\r\n    /// @notice Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\r\n    /// @param lender - The address of the lender\r\n    /// @return due - Due amount for repayment\r\n    /// @return spreadFee - Protocol spread fee\r\n    /// @return originationFee - Origination protocol fee\r\n    function dueOf(\r\n        address lender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 due, uint256 spreadFee, uint256 originationFee);\r\n\r\n    /// @notice Calculates the total interest and penalty amount for the next payment for all lenders\r\n    /// @return totalInterest The interest amount\r\n    function totalDueInterest() external returns (uint256 totalInterest);\r\n\r\n    /// @notice Calculates the total interest and penalty for the next payment to the lender\r\n    /// @param lender The lender address\r\n    /// @return due The interest amount\r\n    /// @return spreadFee The spread amount\r\n    function dueInterestOf(\r\n        address lender\r\n    ) external view returns (uint256 due, uint256 spreadFee);\r\n\r\n    /// @notice Calculates the accrued amount until today, excluding penalty\r\n    /// @param lender - The address of the lender\r\n    /// @return interestAccrued - Accrued amount until today\r\n    function balanceOf(address lender) external view returns (uint256);\r\n\r\n    /// @notice When maturity date passed, calculates the penalty fee for the lender\r\n    /// @param lender - The address of the lender\r\n    /// @return penaltyFee - Penalty fee\r\n    function penaltyOf(address lender) external view returns (uint256);\r\n\r\n    /// @notice Calculates the next payment timestamp for the borrower\r\n    /// @return payableToTimestamp - The timestamp of the next payment\r\n    function getNextPaymentTimestamp() external view returns (uint256);\r\n\r\n    /// @notice Checks if the pool can be defaulted by borrower or lender\r\n    /// @return isAbleToDefault True if the pool can be defaulted\r\n    function canBeDefaulted() external view returns (bool isAbleToDefault);\r\n}\r\n"
    },
    "contracts/Pool/IPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPool} from \"./IPool.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\n\r\n/// @title Prime IPoolFactory interface\r\ninterface IPoolFactory {\r\n    /// @notice Initialize the contract\r\n    /// @dev This function is called only once during the contract deployment\r\n    /// @param _prime Prime contract address\r\n    /// @param _poolBeacon Beacon address for pool proxy pattern\r\n    function __PoolFactory_init(address _prime, address _poolBeacon) external;\r\n\r\n    /// @notice Creates a new pool\r\n    /// @dev Callable only by prime members\r\n    /// @param pooldata Bla bla bla\r\n    /// @param members Pool members address encoded in bytes\r\n    function createPool(\r\n        IPool.PoolData calldata pooldata,\r\n        bytes calldata members\r\n    ) external;\r\n\r\n    function prime() external view returns (IPrime);\r\n}\r\n"
    },
    "contracts/Pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPool} from \"./IPool.sol\";\r\nimport {IPoolFactory} from \"./IPoolFactory.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\n\r\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\n\r\nimport {IERC20Lite} from \"./IERC20Lite.sol\";\r\nimport {NZAGuard} from \"../utils/NZAGuard.sol\";\r\nimport {AddressCoder} from \"../utils/AddressCoder.sol\";\r\n\r\n/// @title Pool contract is responsible for managing the pool\r\ncontract Pool is\r\n    IPool,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    NZAGuard\r\n{\r\n    /// @notice Standart year in seconds\r\n    uint256 public constant YEAR = 360 days;\r\n\r\n    /// @notice Pool repayment option. Bullet loan or monthly repayment\r\n    bool public isBulletLoan;\r\n\r\n    /// @notice Pool publicity status\r\n    bool public isPublic;\r\n\r\n    /// @notice Pool availability status\r\n    bool public isClosed;\r\n\r\n    /// @notice Roll request status\r\n    bool public isRollRequested;\r\n\r\n    /// @notice Pool borrower address\r\n    address public borrower;\r\n\r\n    /// @notice Asset address of the pool\r\n    address public asset;\r\n\r\n    /// @notice Pool factory address\r\n    IPoolFactory public factory;\r\n\r\n    /// @notice Pool current size\r\n    uint256 public currentSize;\r\n\r\n    /// @notice Pool maximum size\r\n    uint256 public maxSize;\r\n\r\n    /// @notice Pool interest rate (in mantissa)\r\n    uint256 public rateMantissa;\r\n\r\n    /// @notice Protocol spread rate\r\n    uint256 public spreadRate;\r\n\r\n    /// @notice Origination fee rate\r\n    uint256 public originationRate;\r\n\r\n    /// @notice Pool rolling increment fee rate\r\n    uint256 public incrementPerRoll;\r\n\r\n    /// @notice Pool deposit window (in seconds)\r\n    uint256 public depositWindow;\r\n\r\n    /// @notice Pool deposit maturity\r\n    uint256 public depositMaturity;\r\n\r\n    /// @notice Pool tenor\r\n    uint256 public tenor;\r\n\r\n    /// @notice Pool maturity date\r\n    uint256 public maturityDate;\r\n\r\n    /// @notice Pool active roll id\r\n    uint256 public activeRollId;\r\n\r\n    /// @notice The last timestamp at which a payment was made or received in monthly repayment pool.\r\n    uint256 public lastPaidTimestamp;\r\n\r\n    /// @notice If pool is defaulted, this is the timestamp of the default\r\n    uint256 public defaultedAt;\r\n\r\n    /// @notice Pool lenders array\r\n    address[] private _lenders;\r\n\r\n    /// @notice Pool next roll id counter\r\n    uint256 private _nextRollId;\r\n\r\n    /// @notice Pool active lenders count\r\n    uint256 private _activeLendersCount;\r\n\r\n    /// @notice Pool active callbacks count\r\n    uint256 private _activeCallbacksCount;\r\n\r\n    /// @notice Pool members mapping (lender address => Member struct)\r\n    mapping(address => Member) private poolMembers;\r\n\r\n    /// @notice Pool rolls mapping (roll id => Roll struct)\r\n    mapping(uint256 => Roll) private _poolRolls;\r\n\r\n    /// @notice Pool lender's positions (lender address => Positions array)\r\n    mapping(address => Position[]) private _lenderPositions;\r\n\r\n    /// @notice Pool callbacks mapping (lender address => CallBack struct)\r\n    mapping(address => CallBack) private _poolCallbacks;\r\n\r\n    /// @notice Emitted when the pool is activated\r\n    /// @param depositMaturity - Lender can deposit until this timestamp\r\n    /// @param maturityDate - Borrower's maturity date (timestamp)\r\n    event Activated(uint256 depositMaturity, uint256 maturityDate);\r\n\r\n    /// @notice Emitted when pool is converted to public\r\n    event ConvertedToPublic();\r\n\r\n    /// @notice Emitted when pool is defaulted\r\n    event Defaulted();\r\n\r\n    /// @notice Emitted when the pool is closed\r\n    event Closed();\r\n\r\n    /// @notice Emitted when the roll is requested\r\n    /// @param rollId - Id of the roll\r\n    event RollRequested(uint256 indexed rollId);\r\n\r\n    /// @notice Emitted when the pool is rolled\r\n    /// @param rollId - Id of the new roll\r\n    /// @param newMaturity - New maturity date (timestamp)\r\n    event RollAccepted(uint256 indexed rollId, uint256 newMaturity);\r\n\r\n    /// @notice Emitted when the roll is rejected\r\n    /// @param rollId - Id of the roll\r\n    /// @param user - Address of the user who rejected the roll\r\n    event RollRejected(uint256 indexed rollId, address user);\r\n\r\n    /// @notice Emitted when new lender is added to the pool\r\n    event LenderWhitelisted(address lender);\r\n\r\n    /// @notice Emitted when lender is removed from the pool\r\n    event LenderBlacklisted(address lender);\r\n\r\n    /// @notice Emitted when funds are lent to the pool\r\n    event Lent(address indexed lender, uint256 amount);\r\n\r\n    /// @notice Emitted when lender is fully repayed\r\n    event Repayed(\r\n        address indexed lender,\r\n        uint256 repayed,\r\n        uint256 spreadFee,\r\n        uint256 originationFee\r\n    );\r\n\r\n    /// @notice Emitted when interest is repayed to the lender\r\n    event RepayedInterest(\r\n        address indexed lender,\r\n        uint256 repayed,\r\n        uint256 spreadFee\r\n    );\r\n\r\n    /// @notice Emitted when callback is created\r\n    event CallbackCreated(address indexed lender);\r\n\r\n    /// @notice Emitted when callback is cancelled\r\n    event CallbackCancelled(address indexed lender);\r\n\r\n    /// @notice Modifier to check if the caller is a prime member\r\n    modifier onlyPrime() {\r\n        _isPrimeMember(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the caller is a pool borrower\r\n    modifier onlyBorrower() {\r\n        require(msg.sender == borrower, \"NCR\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is not closed\r\n    modifier nonClosed() {\r\n        require(!isClosed, \"OAC\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is not defaulted\r\n    modifier nonDefaulted() {\r\n        require(defaultedAt == 0, \"PDD\");\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function __Pool_init(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) external initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        __Pool_init_unchained(\r\n            _borrower,\r\n            _spreadRate,\r\n            _originationRate,\r\n            _incrementPerRoll,\r\n            _poolData,\r\n            _members\r\n        );\r\n    }\r\n\r\n    /// @dev The __Pool_init_unchained sets initial parameters for the pool\r\n    /// @param _borrower The address of the borrower that created the pool\r\n    /// @param _spreadRate The rate at which protocol will earn spread\r\n    /// @param _originationRate The rate of yield enhancement intended to incentivize collateral providers\r\n    /// @param _incrementPerRoll - Pool rolling increment fee rate\r\n    /// @param _poolData Data regarding the pool\r\n    /// @param _members The list of members who rose the funds for the borrower\r\n    function __Pool_init_unchained(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) internal onlyInitializing {\r\n        /// @dev Fill pool data\r\n        borrower = _borrower;\r\n        asset = _poolData.asset;\r\n        maxSize = _poolData.size;\r\n        tenor = _poolData.tenor;\r\n        rateMantissa = _poolData.rateMantissa;\r\n        depositWindow = _poolData.depositWindow;\r\n        isBulletLoan = _poolData.isBulletLoan;\r\n        spreadRate = _spreadRate;\r\n        originationRate = _originationRate;\r\n        incrementPerRoll = _incrementPerRoll;\r\n\r\n        /// @dev Starting new rolls from 1\r\n        ++_nextRollId;\r\n\r\n        /// @dev Factory is caller of initializer\r\n        factory = IPoolFactory(msg.sender);\r\n\r\n        /// @dev Pool is available for all prime users if it is public\r\n        if (_members.length == 0) {\r\n            isPublic = true;\r\n        } else {\r\n            _parseLenders(true, _members);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function whitelistLenders(\r\n        bytes calldata lenders\r\n    ) external override onlyBorrower nonReentrant returns (bool success) {\r\n        require(lenders.length != 0, \"LLZ\");\r\n\r\n        /// @dev Pool converts to private if it is public\r\n        if (isPublic) {\r\n            isPublic = false;\r\n        }\r\n        _parseLenders(true, lenders);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function blacklistLenders(\r\n        bytes calldata lenders\r\n    ) external override onlyBorrower nonReentrant returns (bool success) {\r\n        require(lenders.length != 0, \"LLZ\");\r\n\r\n        _parseLenders(false, lenders);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function switchToPublic()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        require(!isPublic, \"AAD\");\r\n\r\n        isPublic = true;\r\n\r\n        emit ConvertedToPublic();\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function lend(\r\n        uint256 amount\r\n    )\r\n        external\r\n        override\r\n        nonReentrant\r\n        onlyPrime\r\n        nonZeroValue(amount)\r\n        nonClosed\r\n        nonDefaulted\r\n        returns (bool success)\r\n    {\r\n        return _lend(amount, msg.sender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function repay(\r\n        address lender\r\n    )\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonZeroAddress(lender)\r\n        nonDefaulted\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        return _repayTo(lender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function repayAll()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonDefaulted\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            _repayTo(_lenders[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function repayInterest()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonDefaulted\r\n        nonReentrant\r\n    {\r\n        require(!isBulletLoan, \"NML\");\r\n        _repayInterest();\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function requestCallBack()\r\n        external\r\n        override\r\n        onlyPrime\r\n        nonDefaulted\r\n        nonClosed\r\n        returns (bool success)\r\n    {\r\n        /// @dev Lender should have principal\r\n        require(poolMembers[msg.sender].principal != 0, \"LZL\");\r\n\r\n        /// @dev Lender should not have created callback\r\n        require(!_poolCallbacks[msg.sender].isCreated, \"AAD\");\r\n\r\n        /// @dev Callback can be created only before the maturity date\r\n        require(block.timestamp < maturityDate, \"EMD\");\r\n\r\n        /// @dev If last lender requests callback and roll is requested\r\n        /// @dev then roll is rejected\r\n        if (isRollRequested) {\r\n            _rejectRoll();\r\n        }\r\n\r\n        /// @dev Increases the number of active callbacks\r\n        _activeCallbacksCount++;\r\n\r\n        /// @dev Saves callback as a struct\r\n        _poolCallbacks[msg.sender] = CallBack(true, block.timestamp);\r\n\r\n        emit CallbackCreated(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function cancelCallBack()\r\n        external\r\n        override\r\n        nonDefaulted\r\n        onlyPrime\r\n        returns (bool success)\r\n    {\r\n        /// @dev Lender should have created callback\r\n        require(_poolCallbacks[msg.sender].isCreated, \"AAD\");\r\n\r\n        /// @dev Removes callback\r\n        delete _poolCallbacks[msg.sender];\r\n\r\n        emit CallbackCancelled(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function requestRoll()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonDefaulted\r\n        nonClosed\r\n    {\r\n        /// @dev Roll should be requested\r\n        require(!isRollRequested, \"RAR\");\r\n\r\n        /// @dev Roll can be requested only if there is one active lender and no active callbacks\r\n        require(_activeLendersCount == 1, \"RCR\");\r\n\r\n        /// @dev New roll can be activated only after deposit window until 48 hours before the maturity date\r\n        require(\r\n            block.timestamp > depositMaturity &&\r\n                block.timestamp > _poolRolls[activeRollId].startDate &&\r\n                block.timestamp < maturityDate - 2 days,\r\n            \"RTR\"\r\n        );\r\n\r\n        isRollRequested = true;\r\n\r\n        emit RollRequested(_nextRollId);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function acceptRoll() external override onlyPrime nonClosed nonDefaulted {\r\n        /// @notice check if the roll was requested\r\n        require(isRollRequested, \"ARM\");\r\n\r\n        /// @dev Lender can accept roll only before it starts\r\n        require(block.timestamp < maturityDate, \"RTR\");\r\n\r\n        Member storage member = poolMembers[msg.sender];\r\n\r\n        /// @dev Should be an authorized lender\r\n        require(member.principal != 0, \"IMB\");\r\n\r\n        /// @dev Roll can be accepted only if there is one active lender\r\n        require(_activeLendersCount == 1, \"RCR\");\r\n\r\n        isRollRequested = false; // renew request status\r\n\r\n        /// @dev Get the current roll id\r\n        uint256 currentRollId = _nextRollId;\r\n\r\n        /// @dev Increment the rolls counter\r\n        ++_nextRollId;\r\n\r\n        /// @dev Update the roll id tracker\r\n        activeRollId = currentRollId;\r\n\r\n        /// @dev Save the new roll as Roll struct\r\n        _poolRolls[currentRollId] = Roll(maturityDate, maturityDate + tenor);\r\n\r\n        /// @dev Prolongate the maturity date\r\n        maturityDate += tenor;\r\n\r\n        member.totalInterest +=\r\n            (member.principal * _annualRate(rateMantissa, tenor)) /\r\n            1e18;\r\n\r\n        emit RollAccepted(currentRollId, maturityDate);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function markPoolDefaulted() external nonClosed nonDefaulted {\r\n        /// @dev Governor is able to mark pool as defaulted through the Factory\r\n        if (msg.sender != address(factory)) {\r\n            /// @dev Lender or the borrower with loan can mark pool as defaulted\r\n            _isPrimeMember(msg.sender);\r\n\r\n            if (msg.sender != borrower) {\r\n                /// @dev Lender should have principal\r\n                require(poolMembers[msg.sender].principal != 0, \"IMB\");\r\n            }\r\n\r\n            require(canBeDefaulted(), \"EDR\");\r\n        }\r\n\r\n        /// @dev Set the pool default timestamp\r\n        defaultedAt = block.timestamp;\r\n\r\n        emit Defaulted();\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function close()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonClosed\r\n        returns (bool success)\r\n    {\r\n        /// @dev The pool can be closed only if it's size is 0\r\n        require(currentSize == 0, \"OHD\");\r\n        _close();\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function totalDue()\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 totalDueAmount)\r\n    {\r\n        /// @dev Gas optimization\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            (uint256 due, uint256 spreadFee, uint256 originationFee) = dueOf(\r\n                _lenders[i]\r\n            );\r\n            totalDueAmount += due + spreadFee + originationFee;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function dueOf(\r\n        address lender\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 due, uint256 spreadFee, uint256 originationFee)\r\n    {\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If principal is zero, due is zero too\r\n        if (member.principal == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        uint256 interest = member.totalInterest;\r\n\r\n        /// @dev Define the lender's active timestamp and origination fee if any\r\n        uint256 principalPaymentTimestamp = block.timestamp;\r\n\r\n        if (\r\n            _poolCallbacks[lender].isCreated &&\r\n            principalPaymentTimestamp < maturityDate\r\n        ) {\r\n            /// @dev Substract extra interest from the total interest in case of callback\r\n            interest -=\r\n                (member.principal *\r\n                    _annualRate(\r\n                        rateMantissa,\r\n                        maturityDate - principalPaymentTimestamp\r\n                    )) /\r\n                1e18;\r\n        }\r\n\r\n        if (principalPaymentTimestamp > maturityDate) {\r\n            /// @dev Add extra interest to the total interest in case of late payment\r\n            interest +=\r\n                (member.principal *\r\n                    _annualRate(\r\n                        rateMantissa,\r\n                        principalPaymentTimestamp - maturityDate\r\n                    )) /\r\n                1e18;\r\n        }\r\n\r\n        /// @dev SpreadAmount = spreadRate * (interest)\r\n        spreadFee = (spreadRate * interest) / 1e18;\r\n\r\n        /// @dev Due calculation. due == principal + interest - spreadFee + penalty\r\n        due = member.principal + interest - spreadFee + _getPenaltyFee(lender);\r\n\r\n        originationFee = _getOriginationFee(lender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function totalDueInterest()\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 totalInterest)\r\n    {\r\n        uint256 timestamp = getNextPaymentTimestamp();\r\n\r\n        /// @dev Gas optimization\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            /// @dev Lenders address from the array\r\n            address lender = _lenders[i];\r\n            (\r\n                uint256 interest,\r\n                uint256 spreadAmount,\r\n                uint256 penalty\r\n            ) = _dueInterestAtTime(lender, timestamp);\r\n\r\n            totalInterest += interest + spreadAmount + penalty;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function dueInterestOf(\r\n        address lender\r\n    ) external view override returns (uint256 due, uint256 spreadFee) {\r\n        uint256 timestamp = getNextPaymentTimestamp();\r\n\r\n        uint256 penalty;\r\n\r\n        (due, spreadFee, penalty) = _dueInterestAtTime(lender, timestamp);\r\n\r\n        due += penalty;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function balanceOf(\r\n        address lender\r\n    ) external view override returns (uint256 balance) {\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If principal is zero, balance is zero too\r\n        if (member.principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        balance = member.principal;\r\n\r\n        uint256 positionsLength = _lenderPositions[lender].length;\r\n        for (uint256 i = 0; i < positionsLength; ++i) {\r\n            Position memory position = _lenderPositions[lender][i];\r\n            balance +=\r\n                (position.interest * (block.timestamp - position.startAt)) /\r\n                (maturityDate - position.startAt);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function penaltyOf(address lender) public view override returns (uint256) {\r\n        /// @dev In common case, penalty starts from maturity date\r\n        return _getPenaltyFee(lender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function getNextPaymentTimestamp()\r\n        public\r\n        view\r\n        returns (uint256 payableToTimestamp)\r\n    {\r\n        /// @dev Initial timestamp is the last paid timestamp\r\n        payableToTimestamp = lastPaidTimestamp;\r\n\r\n        /// @dev If pool is active and last month is paid, next month is payable\r\n        if (\r\n            payableToTimestamp != 0 &&\r\n            payableToTimestamp < block.timestamp + 30 days\r\n        ) {\r\n            payableToTimestamp += 30 days;\r\n\r\n            if (payableToTimestamp > maturityDate) {\r\n                payableToTimestamp = maturityDate;\r\n            }\r\n\r\n            while (block.timestamp > payableToTimestamp) {\r\n                payableToTimestamp += 30 days;\r\n                if (payableToTimestamp > maturityDate) {\r\n                    payableToTimestamp = maturityDate;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return payableToTimestamp;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function canBeDefaulted()\r\n        public\r\n        view\r\n        override\r\n        returns (bool isAbleToDefault)\r\n    {\r\n        /// @dev Pool can be marked as defaulted only if it is not defaulted already and has lenders\r\n        if (defaultedAt != 0 || _activeLendersCount == 0) {\r\n            return false;\r\n        }\r\n\r\n        if (isBulletLoan) {\r\n            /// @dev Pool can be marked as defaulted by lender only after (72 hours + maturity date) in case of bullet loan\r\n            return block.timestamp > maturityDate + 3 days;\r\n        } else {\r\n            /// @dev Otherwise, pool can be marked as defaulted by lender only after 33 days since last payment\r\n            return block.timestamp > lastPaidTimestamp + 33 days;\r\n        }\r\n    }\r\n\r\n    /// @notice Returns Prime address\r\n    /// @dev Prime converted as IPrime interface\r\n    /// @return primeInstance - Prime address\r\n    function prime() public view returns (IPrime primeInstance) {\r\n        /// @dev Factory should keep actual link to Prime\r\n        return factory.prime();\r\n    }\r\n\r\n    /// @notice Parses the members encoded in bytes and calls _parseLender() for each member\r\n    /// @dev Internal function\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    /// @param members - The encoded members bytes\r\n    function _parseLenders(\r\n        bool isWhitelistOperation,\r\n        bytes calldata members\r\n    ) internal {\r\n        if (members.length == 20) {\r\n            _parseLender(\r\n                isWhitelistOperation,\r\n                AddressCoder.decodeAddress(members)[0]\r\n            );\r\n        } else {\r\n            address[] memory addresses = AddressCoder.decodeAddress(members);\r\n            uint256 length = addresses.length;\r\n\r\n            require(length <= 60, \"EAL\");\r\n\r\n            for (uint256 i = 0; i < length; i++) {\r\n                _parseLender(isWhitelistOperation, addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Creates lender if not exists and updates the whitelist status\r\n    /// @dev Internal function\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    /// @param member - The address of the lender\r\n    function _parseLender(bool isWhitelistOperation, address member) internal {\r\n        _isPrimeMember(member);\r\n\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage memberStruct = poolMembers[member];\r\n\r\n        /// @dev Whitelist Lender\r\n        if (isWhitelistOperation) {\r\n            /// @dev Creates member if not exists\r\n            if (!memberStruct.isCreated) {\r\n                _initLender(member, true);\r\n            } else {\r\n                /// @dev Whitelists member if it is not whitelisted\r\n                memberStruct.isWhitelisted = true;\r\n            }\r\n\r\n            emit LenderWhitelisted(member);\r\n        } else {\r\n            /// @dev If we blacklist a lender, it should exist\r\n            require(memberStruct.isCreated, \"IMB\");\r\n\r\n            memberStruct.isWhitelisted = false;\r\n\r\n            emit LenderBlacklisted(member);\r\n        }\r\n    }\r\n\r\n    /// @dev Creates lender if not exists and updates the whitelist status\r\n    /// @param member - The address of the lender\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    function _initLender(address member, bool isWhitelistOperation) internal {\r\n        /// @dev Creates lender if not exists\r\n        if (!poolMembers[member].isCreated) {\r\n            /// @dev Borrower cannot be a lender\r\n            require(borrower != member, \"BLS\");\r\n            /// @dev Init struct for lender's data\r\n            poolMembers[member] = Member(\r\n                true,\r\n                isWhitelistOperation,\r\n                0,\r\n                0,\r\n                0,\r\n                0\r\n            );\r\n            _lenders.push(member);\r\n        }\r\n    }\r\n\r\n    /// @notice Lends funds to the pool\r\n    /// @dev Internal function\r\n    /// @param amount - Amount of funds to lend\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the funds are lent\r\n    function _lend(\r\n        uint256 amount,\r\n        address lender\r\n    ) internal returns (bool success) {\r\n        /// @dev New size of the pool shouldn't be greater than max allowed size\r\n        require(currentSize + amount <= maxSize, \"OSE\");\r\n\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If roll is public, we should create it's data structure\r\n        if (isPublic) {\r\n            _initLender(lender, true);\r\n        } else {\r\n            /// @dev If roll is private, lender should be whitelisted\r\n            require(member.isWhitelisted, \"IMB\");\r\n        }\r\n\r\n        /// @dev If depositMaturity is zero, it means that the pool is not activated yet\r\n        if (depositMaturity == 0) {\r\n            /// @dev Set depositMaturity and maturityDate\r\n            depositMaturity = block.timestamp + depositWindow;\r\n            maturityDate = block.timestamp + tenor;\r\n\r\n            if (!isBulletLoan) {\r\n                lastPaidTimestamp = block.timestamp;\r\n            }\r\n            emit Activated(depositMaturity, maturityDate);\r\n        } else {\r\n            require(block.timestamp <= depositMaturity, \"DWC\");\r\n        }\r\n        /// @dev Increase pool size, lender's deposit and active lenders count\r\n        currentSize += amount;\r\n\r\n        if (member.principal == 0) {\r\n            ++_activeLendersCount;\r\n            member.accrualTs = block.timestamp;\r\n        }\r\n        uint256 timeInTenor = maturityDate - block.timestamp;\r\n\r\n        _lenderPositions[lender].push(\r\n            Position({\r\n                interest: (amount * _annualRate(rateMantissa, timeInTenor)) /\r\n                    1e18,\r\n                startAt: block.timestamp\r\n            })\r\n        );\r\n\r\n        member.totalInterest +=\r\n            (amount * _annualRate(rateMantissa, timeInTenor)) /\r\n            1e18;\r\n\r\n        member.totalOriginationFee +=\r\n            (amount * _annualRate(originationRate, timeInTenor)) /\r\n            1e18;\r\n\r\n        /// @dev Update lender's member struct\r\n        member.principal += amount;\r\n\r\n        emit Lent(lender, amount);\r\n\r\n        return IERC20Lite(asset).transferFrom(lender, borrower, amount);\r\n    }\r\n\r\n    /// @notice Repays all the funds to the lender and Pool.\r\n    /// @dev Internal function\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the lender is repaid\r\n    function _repayTo(address lender) internal returns (bool success) {\r\n        /// @dev Member struct link\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev Short circuit for non lenders\r\n        if (member.principal == 0) {\r\n            return true;\r\n        }\r\n\r\n        /// @dev Calculate the amount of funds to repay\r\n        (\r\n            uint256 memberDueAmount,\r\n            uint256 spreadFee,\r\n            uint256 originationFee\r\n        ) = dueOf(lender);\r\n\r\n        /// @dev Cleanup lender callbacks\r\n        if (_poolCallbacks[lender].isCreated) {\r\n            _poolCallbacks[lender].isCreated = false;\r\n        }\r\n\r\n        /// @dev Cleanup lender roll\r\n        if (activeRollId != 0) {\r\n            activeRollId = 0;\r\n        }\r\n\r\n        /// @dev Emit repay event before potential pool closure\r\n        emit Repayed(lender, memberDueAmount, spreadFee, originationFee);\r\n\r\n        /// @dev Cleanup related data\r\n        currentSize -= member.principal;\r\n        member.totalInterest = 0;\r\n        member.totalOriginationFee = 0;\r\n        member.principal = 0;\r\n        member.accrualTs = block.timestamp;\r\n        --_activeLendersCount;\r\n\r\n        /// @dev Remove all lender positions\r\n        delete _lenderPositions[lender];\r\n\r\n        /// @dev Close pool if it is empty and deposit window is over\r\n        if (currentSize == 0 && depositMaturity <= block.timestamp) {\r\n            _close();\r\n        }\r\n\r\n        uint256 totalFees = spreadFee + originationFee;\r\n\r\n        /// @dev Treasury is always not zero address. Pay protocol fees if any\r\n        if (totalFees != 0) {\r\n            require(\r\n                IERC20Lite(asset).transferFrom(\r\n                    msg.sender,\r\n                    prime().treasury(),\r\n                    totalFees\r\n                ),\r\n                \"TFL\"\r\n            );\r\n        }\r\n        return\r\n            IERC20Lite(asset).transferFrom(msg.sender, lender, memberDueAmount);\r\n    }\r\n\r\n    /// @dev Repays the interest to all lenders\r\n    function _repayInterest() internal onlyBorrower nonDefaulted {\r\n        /// @dev Get next payment timestamp\r\n        uint256 newPaidTimestamp = getNextPaymentTimestamp();\r\n\r\n        /// @dev Borrower can pay only for the next month or any previous month\r\n        require(lastPaidTimestamp != newPaidTimestamp, \"RTE\");\r\n\r\n        lastPaidTimestamp = newPaidTimestamp;\r\n\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            /// @dev Iterate over all lenders and repay interest to each of them\r\n            _repayInterestTo(_lenders[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Repays the interest to the lender\r\n    function _repayInterestTo(address lender) internal {\r\n        /// @dev Member struct link\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev Do not repay interest to non lenders or if already paid\r\n        if (member.principal == 0 || member.accrualTs >= lastPaidTimestamp) {\r\n            return;\r\n        }\r\n\r\n        (\r\n            uint256 interest,\r\n            uint256 spreadFee,\r\n            uint256 penalty\r\n        ) = _dueInterestAtTime(lender, lastPaidTimestamp);\r\n\r\n        uint256 lenderRecieves = interest + penalty;\r\n\r\n        emit RepayedInterest(lender, lenderRecieves, spreadFee);\r\n\r\n        member.totalInterest -= interest + spreadFee;\r\n        member.accrualTs = lastPaidTimestamp;\r\n\r\n        /// @dev Repay fees if any\r\n        if (spreadFee != 0) {\r\n            require(\r\n                IERC20Lite(asset).transferFrom(\r\n                    msg.sender,\r\n                    prime().treasury(),\r\n                    spreadFee\r\n                ),\r\n                \"TFL\"\r\n            );\r\n        }\r\n        /// @dev Repay interest and penalty if any.\r\n        /// @dev lenderRecieves == 0 is not possible because of the check above for member.accrualTs\r\n        require(\r\n            IERC20Lite(asset).transferFrom(msg.sender, lender, lenderRecieves),\r\n            \"TFL\"\r\n        );\r\n    }\r\n\r\n    /// @dev Rejects the roll\r\n    function _rejectRoll() internal {\r\n        isRollRequested = false;\r\n        emit RollRejected(_nextRollId, msg.sender);\r\n    }\r\n\r\n    /// @dev Closes the pool\r\n    function _close() internal {\r\n        isClosed = true;\r\n        emit Closed();\r\n    }\r\n\r\n    function _getOriginationFee(\r\n        address lender\r\n    ) internal view returns (uint256 originationFee) {\r\n        /// @dev Member struct link\r\n        Member storage member = poolMembers[lender];\r\n\r\n        if (originationRate == 0 || member.principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        originationFee = member.totalOriginationFee;\r\n\r\n        /// @dev Initial maturity date equals to [depositMaturity - depositWindow + tenor].\r\n        if (\r\n            _poolCallbacks[lender].isCreated &&\r\n            block.timestamp < depositMaturity - depositWindow + tenor\r\n        ) {\r\n            /// @dev If lender hasn't created callback, and borrower repays the loan before the maturity date,\r\n            /// @dev not all origination fee is used.\r\n            uint256 unusedTime = maturityDate - block.timestamp;\r\n\r\n            originationFee -=\r\n                (member.principal *\r\n                    (_annualRate(originationRate, unusedTime))) /\r\n                1e18;\r\n        }\r\n\r\n        /// @dev If there was a roll and increment per roll is not zero, adjust origination fee\r\n        if (_nextRollId != 1 && incrementPerRoll != 0) {\r\n            /// @dev originationFeeAmount is applied only on the original tenure set on the pool,\r\n            /// @dev and an additional X% annualized added to the originationFeeAmount for every roll.\r\n            uint256 fullOriginationFeePerRoll = (((member.principal *\r\n                _annualRate(originationRate, tenor)) / 1e18) *\r\n                incrementPerRoll) / 1e18;\r\n\r\n            if (\r\n                _poolCallbacks[lender].isCreated &&\r\n                block.timestamp > _poolRolls[1].startDate &&\r\n                block.timestamp < maturityDate\r\n            ) {\r\n                /// @dev If Callback been requested, origination fee is calculated from the start of the roll\r\n                /// @dev [times of tenor passed from maturity date] == (daysPassed) / tenor\r\n                /// @dev Summ origination fee with rolling origination fee\r\n                originationFee +=\r\n                    (fullOriginationFeePerRoll *\r\n                        (block.timestamp - _poolRolls[1].startDate)) /\r\n                    tenor;\r\n            } else {\r\n                originationFee += (fullOriginationFeePerRoll *\r\n                    (_nextRollId - 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Calculates penalty fee for the lender\r\n    /// @param lender - The address of the lender\r\n    function _getPenaltyFee(\r\n        address lender\r\n    ) internal view returns (uint256 penaltyFee) {\r\n        /// @dev Link to member's data struct\r\n        Member storage member = poolMembers[lender];\r\n        /// @dev If principal is zero, no penalty fee is charged.\r\n        /// @dev If monthly loan penalty fee does not charged if it is a first on time payment.\r\n        if (member.principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        /// @dev Penalty fee is charged from the next month after the last payment in case of monthly loan,\r\n        /// @dev and from the maturity in case of bullet loan.\r\n        uint256 startingDate = isBulletLoan\r\n            ? maturityDate\r\n            : member.accrualTs + 30 days;\r\n\r\n        /// @dev In common case, penalty fee is calculated to the current time\r\n        uint256 endingDate = block.timestamp;\r\n\r\n        if (defaultedAt != 0) {\r\n            /// @dev If pool is defaulted, penalty fee is calculated to the default date\r\n            endingDate = defaultedAt;\r\n        }\r\n\r\n        /// @dev Calculate penalty fee only if pool is overdue or defaulted\r\n        if (endingDate > startingDate) {\r\n            uint256 penaltyRateMantissa = prime().penaltyRate(\r\n                endingDate - startingDate\r\n            );\r\n\r\n            /// @dev If penalty rate is zero, no penalty fee is charged\r\n            if (penaltyRateMantissa == 0) {\r\n                return 0;\r\n            }\r\n\r\n            /// @dev Penalty fee == (penaltyRateForTime * principal)\r\n            /// @dev function callable only if principal is not zero\r\n            return (penaltyRateMantissa * member.principal) / 1e18;\r\n        } else {\r\n            /// @dev Else return zero\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @dev Calculates the annual rate for a given interest rate and specific interval\r\n    /// @param _rateMantissa The interest rate as a mantissa between [0, 1e18]\r\n    /// @param _timeDelta The interval in seconds\r\n    /// @return rate as a mantissa between [0, 1e18]\r\n    function _annualRate(\r\n        uint256 _rateMantissa,\r\n        uint256 _timeDelta\r\n    ) internal pure returns (uint256) {\r\n        return (_rateMantissa * _timeDelta) / YEAR;\r\n    }\r\n\r\n    /// @dev Checks if the address is a prime member\r\n    /// @param _member - The address of the member\r\n    function _isPrimeMember(address _member) internal view {\r\n        require(prime().isMember(_member), \"NPM\");\r\n    }\r\n\r\n    /// @dev Calculates the interest for the lender\r\n    /// @param lender - The address of the lender\r\n    /// @param timestamp - The timestamp to which the interest is calculated\r\n    /// @return interest - The interest amount\r\n    /// @return spreadAmount - The spread amount\r\n    /// @return penalty - The penalty amount\r\n    function _dueInterestAtTime(\r\n        address lender,\r\n        uint256 timestamp\r\n    )\r\n        internal\r\n        view\r\n        returns (uint256 interest, uint256 spreadAmount, uint256 penalty)\r\n    {\r\n        /// @dev Link to member's data struct\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If principal is zero, due is zero too\r\n        if (member.principal == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        if (timestamp < maturityDate) {\r\n            /// @dev If timestamp is before maturity date, interest is calculated from the last payment date to the timestamp\r\n            interest =\r\n                (member.totalInterest * (timestamp - member.accrualTs)) /\r\n                (maturityDate - member.accrualTs);\r\n        } else if (timestamp == maturityDate) {\r\n            /// @dev If borrower repays the loan on the maturity date, interest is equal to total interest\r\n            interest = member.totalInterest;\r\n        } else {\r\n            /// @dev If borrower repays the loan after the maturity date, interest is equal to total interest + accrued interest\r\n            interest =\r\n                member.totalInterest +\r\n                (member.principal *\r\n                    _annualRate(rateMantissa, timestamp - maturityDate)) /\r\n                1e18;\r\n        }\r\n\r\n        spreadAmount = (interest * spreadRate) / 1e18;\r\n\r\n        interest -= spreadAmount;\r\n\r\n        penalty = _getPenaltyFee(lender);\r\n    }\r\n}\r\n"
    },
    "contracts/Pool/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPoolFactory} from \"./IPoolFactory.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\nimport {Pool, IPool} from \"./Pool.sol\";\r\n\r\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\n\r\nimport {NZAGuard} from \"../utils/NZAGuard.sol\";\r\n\r\n/// @title Prime PoolFactory contract is responsible for creating new pools\r\ncontract PoolFactory is\r\n    IPoolFactory,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    NZAGuard\r\n{\r\n    /// @notice Prime contract address\r\n    IPrime public prime;\r\n\r\n    /// @notice Beacon address for pool proxy pattern\r\n    address public poolBeacon;\r\n\r\n    /// @notice Array of pool addresses\r\n    address[] public pools;\r\n\r\n    /// @notice Emitted when prime contract address is changed\r\n    event PrimeContractChanged(address oldAddress, address newAddress);\r\n\r\n    /// @notice Emitted when pool beacon address is changed\r\n    event PoolBeaconChanged(address oldAddress, address newAddress);\r\n\r\n    /// @notice Emitted when a new pool is created\r\n    event PoolCreated(\r\n        address pool,\r\n        address indexed borrower,\r\n        bool isBulletLoan,\r\n        address indexed asset,\r\n        uint256 size,\r\n        uint256 rateMantissa,\r\n        uint256 tenor,\r\n        uint256 depositWindow,\r\n        uint256 spreadRate,\r\n        uint256 originationRate,\r\n        uint256 incrementPerRoll\r\n    );\r\n\r\n    /// @notice Modifier to check if the caller is a prime member\r\n    modifier onlyPrime() {\r\n        _isPrimeMember(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc IPoolFactory\r\n    function __PoolFactory_init(\r\n        address _prime,\r\n        address _poolBeacon\r\n    )\r\n        external\r\n        override\r\n        nonZeroAddress(_prime)\r\n        nonZeroAddress(_poolBeacon)\r\n        initializer\r\n    {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        prime = IPrime(_prime);\r\n        poolBeacon = _poolBeacon;\r\n    }\r\n\r\n    struct PrimeRates {\r\n        uint256 spreadRate;\r\n        uint256 originationRate;\r\n        uint256 incrementPerRoll;\r\n    }\r\n\r\n    /// @inheritdoc IPoolFactory\r\n    function createPool(\r\n        IPool.PoolData calldata pooldata,\r\n        bytes calldata members\r\n    )\r\n        external\r\n        override\r\n        onlyPrime\r\n        nonZeroAddress(pooldata.asset)\r\n        nonZeroValue(pooldata.size)\r\n    {\r\n        /// @dev Tenor should be greater than 48 hours and greater than deposit window\r\n        require(pooldata.depositWindow > 1 hours, \"UTR\");\r\n        require(pooldata.tenor > pooldata.depositWindow + 48 hours, \"DET\");\r\n        require(prime.isAssetAvailable(pooldata.asset), \"AAI\");\r\n\r\n        if (!pooldata.isBulletLoan) {\r\n            /// @dev Tenor should be greater than 60 days for non bullet (monthly repayment) loans\r\n            require(\r\n                pooldata.tenor - pooldata.depositWindow > 60 days,\r\n                \"TTS\"\r\n            );\r\n        }\r\n\r\n        /// @dev Fetches spread, origination rate and rolling increment from prime contract\r\n        PrimeRates memory rates = PrimeRates(\r\n            prime.spreadRate(),\r\n            prime.originationRate(),\r\n            prime.incrementPerRoll()\r\n        );\r\n\r\n        /// @dev Creates a pool using beacon proxy pattern\r\n        address pool = address(new BeaconProxy(poolBeacon, \"\"));\r\n\r\n        /// @dev Initializes the pool according to the pool beacon pattern\r\n        IPool(pool).__Pool_init(\r\n            msg.sender,\r\n            rates.spreadRate,\r\n            rates.originationRate,\r\n            rates.incrementPerRoll,\r\n            pooldata,\r\n            members\r\n        );\r\n\r\n        pools.push(pool);\r\n\r\n        emit PoolCreated(\r\n            pool,\r\n            msg.sender,\r\n            pooldata.isBulletLoan,\r\n            pooldata.asset,\r\n            pooldata.size,\r\n            pooldata.rateMantissa,\r\n            pooldata.tenor,\r\n            pooldata.depositWindow,\r\n            rates.spreadRate,\r\n            rates.originationRate,\r\n            rates.incrementPerRoll\r\n        );\r\n    }\r\n\r\n    /// @notice Marks the pools as defaulted\r\n    /// @dev Callable only by owner\r\n    function defaultPools(address[] calldata _pools) external onlyOwner {\r\n        uint256 length = _pools.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            IPool(_pools[i]).markPoolDefaulted();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the pools array\r\n    /// @return Array of pool addresses\r\n    function getPools() external view returns (address[] memory) {\r\n        return pools;\r\n    }\r\n\r\n    /// @notice Changes the prime contract address\r\n    /// @dev Callable only by owner\r\n    /// @param newAddress New prime contract address\r\n    function setPrimeContract(\r\n        address newAddress\r\n    )\r\n        external\r\n        nonZeroAddress(newAddress)\r\n        nonSameAddress(newAddress, address(prime))\r\n        onlyOwner\r\n    {\r\n        address currentAddress = address(prime);\r\n\r\n        prime = IPrime(newAddress);\r\n        emit PrimeContractChanged(currentAddress, newAddress);\r\n    }\r\n\r\n    /// @notice Changes the pool beacon address\r\n    /// @dev Callable only by owner\r\n    /// @param _newPoolBeacon New pool beacon address\r\n    function setPoolBeacon(\r\n        address _newPoolBeacon\r\n    )\r\n        external\r\n        nonZeroAddress(_newPoolBeacon)\r\n        nonSameAddress(_newPoolBeacon, poolBeacon)\r\n        onlyOwner\r\n    {\r\n        address currentAddress = poolBeacon;\r\n        poolBeacon = _newPoolBeacon;\r\n\r\n        emit PoolBeaconChanged(currentAddress, _newPoolBeacon);\r\n    }\r\n\r\n    /// @notice Checks if the caller is a prime member\r\n    /// @dev Internal function, reverts if the caller is not a prime member\r\n    /// @param _member Member address\r\n    function _isPrimeMember(address _member) internal view {\r\n        require(prime.isMember(_member), \"NPM\");\r\n    }\r\n}\r\n"
    },
    "contracts/PrimeMembership/IPrime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Interface of the Prime membership contract\r\n */\r\ninterface IPrime {\r\n    /// @notice Member status enum\r\n    enum MemberStatus {\r\n        PENDING,\r\n        WHITELISTED,\r\n        BLACKLISTED\r\n    }\r\n\r\n    /// @notice A record of member info\r\n    struct Member {\r\n        uint256 riskScore;\r\n        MemberStatus status;\r\n        bool created;\r\n    }\r\n\r\n    /**\r\n     * @notice Check membership status for a given `_member`\r\n     * @param _member The address of member\r\n     * @return Boolean flag containing membership status\r\n     */\r\n    function isMember(address _member) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Calculates the penalty rate for a given interval\r\n     * @param interval The interval in seconds\r\n     * @return The penalty rate as a mantissa between [0, 1e18]\r\n     */\r\n    function penaltyRate(uint256 interval) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Check Stablecoin existence for a given `asset` address\r\n     * @param asset The address of asset\r\n     * @return Boolean flag containing asset availability\r\n     */\r\n    function isAssetAvailable(address asset) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Get membership info for a given `_member`\r\n     * @param _member The address of member\r\n     * @return The member info struct\r\n     */\r\n    function membershipOf(address _member)\r\n        external\r\n        view\r\n        returns (Member memory);\r\n\r\n    /**\r\n     * @notice Returns current protocol rate value\r\n     * @return The protocol rate as a mantissa between [0, 1e18]\r\n     */\r\n    function spreadRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current originated fee value\r\n     * @return originated fee rate as a mantissa between [0, 1e18]\r\n     */\r\n    function originationRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current rolling increment fee\r\n     * @return rolling fee rate as a mantissa between [0, 1e18]\r\n     */\r\n    function incrementPerRoll() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current protocol fee collector address\r\n     * @return address of protocol fee collector\r\n     */\r\n    function treasury() external view returns (address);\r\n}\r\n"
    },
    "contracts/utils/AddressCoder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\npragma abicoder v2;\r\n\r\nlibrary AddressCoder {\r\n    function encodeAddress(\r\n        address[] calldata addresses\r\n    ) internal pure returns (bytes memory data) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            data = abi.encodePacked(data, addresses[i]);\r\n        }\r\n    }\r\n\r\n    function decodeAddress(\r\n        bytes calldata data\r\n    ) internal pure returns (address[] memory addresses) {\r\n        uint256 n = data.length / 20;\r\n        addresses = new address[](n);\r\n\r\n        for (uint256 i = 0; i < n; i++) {\r\n            addresses[i] = bytesToAddress(data[i * 20:(i + 1) * 20]);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(\r\n        bytes calldata data\r\n    ) private pure returns (address addr) {\r\n        bytes memory b = data;\r\n        assembly {\r\n            addr := mload(add(b, 20))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/NZAGuard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\r\nabstract contract NZAGuard {\r\n    modifier nonZeroAddress(address _address) {\r\n        require(_address != address(0), \"NZA\");\r\n        _;\r\n    }\r\n    modifier nonZeroValue(uint256 _value) {\r\n        require(_value != 0, \"ZVL\");\r\n        _;\r\n    }\r\n    modifier nonSameValue(uint256 _value1, uint256 _value2) {\r\n        require(_value1 != _value2, \"SVR\");\r\n        _;\r\n    }\r\n    modifier nonSameAddress(address _address1, address _address2) {\r\n        require(_address1 != _address2, \"SVA\");\r\n        _;\r\n    }\r\n    modifier nonMoreThenOne(uint256 _value) {\r\n        require(_value <= 1e18, \"UTR\");\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}