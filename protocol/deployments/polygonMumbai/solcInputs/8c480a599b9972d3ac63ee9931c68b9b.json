{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract unpausable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol';\n"
    },
    "contracts/mock/CoinKeeperGoerli.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './ICoinKeeper.sol';\n\ninterface IERC20Goerli is IERC20 {\n  function mint(address account, uint256 amount) external;\n\n  function burn(address account, uint256 amount) external;\n}\n\ncontract CoinKeeperGoerli is ICoinKeeper {\n  address[] public allTokens;\n\n  mapping(string => address) public tokenBySymbol;\n  mapping(address => bool) public isTokenMintable;\n  mapping(address => bool) public isTokenExists;\n\n  /// @notice Returns msg.sender's balance of token\n  function myBalanceOf(address token) external view returns (uint256) {\n    return IERC20(token).balanceOf(msg.sender);\n  }\n\n  /// @notice Gives amount of token to msg.sender\n  function claim(address token, uint256 amount) public tokenExists(token) returns (bool) {\n    uint256 balance = IERC20(token).balanceOf(address(this));\n    if (balance > amount) {\n      return IERC20(token).transfer(msg.sender, amount);\n    }\n    if (isTokenMintable[token]) {\n      IERC20Goerli(token).mint(msg.sender, amount);\n      return true;\n    }\n    return false;\n  }\n\n  /// @notice Gives 1000 of each token to msg.sender\n  function claimAll() external returns (bool) {\n    for (uint256 i = 0; i < allTokens.length; i++) {\n      uint256 tokenDecimals = IERC20Metadata(allTokens[i]).decimals();\n      uint256 amount = 1000 * 10 ** tokenDecimals;\n      claim(allTokens[i], amount);\n    }\n    return true;\n  }\n\n  /// @notice Adds token to the list of tokens\n  /// @param token Address of the token\n  /// @param symbol Symbol of the token\n  /// @param isMintable Whether the token is mintable\n  function addTokenToList(\n    address token,\n    string calldata symbol,\n    bool isMintable\n  ) external returns (bool) {\n    require(!isTokenExists[token], 'Token already exists');\n    require(tokenBySymbol[symbol] == address(0), 'Symbol already exists');\n\n    allTokens.push(token);\n\n    isTokenMintable[token] = isMintable;\n    isTokenExists[token] = true;\n    tokenBySymbol[symbol] = token;\n\n    return true;\n  }\n\n  /// @notice Mints token to 'to'\n  function mintTokenTo(\n    address token,\n    address to,\n    uint256 amount\n  ) public tokenExists(token) returns (bool) {\n    require(isTokenMintable[token], 'Token is not mintable');\n    IERC20Goerli(token).mint(to, amount);\n    return true;\n  }\n\n  /// @notice Transfers token from this to msg.sender\n  function transferTokenToMe(\n    address token,\n    uint256 amount\n  ) external tokenExists(token) returns (bool) {\n    return transferTokenTo(token, msg.sender, amount);\n  }\n\n  /// @notice Transfers token from this to 'to'\n  function transferTokenTo(\n    address token,\n    address to,\n    uint256 amount\n  ) public tokenExists(token) returns (bool) {\n    return IERC20(token).transfer(to, amount);\n  }\n\n  /// @notice Transfers token from 'from' to 'to'\n  function transferTokenFromTo(\n    address token,\n    address from,\n    address to,\n    uint256 amount\n  ) external tokenExists(token) returns (bool) {\n    return IERC20(token).transferFrom(from, to, amount);\n  }\n\n  /// @notice Transfers ownership of token to 'newOwner'\n  function transferOwnershipOfToken(\n    address token,\n    address newOwner\n  ) external override tokenExists(token) {\n    Ownable(token).transferOwnership(newOwner);\n  }\n\n  modifier tokenExists(address token) {\n    require(isTokenExists[token], 'Token does not exist');\n    _;\n  }\n}\n"
    },
    "contracts/mock/CoinKeeperMumbai.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport './ICoinKeeper.sol';\n\ninterface IERC20MintableBurnable is IERC20 {\n  function faucet(uint256 amount) external;\n\n  function faucetTo(address receiver, uint256 amount) external;\n}\n\ncontract CoinKeeperMumbai is ICoinKeeper {\n  address[] public allTokens;\n\n  mapping(string => address) public tokenBySymbol;\n  mapping(address => bool) public isTokenMintable;\n  mapping(address => bool) public isTokenExists;\n\n  /// @notice Returns msg.sender's balance of token\n  function myBalanceOf(address token) external view returns (uint256) {\n    return IERC20(token).balanceOf(msg.sender);\n  }\n\n  /// @notice Gives amount of token to msg.sender\n  function claim(address token, uint256 amount) public tokenExists(token) returns (bool) {\n    uint256 balance = IERC20(token).balanceOf(address(this));\n    if (balance > amount) {\n      return IERC20(token).transfer(msg.sender, amount);\n    }\n    if (isTokenMintable[token]) {\n      IERC20MintableBurnable(token).faucetTo(msg.sender, amount);\n      return true;\n    }\n    return false;\n  }\n\n  /// @notice Gives 1000 of each token to msg.sender\n  function claimAll() external returns (bool) {\n    for (uint256 i = 0; i < allTokens.length; i++) {\n      uint256 tokenDecimals = IERC20Metadata(allTokens[i]).decimals();\n      uint256 amount = 1000 * 10 ** tokenDecimals;\n      claim(allTokens[i], amount);\n    }\n    return true;\n  }\n\n  /// @notice Adds token to the list of tokens\n  /// @param token Address of the token\n  /// @param symbol Symbol of the token\n  /// @param isMintable Whether the token is mintable\n  function addTokenToList(\n    address token,\n    string calldata symbol,\n    bool isMintable\n  ) external returns (bool) {\n    require(!isTokenExists[token], 'Token already exists');\n    require(tokenBySymbol[symbol] == address(0), 'Symbol already exists');\n\n    allTokens.push(token);\n\n    isTokenMintable[token] = isMintable;\n    isTokenExists[token] = true;\n    tokenBySymbol[symbol] = token;\n\n    return true;\n  }\n\n  /// @notice Mints token to msg.sender\n  function mintTokenToMe(address token, uint256 amount) external returns (bool) {\n    return mintTokenTo(token, msg.sender, amount);\n  }\n\n  /// @notice Mints token to 'to'\n  function mintTokenTo(\n    address token,\n    address to,\n    uint256 amount\n  ) public tokenExists(token) returns (bool) {\n    require(isTokenMintable[token], 'Token is not mintable');\n    IERC20MintableBurnable(token).faucetTo(to, amount);\n    return true;\n  }\n\n  /// @notice Transfers token from this to msg.sender\n  function transferTokenToMe(\n    address token,\n    uint256 amount\n  ) external tokenExists(token) returns (bool) {\n    return transferTokenTo(token, msg.sender, amount);\n  }\n\n  /// @notice Transfers token from this to 'to'\n  function transferTokenTo(\n    address token,\n    address to,\n    uint256 amount\n  ) public tokenExists(token) returns (bool) {\n    return IERC20(token).transfer(to, amount);\n  }\n\n  /// @notice Transfers token from 'from' to 'to'\n  function transferTokenFromTo(\n    address token,\n    address from,\n    address to,\n    uint256 amount\n  ) external tokenExists(token) returns (bool) {\n    return IERC20(token).transferFrom(from, to, amount);\n  }\n\n  /// @notice Transfers ownership of token to 'newOwner'\n  function transferOwnershipOfToken(address token, address newOwner) external tokenExists(token) {\n    Ownable(token).transferOwnership(newOwner);\n  }\n\n  modifier tokenExists(address token) {\n    require(isTokenExists[token], 'Token does not exist');\n    _;\n  }\n}\n"
    },
    "contracts/mock/FaucetToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol';\n\ncontract FaucetToken is ERC20PresetMinterPauser, ERC20Permit {\n  uint8 private _decimals;\n\n  constructor(\n    string memory name,\n    string memory symbol,\n    uint8 decimals_\n  ) ERC20PresetMinterPauser(name, symbol) ERC20Permit(name) {\n    _decimals = decimals_;\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n\n  function faucet(uint256 amount) external {\n    _mint(msg.sender, amount);\n  }\n\n  function faucetTo(address receiver, uint256 amount) external {\n    _mint(receiver, amount);\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual override(ERC20, ERC20PresetMinterPauser) {\n    super._beforeTokenTransfer(from, to, amount);\n  }\n}\n"
    },
    "contracts/mock/ICoinKeeper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ninterface ICoinKeeper {\n  function tokenBySymbol(string calldata symbol) external view returns (address);\n\n  function isTokenMintable(address token) external view returns (bool);\n\n  function isTokenExists(address token) external view returns (bool);\n\n  /// @notice Returns msg.sender's balance of token\n  function myBalanceOf(address token) external view returns (uint256);\n\n  /// @notice Gives amount of token to msg.sender\n  function claim(address token, uint256 amount) external returns (bool);\n\n  /// @notice Gives 1000 of each token to msg.sender\n  function claimAll() external returns (bool);\n\n  /// @notice Adds token to the list of tokens\n  /// @param token Address of the token\n  /// @param symbol Symbol of the token\n  /// @param isMintable Whether the token is mintable\n  function addTokenToList(\n    address token,\n    string calldata symbol,\n    bool isMintable\n  ) external returns (bool);\n\n  /// @notice Mints token to 'to'\n  function mintTokenTo(address token, address to, uint256 amount) external returns (bool);\n\n  /// @notice Transfers token amount from this to msg.sender\n  function transferTokenToMe(address token, uint256 amount) external returns (bool);\n\n  /// @notice Transfers token from this to 'to'\n  function transferTokenTo(address token, address to, uint256 amount) external returns (bool);\n\n  /// @notice Transfers token from 'from' to 'to'\n  function transferTokenFromTo(\n    address token,\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n\n  /// @notice Transfers ownership of token to 'newOwner'\n  function transferOwnershipOfToken(address token, address newOwner) external;\n}\n"
    },
    "contracts/mock/PoolHarness.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport { Pool } from '../Pool/Pool.sol';\n\ncontract PoolHarness is Pool {\n    uint256 public constant ONE_HOUR = 1 hours;\n\n  function canBeDefaulted() public view override returns (bool isAbleToDefault) {\n    /// @dev Pool can be marked as defaulted only if it is not defaulted already and has lenders\n    if (defaultedAt != 0 || _activeLendersCount == 0) {\n      return false;\n    }\n\n    if (isBulletLoan) {\n      /// @dev Pool can be marked as defaulted by lender only after (1 hours + maturity date) in case of bullet loan\n      return block.timestamp > maturityDate + ONE_HOUR;\n    }\n    return super.canBeDefaulted();\n  }\n}"
    },
    "contracts/mock/StableCoin.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\ncontract StableCoin is ERC20, Ownable {\n  uint8 private _decimals;\n\n  constructor(string memory name, string memory symbol, uint8 decimals_) ERC20(name, symbol) {\n    _decimals = decimals_;\n  }\n\n  function mint(address account, uint256 amount) external {\n    _mint(account, amount);\n  }\n\n  function decimals() public view override returns (uint8) {\n    return _decimals;\n  }\n}\n"
    },
    "contracts/mock/TxProxy.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.17;\n\ncontract TxProxy {\n  function callOut(\n    address[] calldata addresses,\n    bytes[] calldata data,\n    uint256[] calldata values\n  ) external payable returns (bytes[] memory results) {\n    results = new bytes[](addresses.length);\n\n    for (uint256 i = 0; i < addresses.length; i++) {\n      (bool success, bytes memory result) = addresses[i].call{value: values[i]}(data[i]);\n      require(success, 'TxProxy: Transaction failed');\n      results[i] = result;\n    }\n    return results;\n  }\n}\n"
    },
    "contracts/Pool/IPool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/// @title Prime IPool contract interface\ninterface IPool {\n  /// @notice Pool member data struct\n  struct Member {\n    bool isCreated; // True if the member is created\n    bool isWhitelisted; // True if the member is whitelisted\n    uint256 principal; // Principal amount\n    uint256 accrualTs; // Timestamp of the last accrual\n    uint256 totalOriginationFee;\n    uint256 totalInterest;\n  }\n\n  /// @notice Roll data struct\n  struct Roll {\n    uint256 startDate; // Start date of the roll\n    uint256 endDate; // End date of the roll\n  }\n\n  /// @notice Callback data struct\n  struct CallBack {\n    bool isCreated; // True if the callback is created\n    uint256 timestamp; // Timestamp of the callback\n  }\n\n  /// @notice Struct to store lender deposits as separate position\n  struct Position {\n    uint256 interest; // total interest for entire deposit period\n    uint256 startAt; // Timestamp of the deposit\n  }\n\n  /// @notice Struct to avoid stack too deep error\n  struct PoolData {\n    bool isBulletLoan; // True if the pool is bullet loan, False if the pool is term loan\n    address asset;\n    uint256 size;\n    uint256 tenor;\n    uint256 rateMantissa;\n    uint256 depositWindow;\n  }\n\n  /// @notice Initialize the pool\n  /// @dev This function is called only once during the pool creation\n  /// @param _borrower - Pool borrower address\n  /// @param _spreadRate - Pool protocol spread rate\n  /// @param _originationRate - Pool origination fee rate\n  /// @param _incrementPerRoll - Pool rolling increment rate of origination fee\n  /// @param _penaltyRatePerYear - Pool penalty rate calculated for 1 year\n  /// @param _poolData - Pool data struct: asset, size, tenor, rateMantissa, depositWindow\n  /// @param _members - Pool members (lenders) addresses encoded in bytes\n  function __Pool_init(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) external;\n\n  /// @notice Whitelists lenders\n  /// @dev Can be called only by the borrower\n  /// @param lenders - Lenders addresses encoded in bytes\n  function whitelistLenders(bytes calldata lenders) external returns (bool);\n\n  /// @notice Blacklists lenders\n  /// @dev Can be called only by the borrower\n  /// @param lenders - Lenders addresses encoded in bytes\n  function blacklistLenders(bytes calldata lenders) external returns (bool);\n\n  /// @notice Converts the pool to public\n  /// @dev Can be called only by the borrower\n  /// @return success - True if the pool is converted to public\n  function switchToPublic() external returns (bool success);\n\n  /// @notice Lends funds to the pool\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @param amount - Amount of funds to lend\n  /// @return success - True if the funds are lent\n  function lend(uint256 amount) external returns (bool success);\n\n  /// @notice Fully repays the lender with the principal and interest\n  /// @dev Can be called only by the borrower\n  /// @param lender - Lender address\n  /// @return success - True if the lender is repaid\n  function repay(address lender) external returns (bool success);\n\n  /// @notice Repays all lenders with the principal and interest\n  /// @dev Can be called only by the borrower\n  /// @return success - True if all lenders are repaid\n  function repayAll() external returns (bool success);\n\n  /// @notice Repays interest to the lender\n  /// @dev Can be called only by the borrower in monthly loans\n  function repayInterest() external;\n\n  /// @notice Creates the callback\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @return success - True if the callback is created by the lender\n  function requestCallBack() external returns (bool success);\n\n  /// @notice Cancels the callback\n  /// @dev Can be called only by the whitelisted Prime lenders\n  /// @return success - True if the callback is cancelled by the lender\n  function cancelCallBack() external returns (bool success);\n\n  /// @notice Requests the roll\n  /// @dev Can be called only by the borrower\n  function requestRoll() external;\n\n  /// @notice Accepts the roll\n  /// @dev Can be called only by the whitelisted Prime lenders\n  function acceptRoll() external;\n\n  /// @notice Defaults the pool\n  /// @dev Can be called only by lender or borrower if time conditions are met\n  /// @dev Can be called by governor without time conditions\n  function markPoolDefaulted() external;\n\n  /// @notice Closes the pool\n  /// @dev Can be called only by the borrower\n  /// @return success - True if the pool is closed\n  function close() external returns (bool success);\n\n  /// @notice Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\n  /// @return totalDue - Total due amount for repayment\n  function totalDue() external view returns (uint256 totalDue);\n\n  /// @notice Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\n  /// @param lender - The address of the lender\n  /// @return due - Due amount for repayment\n  /// @return spreadFee - Protocol spread fee\n  /// @return originationFee - Origination protocol fee\n  function dueOf(\n    address lender\n  ) external view returns (uint256 due, uint256 spreadFee, uint256 originationFee);\n\n  /// @notice Calculates the total interest and penalty amount for the next payment for all lenders\n  /// @return totalInterest The interest amount\n  function totalDueInterest() external returns (uint256 totalInterest);\n\n  /// @notice Calculates the total interest and penalty for the next payment to the lender\n  /// @param lender The lender address\n  /// @return due The interest amount\n  /// @return spreadFee The spread amount\n  function dueInterestOf(address lender) external view returns (uint256 due, uint256 spreadFee);\n\n  /// @notice Calculates the accrued amount until today, excluding penalty\n  /// @param lender - The address of the lender\n  /// @return interestAccrued - Accrued amount until today\n  function balanceOf(address lender) external view returns (uint256);\n\n  /// @notice When maturity date passed, calculates the penalty fee for the lender\n  /// @param lender - The address of the lender\n  /// @return penaltyFee - Penalty fee\n  function penaltyOf(address lender) external view returns (uint256);\n\n  /// @notice Calculates the next payment timestamp for the borrower\n  /// @return payableToTimestamp - The timestamp of the next payment\n  function getNextPaymentTimestamp() external view returns (uint256);\n\n  /// @notice Checks if the pool can be defaulted by borrower or lender\n  /// @return isAbleToDefault True if the pool can be defaulted\n  function canBeDefaulted() external view returns (bool isAbleToDefault);\n}\n"
    },
    "contracts/Pool/IPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPool} from './IPool.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\n\n/// @title Prime IPoolFactory interface\ninterface IPoolFactory {\n  /// @notice Initialize the contract\n  /// @dev This function is called only once during the contract deployment\n  /// @param _prime Prime contract address\n  /// @param _poolBeacon Beacon address for pool proxy pattern\n  function __PoolFactory_init(address _prime, address _poolBeacon) external;\n\n  /// @notice Creates a new pool\n  /// @dev Callable only by prime members\n  /// @param pooldata Bla bla bla\n  /// @param members Pool members address encoded in bytes\n  function createPool(IPool.PoolData calldata pooldata, bytes calldata members) external;\n\n  function prime() external view returns (IPrime);\n}\n"
    },
    "contracts/Pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPool} from './IPool.sol';\nimport {IPoolFactory} from './IPoolFactory.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\n\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\n\nimport {NZAGuard} from '../utils/NZAGuard.sol';\nimport {AddressCoder} from '../utils/AddressCoder.sol';\n\n/// @title Pool contract is responsible for managing the pool\ncontract Pool is IPool, Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable, NZAGuard {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  /// @notice Standart year in seconds\n  uint256 public constant YEAR = 360 days;\n\n  /// @notice Pool repayment option. Bullet loan or monthly repayment\n  bool public isBulletLoan;\n\n  /// @notice Pool publicity status\n  bool public isPublic;\n\n  /// @notice Pool availability status\n  bool public isClosed;\n\n  /// @notice Roll request status\n  bool public isRollRequested;\n\n  /// @notice Pool borrower address\n  address public borrower;\n\n  /// @notice Asset address of the pool\n  address public asset;\n\n  /// @notice Pool factory address\n  IPoolFactory public factory;\n\n  /// @notice Pool current size\n  uint256 public currentSize;\n\n  /// @notice Pool maximum size\n  uint256 public maxSize;\n\n  /// @notice Pool interest rate (in mantissa)\n  uint256 public rateMantissa;\n\n  /// @notice Protocol spread rate\n  uint256 public spreadRate;\n\n  /// @notice Origination fee rate\n  uint256 public originationRate;\n\n  /// @notice Pool rolling increment fee rate\n  uint256 public incrementPerRoll;\n\n  /// @notice Pool deposit window (in seconds)\n  uint256 public depositWindow;\n\n  /// @notice Pool deposit maturity\n  uint256 public depositMaturity;\n\n  /// @notice Pool tenor\n  uint256 public tenor;\n\n  /// @notice Pool maturity date\n  uint256 public maturityDate;\n\n  /// @notice Pool active roll id\n  uint256 public activeRollId;\n\n  /// @notice The last timestamp at which a payment was made or received in monthly repayment pool.\n  uint256 public lastPaidTimestamp;\n\n  /// @notice If pool is defaulted, this is the timestamp of the default\n  uint256 public defaultedAt;\n\n  /// @notice Pool lenders array\n  address[] private _lenders;\n\n  /// @notice Pool next roll id counter\n  uint256 private _nextRollId;\n\n  /// @notice Pool active lenders count\n  uint256 internal _activeLendersCount;\n\n  /// @notice Pool active callbacks count\n  uint256 private _activeCallbacksCount;\n\n  /// @notice Pool members mapping (lender address => Member struct)\n  mapping(address => Member) private poolMembers;\n\n  /// @notice Pool rolls mapping (roll id => Roll struct)\n  mapping(uint256 => Roll) private _poolRolls;\n\n  /// @notice Pool lender's positions (lender address => Positions array)\n  mapping(address => Position[]) private _lenderPositions;\n\n  /// @notice Pool callbacks mapping (lender address => CallBack struct)\n  mapping(address => CallBack) private _poolCallbacks;\n\n  /// @notice Pool penalty rate calculated for 1 year\n  uint256 public penaltyRatePerYear;\n\n  /// @notice Emitted when the pool is activated\n  /// @param depositMaturity - Lender can deposit until this timestamp\n  /// @param maturityDate - Borrower's maturity date (timestamp)\n  event Activated(uint256 depositMaturity, uint256 maturityDate);\n\n  /// @notice Emitted when pool is converted to public\n  event ConvertedToPublic();\n\n  /// @notice Emitted when pool is defaulted\n  event Defaulted();\n\n  /// @notice Emitted when the pool is closed\n  event Closed();\n\n  /// @notice Emitted when the roll is requested\n  /// @param rollId - Id of the roll\n  event RollRequested(uint256 indexed rollId);\n\n  /// @notice Emitted when the pool is rolled\n  /// @param rollId - Id of the new roll\n  /// @param newMaturity - New maturity date (timestamp)\n  event RollAccepted(uint256 indexed rollId, uint256 newMaturity);\n\n  /// @notice Emitted when the roll is rejected\n  /// @param rollId - Id of the roll\n  /// @param user - Address of the user who rejected the roll\n  event RollRejected(uint256 indexed rollId, address user);\n\n  /// @notice Emitted when new lender is added to the pool\n  event LenderWhitelisted(address lender);\n\n  /// @notice Emitted when lender is removed from the pool\n  event LenderBlacklisted(address lender);\n\n  /// @notice Emitted when funds are lent to the pool\n  event Lent(address indexed lender, uint256 amount);\n\n  /// @notice Emitted when lender is fully repayed\n  event Repayed(address indexed lender, uint256 repayed, uint256 spreadFee, uint256 originationFee);\n\n  /// @notice Emitted when interest is repayed to the lender\n  event RepayedInterest(address indexed lender, uint256 repayed, uint256 spreadFee);\n\n  /// @notice Emitted when callback is created\n  event CallbackCreated(address indexed lender);\n\n  /// @notice Emitted when callback is cancelled\n  event CallbackCancelled(address indexed lender);\n\n  /// @notice Modifier to check if the caller is a prime member\n  modifier onlyPrime() {\n    _isPrimeMember(msg.sender);\n    _;\n  }\n\n  /// @notice Modifier to check if the caller is a pool borrower\n  modifier onlyBorrower() {\n    require(msg.sender == borrower, 'NCR');\n    _;\n  }\n\n  /// @notice Modifier to check if the pool is not closed\n  modifier nonClosed() {\n    require(!isClosed, 'OAC');\n    _;\n  }\n\n  /// @notice Modifier to check if the pool is not defaulted\n  modifier nonDefaulted() {\n    require(defaultedAt == 0, 'PDD');\n    _;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @inheritdoc IPool\n  function __Pool_init(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) external initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    __Pool_init_unchained(\n      _borrower,\n      _spreadRate,\n      _originationRate,\n      _incrementPerRoll,\n      _penaltyRatePerYear,\n      _poolData,\n      _members\n    );\n  }\n\n  /// @dev The __Pool_init_unchained sets initial parameters for the pool\n  /// @param _borrower The address of the borrower that created the pool\n  /// @param _spreadRate The rate at which protocol will earn spread\n  /// @param _originationRate The rate of yield enhancement intended to incentivize collateral providers\n  /// @param _penaltyRatePerYear The rate at which borrower will pay additional interest for 1 year\n  /// @param _incrementPerRoll - Pool rolling increment fee rate\n  /// @param _poolData Data regarding the pool\n  /// @param _members The list of members who rose the funds for the borrower\n  function __Pool_init_unchained(\n    address _borrower,\n    uint256 _spreadRate,\n    uint256 _originationRate,\n    uint256 _incrementPerRoll,\n    uint256 _penaltyRatePerYear,\n    PoolData calldata _poolData,\n    bytes calldata _members\n  ) internal onlyInitializing {\n    /// @dev Fill pool data\n    borrower = _borrower;\n    asset = _poolData.asset;\n    maxSize = _poolData.size;\n    tenor = _poolData.tenor;\n    rateMantissa = _poolData.rateMantissa;\n    depositWindow = _poolData.depositWindow;\n    isBulletLoan = _poolData.isBulletLoan;\n    spreadRate = _spreadRate;\n    originationRate = _originationRate;\n    incrementPerRoll = _incrementPerRoll;\n    penaltyRatePerYear = _penaltyRatePerYear;\n\n    /// @dev Starting new rolls from 1\n    ++_nextRollId;\n\n    /// @dev Factory is caller of initializer\n    factory = IPoolFactory(msg.sender);\n\n    /// @dev Pool is available for all prime users if it is public\n    if (_members.length == 0) {\n      isPublic = true;\n    } else {\n      _parseLenders(true, _members);\n    }\n  }\n\n  /// @inheritdoc IPool\n  function whitelistLenders(\n    bytes calldata lenders\n  ) external override onlyBorrower nonReentrant returns (bool success) {\n    require(lenders.length != 0, 'LLZ');\n\n    /// @dev Pool converts to private if it is public\n    if (isPublic) {\n      isPublic = false;\n    }\n    _parseLenders(true, lenders);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function blacklistLenders(\n    bytes calldata lenders\n  ) external override onlyBorrower nonReentrant returns (bool success) {\n    require(!isPublic, 'OPP');\n    require(lenders.length != 0, 'LLZ');\n\n    _parseLenders(false, lenders);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function switchToPublic() external override onlyBorrower nonReentrant returns (bool success) {\n    require(!isPublic, 'AAD');\n\n    isPublic = true;\n\n    emit ConvertedToPublic();\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function lend(\n    uint256 amount\n  )\n    external\n    override\n    nonReentrant\n    onlyPrime\n    nonZeroValue(amount)\n    nonClosed\n    nonDefaulted\n    returns (bool success)\n  {\n    return _lend(amount, msg.sender);\n  }\n\n  /// @inheritdoc IPool\n  function repay(\n    address lender\n  )\n    external\n    override\n    onlyBorrower\n    nonZeroAddress(lender)\n    nonDefaulted\n    nonReentrant\n    returns (bool success)\n  {\n    return _repayTo(lender);\n  }\n\n  /// @inheritdoc IPool\n  function repayAll()\n    external\n    override\n    onlyBorrower\n    nonDefaulted\n    nonReentrant\n    returns (bool success)\n  {\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      _repayTo(_lenders[i]);\n    }\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function repayInterest() external override onlyBorrower nonDefaulted nonReentrant {\n    require(!isBulletLoan, 'NML');\n    _repayInterest();\n  }\n\n  /// @inheritdoc IPool\n  function requestCallBack()\n    external\n    override\n    onlyPrime\n    nonDefaulted\n    nonClosed\n    returns (bool success)\n  {\n    /// @dev Lender should have principal\n    require(poolMembers[msg.sender].principal != 0, 'LZL');\n\n    /// @dev Lender should not have created callback\n    require(!_poolCallbacks[msg.sender].isCreated, 'AAD');\n\n    /// @dev Callback can be created only before the maturity date\n    require(block.timestamp < maturityDate, 'EMD');\n\n    /// @dev If last lender requests callback and roll is requested\n    /// @dev then roll is rejected\n    if (isRollRequested) {\n      _rejectRoll();\n    }\n\n    /// @dev Increases the number of active callbacks\n    _activeCallbacksCount++;\n\n    /// @dev Saves callback as a struct\n    _poolCallbacks[msg.sender] = CallBack(true, block.timestamp);\n\n    emit CallbackCreated(msg.sender);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function cancelCallBack()\n    external\n    override\n    nonDefaulted\n    nonClosed\n    onlyPrime\n    returns (bool success)\n  {\n    /// @dev Lender should have created callback\n    require(_poolCallbacks[msg.sender].isCreated, 'AAD');\n\n    /// @dev Removes callback\n    delete _poolCallbacks[msg.sender];\n\n    emit CallbackCancelled(msg.sender);\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function requestRoll() external override onlyBorrower nonDefaulted nonClosed {\n    /// @dev Roll should not be requested\n    require(!isRollRequested, 'RAR');\n\n    /// @dev Roll can be requested only if there is one active lender and no active callbacks\n    require(_activeLendersCount == 1, 'RCR');\n\n    /// @dev New roll can be activated only after deposit window until 48 hours before the maturity date\n    require(\n      block.timestamp > depositMaturity &&\n        block.timestamp > _poolRolls[activeRollId].startDate &&\n        block.timestamp < maturityDate - 2 days,\n      'RTR'\n    );\n\n    isRollRequested = true;\n\n    emit RollRequested(_nextRollId);\n  }\n\n  /// @inheritdoc IPool\n  function acceptRoll() external override onlyPrime nonClosed nonDefaulted {\n    /// @notice check if the roll was requested\n    require(isRollRequested, 'ARM');\n\n    /// @dev Lender can accept roll only before it starts\n    require(block.timestamp < maturityDate, 'RTR');\n\n    Member storage member = poolMembers[msg.sender];\n\n    /// @dev Should be an authorized lender\n    require(member.principal != 0, 'IMB');\n\n    isRollRequested = false; // renew request status\n\n    /// @dev Get the current roll id\n    uint256 currentRollId = _nextRollId;\n\n    /// @dev Increment the rolls counter\n    ++_nextRollId;\n\n    /// @dev Update the roll id tracker\n    activeRollId = currentRollId;\n\n    /// @dev Save the new roll as Roll struct\n    _poolRolls[currentRollId] = Roll(maturityDate, maturityDate + tenor);\n\n    /// @dev Prolongate the maturity date\n    maturityDate += tenor;\n\n    member.totalInterest += (member.principal * _annualRate(rateMantissa, tenor)) / 1e18;\n\n    emit RollAccepted(currentRollId, maturityDate);\n  }\n\n  /// @inheritdoc IPool\n  function markPoolDefaulted() external nonClosed nonDefaulted {\n    /// @dev Governor is able to mark pool as defaulted through the Factory\n    if (msg.sender != address(factory)) {\n      /// @dev Lender or the borrower with loan can mark pool as defaulted\n      _isPrimeMember(msg.sender);\n\n      if (msg.sender != borrower) {\n        /// @dev Lender should have principal\n        require(poolMembers[msg.sender].principal != 0, 'IMB');\n      }\n\n      require(canBeDefaulted(), 'EDR');\n    }\n\n    /// @dev Set the pool default timestamp\n    defaultedAt = block.timestamp;\n\n    emit Defaulted();\n  }\n\n  /// @inheritdoc IPool\n  function close() external override onlyBorrower nonClosed returns (bool success) {\n    /// @dev The pool can be closed only if it's size is 0\n    require(currentSize == 0, 'OHD');\n    _close();\n    return true;\n  }\n\n  /// @inheritdoc IPool\n  function totalDue() external view override returns (uint256 totalDueAmount) {\n    /// @dev Gas optimization\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      (uint256 due, uint256 spreadFee, uint256 originationFee) = dueOf(_lenders[i]);\n      totalDueAmount += due + spreadFee + originationFee;\n    }\n  }\n\n  /// @inheritdoc IPool\n  function dueOf(\n    address lender\n  ) public view override returns (uint256 due, uint256 spreadFee, uint256 originationFee) {\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, interest is zero too\n    if (member.principal == 0) {\n      return (0, 0, 0);\n    }\n    (due, spreadFee, originationFee) = _dueInterestOf(\n      lender,\n      member.totalInterest,\n      member.accrualTs\n    );\n    due += member.principal;\n  }\n\n  /// @inheritdoc IPool\n  function totalDueInterest() external view override returns (uint256 totalInterest) {\n    /// @dev Gas optimization\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      /// @dev Lenders address from the array\n      address lender = _lenders[i];\n      (uint256 interest, uint256 spreadAmount) = dueInterestOf(lender);\n      totalInterest += interest + spreadAmount;\n    }\n  }\n\n  /// @inheritdoc IPool\n  function dueInterestOf(\n    address lender\n  ) public view override returns (uint256 due, uint256 spreadFee) {\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, interest is zero too\n    if (member.principal == 0) {\n      return (0, 0);\n    }\n\n    if (isBulletLoan) {\n      (due, spreadFee, ) = _dueInterestOf(lender, member.totalInterest, member.accrualTs);\n    } else {\n      uint256 timestamp = getNextPaymentTimestamp();\n      uint256 endDate = block.timestamp > timestamp ? block.timestamp : timestamp;\n      (due, spreadFee) = _dueInterestFor(member.totalInterest, member.accrualTs, endDate);\n      due += _penaltyOf(lender);\n    }\n  }\n\n  /// @inheritdoc IPool\n  function balanceOf(address lender) external view override returns (uint256 balance) {\n    Member storage member = poolMembers[lender];\n\n    /// @dev If principal is zero, balance is zero too\n    if (member.principal == 0) {\n      return 0;\n    }\n\n    balance = member.principal;\n    uint256 positionsLength = _lenderPositions[lender].length;\n    for (uint256 i = 0; i < positionsLength; ++i) {\n      Position memory position = _lenderPositions[lender][i];\n      balance +=\n        (position.interest * (block.timestamp - position.startAt)) /\n        (maturityDate - position.startAt);\n    }\n  }\n\n  /// @inheritdoc IPool\n  function penaltyOf(address lender) public view override returns (uint256 penalty) {\n    /// @dev In common case, penalty starts from maturity date in case of bullet loan\n    /// @dev or from the last paid timestamp in case of monthly loan\n    return _penaltyOf(lender);\n  }\n\n  /// @inheritdoc IPool\n  function getNextPaymentTimestamp() public view returns (uint256 payableToTimestamp) {\n    /// @dev Initial timestamp is the last paid timestamp\n    payableToTimestamp = lastPaidTimestamp;\n\n    /// @dev If pool is active and last month is paid, next month is payable\n    if (payableToTimestamp != 0 && payableToTimestamp < block.timestamp + 30 days) {\n      payableToTimestamp += 30 days;\n\n      if (payableToTimestamp > maturityDate) {\n        payableToTimestamp = maturityDate;\n      }\n    }\n    return payableToTimestamp;\n  }\n\n  /// @inheritdoc IPool\n  function canBeDefaulted() public view virtual override returns (bool isAbleToDefault) {\n    /// @dev Pool can be marked as defaulted only if it is not defaulted already and has lenders\n    if (defaultedAt != 0 || _activeLendersCount == 0) {\n      return false;\n    }\n\n    if (isBulletLoan) {\n      /// @dev Pool can be marked as defaulted by lender only after (72 hours + maturity date) in case of bullet loan\n      return block.timestamp > maturityDate + 3 days;\n    } else {\n      /// @dev Otherwise, pool can be marked as defaulted by lender only after 33 days since last payment\n      return block.timestamp > lastPaidTimestamp + 33 days;\n    }\n  }\n\n  /**\n   * @notice Calculates the penalty rate for a given interval\n   * @param interval The interval in seconds\n   * @return The penalty rate as a mantissa between [0, 1e18]\n   */\n  function penaltyRate(uint256 interval) public view returns (uint256) {\n    return (penaltyRatePerYear * interval) / YEAR;\n  }\n\n  /// @notice Returns Prime address\n  /// @dev Prime converted as IPrime interface\n  /// @return primeInstance - Prime address\n  function prime() public view returns (IPrime primeInstance) {\n    /// @dev Factory should keep actual link to Prime\n    return factory.prime();\n  }\n\n  /// @notice Parses the members encoded in bytes and calls _parseLender() for each member\n  /// @dev Internal function\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  /// @param members - The encoded members bytes\n  function _parseLenders(bool isWhitelistOperation, bytes calldata members) internal {\n    if (members.length == 20) {\n      _parseLender(isWhitelistOperation, AddressCoder.decodeAddress(members)[0]);\n    } else {\n      address[] memory addresses = AddressCoder.decodeAddress(members);\n      uint256 length = addresses.length;\n\n      require(length <= 60, 'EAL');\n\n      for (uint256 i = 0; i < length; i++) {\n        _parseLender(isWhitelistOperation, addresses[i]);\n      }\n    }\n  }\n\n  /// @notice Creates lender if not exists and updates the whitelist status\n  /// @dev Internal function\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  /// @param member - The address of the lender\n  function _parseLender(bool isWhitelistOperation, address member) internal {\n    _isPrimeMember(member);\n\n    /// @dev Gas saving link to lender's member struct\n    Member storage memberStruct = poolMembers[member];\n\n    /// @dev Whitelist Lender\n    if (isWhitelistOperation) {\n      /// @dev Creates member if not exists\n      if (!memberStruct.isCreated) {\n        _initLender(member, true);\n      } else {\n        /// @dev Whitelists member if it is not whitelisted\n        memberStruct.isWhitelisted = true;\n      }\n\n      emit LenderWhitelisted(member);\n    } else {\n      /// @dev If we blacklist a lender, it should exist\n      require(memberStruct.isCreated, 'IMB');\n\n      memberStruct.isWhitelisted = false;\n\n      emit LenderBlacklisted(member);\n    }\n  }\n\n  /// @dev Creates lender if not exists and updates the whitelist status\n  /// @param member - The address of the lender\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\n  function _initLender(address member, bool isWhitelistOperation) internal {\n    /// @dev Creates lender if not exists\n    if (!poolMembers[member].isCreated) {\n      /// @dev Borrower cannot be a lender\n      require(borrower != member, 'BLS');\n      /// @dev Init struct for lender's data\n      poolMembers[member] = Member(true, isWhitelistOperation, 0, 0, 0, 0);\n      _lenders.push(member);\n    }\n  }\n\n  /// @notice Lends funds to the pool\n  /// @dev Internal function\n  /// @param amount - Amount of funds to lend\n  /// @param lender - Lender address\n  /// @return success - True if the funds are lent\n  function _lend(uint256 amount, address lender) internal returns (bool success) {\n    /// @dev New size of the pool shouldn't be greater than max allowed size\n    require(currentSize + amount <= maxSize, 'OSE');\n\n    /// @dev Gas saving link to lender's member struct\n    Member storage member = poolMembers[lender];\n\n    /// @dev If roll is public, we should create it's data structure\n    if (isPublic) {\n      _initLender(lender, true);\n    } else {\n      /// @dev If roll is private, lender should be whitelisted\n      require(member.isWhitelisted, 'IMB');\n    }\n\n    /// @dev If depositMaturity is zero, it means that the pool is not activated yet\n    if (depositMaturity == 0) {\n      /// @dev Set depositMaturity and maturityDate\n      depositMaturity = block.timestamp + depositWindow;\n      maturityDate = block.timestamp + tenor;\n\n      if (!isBulletLoan) {\n        lastPaidTimestamp = block.timestamp;\n      }\n      emit Activated(depositMaturity, maturityDate);\n    } else {\n      require(block.timestamp <= depositMaturity, 'DWC');\n    }\n    /// @dev Increase pool size, lender's deposit and active lenders count\n    currentSize += amount;\n\n    if (member.principal == 0) {\n      ++_activeLendersCount;\n      member.accrualTs = block.timestamp;\n    }\n    uint256 timeInTenor = maturityDate - block.timestamp;\n\n    _lenderPositions[lender].push(\n      Position({\n        interest: (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18,\n        startAt: block.timestamp\n      })\n    );\n\n    member.totalInterest += (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18;\n    member.totalOriginationFee += (amount * _annualRate(originationRate, timeInTenor)) / 1e18;\n    /// @dev Update lender's member struct\n    member.principal += amount;\n\n    emit Lent(lender, amount);\n\n    _safeTransferFrom(asset, lender, borrower, amount);\n    return true;\n  }\n\n  /// @notice Repays all the funds to the lender and Pool.\n  /// @dev Internal function\n  /// @param lender - Lender address\n  /// @return success - True if the lender is repaid\n  function _repayTo(address lender) internal returns (bool success) {\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    /// @dev Short circuit for non lenders\n    if (member.principal == 0) {\n      return true;\n    }\n\n    /// @dev Calculate the amount of funds to repay\n    (uint256 memberDueAmount, uint256 spreadFee, uint256 originationFee) = dueOf(lender);\n\n    /// @dev Cleanup lender callbacks\n    if (_poolCallbacks[lender].isCreated) {\n      _poolCallbacks[lender].isCreated = false;\n    }\n\n    /// @dev Cleanup lender roll\n    if (activeRollId != 0) {\n      activeRollId = 0;\n    }\n\n    /// @dev Emit repay event before potential pool closure\n    emit Repayed(lender, memberDueAmount, spreadFee, originationFee);\n\n    /// @dev Cleanup related data\n    currentSize -= member.principal;\n    member.totalInterest = 0;\n    member.totalOriginationFee = 0;\n    member.principal = 0;\n    member.accrualTs = block.timestamp;\n    --_activeLendersCount;\n\n    /// @dev Remove all lender positions\n    delete _lenderPositions[lender];\n\n    /// @dev Close pool if it is empty and deposit window is over\n    if (currentSize == 0 && depositMaturity <= block.timestamp) {\n      _close();\n    }\n\n    uint256 totalFees = spreadFee + originationFee;\n\n    /// @dev Treasury is always not zero address. Pay protocol fees if any\n    if (totalFees != 0) {\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), totalFees);\n    }\n    _safeTransferFrom(asset, msg.sender, lender, memberDueAmount);\n    return true;\n  }\n\n  /// @dev Repays the interest to all lenders\n  function _repayInterest() internal {\n    /// @dev Get next payment timestamp\n    uint256 newPaidTimestamp = getNextPaymentTimestamp();\n\n    uint256 lendersLength = _lenders.length;\n    for (uint256 i = 0; i < lendersLength; ++i) {\n      /// @dev Iterate over all lenders and repay interest to each of them\n      _repayInterestTo(_lenders[i], newPaidTimestamp);\n    }\n    lastPaidTimestamp = newPaidTimestamp;\n  }\n\n  /// @dev Repays the interest to the lender\n  function _repayInterestTo(address lender, uint256 lastPaidTs) internal {\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    /// @dev Do not repay interest to non lenders or if already paid\n    if (member.principal == 0) {\n      return;\n    }\n\n    (uint256 interest, uint spreadFee) = dueInterestOf(lender);\n\n    /// @dev Substract borrow interest from total interest\n    member.totalInterest -=\n      (member.totalInterest * (lastPaidTs - member.accrualTs)) /\n      (maturityDate - member.accrualTs);\n    member.accrualTs = lastPaidTs;\n    emit RepayedInterest(lender, interest, spreadFee);\n\n    /// @dev Repay fees if any\n    if (spreadFee != 0) {\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), spreadFee);\n    }\n    /// @dev Repay interest and penalty if any.\n    /// @dev interest == 0 is not possible because of the check above for member.accrualTs\n    _safeTransferFrom(asset, msg.sender, lender, interest);\n  }\n\n  /// @dev Rejects the roll\n  function _rejectRoll() internal {\n    isRollRequested = false;\n    emit RollRejected(_nextRollId, msg.sender);\n  }\n\n  /// @dev Closes the pool\n  function _close() internal {\n    isClosed = true;\n    emit Closed();\n  }\n\n  function _getOriginationFee(address lender) internal view returns (uint256 originationFee) {\n    if (originationRate == 0) {\n      return 0;\n    }\n\n    /// @dev Member struct link\n    Member storage member = poolMembers[lender];\n\n    originationFee = member.totalOriginationFee;\n\n    /// @dev Initial maturity date equals to [depositMaturity - depositWindow + tenor].\n    if (\n      _poolCallbacks[lender].isCreated && block.timestamp < depositMaturity - depositWindow + tenor\n    ) {\n      /// @dev If lender hasn't created callback, and borrower repays the loan before the maturity date,\n      /// @dev not all origination fee is used.\n      uint256 unusedTime = maturityDate - block.timestamp;\n\n      originationFee -= (member.principal * (_annualRate(originationRate, unusedTime))) / 1e18;\n    }\n\n    /// @dev If there was a roll and increment per roll is not zero, adjust origination fee\n    if (_nextRollId != 1 && incrementPerRoll != 0) {\n      /// @dev originationFeeAmount is applied only on the original tenure set on the pool,\n      /// @dev and an additional X% annualized added to the originationFeeAmount for every roll.\n      uint256 fullOriginationFeePerRoll = (((member.principal *\n        _annualRate(originationRate, tenor)) / 1e18) * incrementPerRoll) / 1e18;\n\n      if (\n        _poolCallbacks[lender].isCreated &&\n        block.timestamp > _poolRolls[1].startDate &&\n        block.timestamp < maturityDate\n      ) {\n        /// @dev If Callback been requested, origination fee is calculated from the start of the roll\n        /// @dev [times of tenor passed from maturity date] == (daysPassed) / tenor\n        /// @dev Summ origination fee with rolling origination fee\n        originationFee +=\n          (fullOriginationFeePerRoll * (block.timestamp - _poolRolls[1].startDate)) /\n          tenor;\n      } else {\n        originationFee += (fullOriginationFeePerRoll * (_nextRollId - 1));\n      }\n    }\n  }\n\n  function _dueInterestOf(\n    address lender,\n    uint256 totalInterest,\n    uint256 accrualTs\n  ) internal view returns (uint256 due, uint256 spreadFee, uint256 originationFee) {\n    /// @dev By default due is calculated up to maturity date\n    uint256 currentTs = maturityDate;\n\n    if (block.timestamp > maturityDate) {\n      currentTs = block.timestamp;\n      /// @dev If the lender requesting callback is repayed up to maturity or currentTs is after maturity use block timestamp\n    } else if (_poolCallbacks[lender].isCreated && block.timestamp < maturityDate) {\n      /// @dev On monthly pools lender interest maybe be repayed in advance, therefore we should pay no interest\n      currentTs = block.timestamp;\n\n      if (!isBulletLoan && accrualTs > currentTs) {\n        currentTs = maturityDate;\n      }\n    }\n    (due, spreadFee) = _dueInterestFor(totalInterest, accrualTs, currentTs);\n    originationFee = _getOriginationFee(lender);\n    /// @dev Due calculation. due == interest + penalty - spreadFee\n    due += _penaltyOf(lender);\n  }\n\n  /// @dev Calculates the annual rate for a given interest rate and specific interval\n  /// @param _rateMantissa The interest rate as a mantissa between [0, 1e18]\n  /// @param _timeDelta The interval in seconds\n  /// @return rate as a mantissa between [0, 1e18]\n  function _annualRate(uint256 _rateMantissa, uint256 _timeDelta) internal pure returns (uint256) {\n    return (_rateMantissa * _timeDelta) / YEAR;\n  }\n\n  /// @dev Checks if the address is a prime member\n  /// @param _member - The address of the member\n  function _isPrimeMember(address _member) internal view {\n    require(prime().isMember(_member), 'NPM');\n  }\n\n  /// @dev Calculates the interest for specific time\n  /// @param totalInterest - The interest amount calculated for entire time\n  /// @param accrualTs - The timestamp to which the interest was paid\n  /// @param timestamp - The timestamp to which the interest is calculated\n  /// @return interest - The interest amount for given timestamp (spread is substracted)\n  /// @return spreadAmount - The spread amount\n  function _dueInterestFor(\n    uint256 totalInterest,\n    uint256 accrualTs,\n    uint256 timestamp\n  ) internal view returns (uint256 interest, uint256 spreadAmount) {\n    interest = (totalInterest * (timestamp - accrualTs)) / (maturityDate - accrualTs);\n    spreadAmount = (interest * spreadRate) / 1e18;\n    interest -= spreadAmount;\n  }\n\n  /// @dev Calculates penalty fee for the lender\n  /// @param lender - The address of the lender\n  function _penaltyOf(address lender) internal view returns (uint256) {\n    /// @dev Link to member's data struct\n    Member storage member = poolMembers[lender];\n    /// @dev If principal is zero, no penalty fee is charged.\n    /// @dev If monthly loan penalty fee does not charged if it is a first on time payment.\n    if (member.principal == 0) {\n      return 0;\n    }\n\n    /// @dev Penalty fee is charged from the next month after the last payment in case of monthly loan,\n    /// @dev and from the maturity in case of bullet loan.\n    uint256 startingDate = isBulletLoan ? maturityDate : member.accrualTs + 30 days;\n\n    /// @dev Adjust starting date if it is greater than maturity date\n    if (!isBulletLoan && startingDate > maturityDate) {\n      startingDate = maturityDate;\n    }\n\n    /// @dev In common case, penalty fee is calculated to the current time\n    uint256 endingDate = block.timestamp;\n\n    if (defaultedAt != 0) {\n      /// @dev If pool is defaulted, penalty fee is calculated to the default date\n      endingDate = defaultedAt;\n    }\n\n    /// @dev Calculate overdue amounts only if pool is overdue or defaulted\n    if (endingDate > startingDate) {\n      uint256 penaltyRateMantissa = penaltyRate(endingDate - startingDate);\n\n      /// @dev If penalty rate is zero, no penalty fee is charged\n      if (penaltyRateMantissa == 0) {\n        return 0;\n      }\n\n      /// @dev Penalty fee == (penaltyRateForTime * principal)\n      /// @dev function callable only if principal is not zero\n      return (penaltyRateMantissa * member.principal) / 1e18;\n    } else {\n      /// @dev Else return zero\n      return 0;\n    }\n  }\n\n  function _safeTransferFrom(\n    address token,\n    address sender,\n    address receiver,\n    uint256 amount\n  ) internal {\n    return IERC20Upgradeable(token).safeTransferFrom(sender, receiver, amount);\n  }\n}\n"
    },
    "contracts/Pool/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {IPoolFactory} from './IPoolFactory.sol';\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\nimport {Pool, IPool} from './Pool.sol';\n\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport {BeaconProxy} from '@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol';\n\nimport {NZAGuard} from '../utils/NZAGuard.sol';\n\n/// @title Prime PoolFactory contract is responsible for creating new pools\ncontract PoolFactory is\n  IPoolFactory,\n  Initializable,\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  NZAGuard\n{\n  /// @notice Prime contract address\n  IPrime public prime;\n\n  /// @notice Beacon address for pool proxy pattern\n  address public poolBeacon;\n\n  /// @notice Array of pool addresses\n  address[] public pools;\n\n  /// @notice Emitted when prime contract address is changed\n  event PrimeContractChanged(address oldAddress, address newAddress);\n\n  /// @notice Emitted when pool beacon address is changed\n  event PoolBeaconChanged(address oldAddress, address newAddress);\n\n  /// @notice Emitted when a new pool is created\n  event PoolCreated(\n    address pool,\n    address indexed borrower,\n    bool isBulletLoan,\n    address indexed asset,\n    uint256 size,\n    uint256 rateMantissa,\n    uint256 tenor,\n    uint256 depositWindow,\n    uint256 spreadRate,\n    uint256 originationRate,\n    uint256 incrementPerRoll,\n    uint256 penaltyRatePerYear\n  );\n\n  /// @notice Modifier to check if the caller is a prime member\n  modifier onlyPrime() {\n    _isPrimeMember(msg.sender);\n    _;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @inheritdoc IPoolFactory\n  function __PoolFactory_init(\n    address _prime,\n    address _poolBeacon\n  ) external override nonZeroAddress(_prime) nonZeroAddress(_poolBeacon) initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    prime = IPrime(_prime);\n    poolBeacon = _poolBeacon;\n  }\n\n  struct PrimeRates {\n    uint256 spreadRate;\n    uint256 originationRate;\n    uint256 incrementPerRoll;\n    uint256 penaltyRatePerYear;\n  }\n\n  /// @inheritdoc IPoolFactory\n  function createPool(\n    IPool.PoolData calldata pooldata,\n    bytes calldata members\n  ) external override onlyPrime nonZeroAddress(pooldata.asset) nonZeroValue(pooldata.size) {\n    /// @dev Tenor should be greater than 48 hours and greater than deposit window\n    require(pooldata.depositWindow > 1 hours, 'UTR');\n    require(pooldata.tenor > pooldata.depositWindow + 48 hours, 'DET');\n    require(prime.isAssetAvailable(pooldata.asset), 'AAI');\n\n    if (!pooldata.isBulletLoan) {\n      /// @dev Tenor should be greater than 60 days for non bullet (monthly repayment) loans\n      require(pooldata.tenor - pooldata.depositWindow > 60 days, 'TTS');\n    }\n\n    /// @dev Fetches spread, origination rate and rolling increment from prime contract\n    PrimeRates memory rates = PrimeRates(\n      prime.spreadRate(),\n      prime.originationRate(),\n      prime.incrementPerRoll(),\n      prime.penaltyRatePerYear()\n    );\n\n    /// @dev Creates a pool using beacon proxy pattern\n    address pool = address(new BeaconProxy(poolBeacon, ''));\n\n    /// @dev Initializes the pool according to the pool beacon pattern\n    IPool(pool).__Pool_init(\n      msg.sender,\n      rates.spreadRate,\n      rates.originationRate,\n      rates.incrementPerRoll,\n      rates.penaltyRatePerYear,\n      pooldata,\n      members\n    );\n\n    pools.push(pool);\n\n    emit PoolCreated(\n      pool,\n      msg.sender,\n      pooldata.isBulletLoan,\n      pooldata.asset,\n      pooldata.size,\n      pooldata.rateMantissa,\n      pooldata.tenor,\n      pooldata.depositWindow,\n      rates.spreadRate,\n      rates.originationRate,\n      rates.incrementPerRoll,\n      rates.penaltyRatePerYear\n    );\n  }\n\n  /// @notice Marks the pools as defaulted\n  /// @dev Callable only by owner\n  function defaultPools(address[] calldata _pools) external onlyOwner {\n    uint256 length = _pools.length;\n    for (uint256 i = 0; i < length; ++i) {\n      IPool(_pools[i]).markPoolDefaulted();\n    }\n  }\n\n  /// @notice Returns the pools array\n  /// @return Array of pool addresses\n  function getPools() external view returns (address[] memory) {\n    return pools;\n  }\n\n  /// @notice Changes the prime contract address\n  /// @dev Callable only by owner\n  /// @param newAddress New prime contract address\n  function setPrimeContract(\n    address newAddress\n  ) external nonZeroAddress(newAddress) nonSameAddress(newAddress, address(prime)) onlyOwner {\n    address currentAddress = address(prime);\n\n    prime = IPrime(newAddress);\n    emit PrimeContractChanged(currentAddress, newAddress);\n  }\n\n  /// @notice Changes the pool beacon address\n  /// @dev Callable only by owner\n  /// @param _newPoolBeacon New pool beacon address\n  function setPoolBeacon(\n    address _newPoolBeacon\n  ) external nonZeroAddress(_newPoolBeacon) nonSameAddress(_newPoolBeacon, poolBeacon) onlyOwner {\n    address currentAddress = poolBeacon;\n    poolBeacon = _newPoolBeacon;\n\n    emit PoolBeaconChanged(currentAddress, _newPoolBeacon);\n  }\n\n  /// @notice Checks if the caller is a prime member\n  /// @dev Internal function, reverts if the caller is not a prime member\n  /// @param _member Member address\n  function _isPrimeMember(address _member) internal view {\n    require(prime.isMember(_member), 'NPM');\n  }\n}\n"
    },
    "contracts/PrimeMembership/Asset.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nlibrary Asset {\n  struct Data {\n    mapping(address => bool) flags;\n    mapping(address => uint256) addressIndex;\n    address[] addresses;\n    uint256 id;\n  }\n\n  function insert(Data storage self, address asset) internal returns (bool) {\n    if (self.flags[asset]) {\n      return false;\n    }\n\n    self.flags[asset] = true;\n    self.addresses.push(asset);\n    self.addressIndex[asset] = self.id;\n    self.id++;\n    return true;\n  }\n\n  function contains(Data storage self, address asset) internal view returns (bool) {\n    return self.flags[asset];\n  }\n\n  function getList(Data storage self) internal view returns (address[] memory) {\n    return self.addresses;\n  }\n}\n"
    },
    "contracts/PrimeMembership/IPrime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/**\n * @title Interface of the Prime membership contract\n */\ninterface IPrime {\n  /// @notice Member status enum\n  enum MemberStatus {\n    PENDING,\n    WHITELISTED,\n    BLACKLISTED\n  }\n\n  /// @notice A record of member info\n  struct Member {\n    uint256 riskScore;\n    MemberStatus status;\n    bool created;\n  }\n\n  /**\n   * @notice Check membership status for a given `_member`\n   * @param _member The address of member\n   * @return Boolean flag containing membership status\n   */\n  function isMember(address _member) external view returns (bool);\n\n  /**\n   * @notice Check Stablecoin existence for a given `asset` address\n   * @param asset The address of asset\n   * @return Boolean flag containing asset availability\n   */\n  function isAssetAvailable(address asset) external view returns (bool);\n\n  /**\n   * @notice Get membership info for a given `_member`\n   * @param _member The address of member\n   * @return The member info struct\n   */\n  function membershipOf(address _member) external view returns (Member memory);\n\n  /**\n   * @notice Returns current protocol rate value\n   * @return The protocol rate as a mantissa between [0, 1e18]\n   */\n  function spreadRate() external view returns (uint256);\n\n  /**\n   * @notice Returns current originated fee value\n   * @return originated fee rate as a mantissa between [0, 1e18]\n   */\n  function originationRate() external view returns (uint256);\n\n  /**\n   * @notice Returns current rolling increment fee\n   * @return rolling fee rate as a mantissa between [0, 1e18]\n   */\n  function incrementPerRoll() external view returns (uint256);\n\n  /**\n   * @notice Returns current protocol fee collector address\n   * @return address of protocol fee collector\n   */\n  function treasury() external view returns (address);\n\n  /**\n   * @notice Returns current penalty rate for 1 year\n   * @return penalty fee rate as a mantissa between [0, 1e18]\n   */\n  function penaltyRatePerYear() external view returns (uint256);\n}\n"
    },
    "contracts/PrimeMembership/Prime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nimport {IPrime} from './IPrime.sol';\nimport {Asset} from './Asset.sol';\n\nimport {NZAGuard} from '../utils/NZAGuard.sol';\n\n/// @title A contract for control Clearpool Prime membership database\ncontract Prime is Initializable, OwnableUpgradeable, IPrime, NZAGuard {\n  using Asset for Asset.Data;\n\n  /// @notice Standart year in seconds\n  uint256 public constant YEAR = 360 days;\n\n  /// @notice Setted penalty rate per year value\n  uint256 public penaltyRatePerYear;\n\n  /// @dev Protocol spread rate\n  uint256 public spreadRate; // from 0 (0%) to 1e18 (100%)\n\n  /// @notice Origination fee rate\n  uint256 public originationRate;\n\n  /// @notice Rolling increment rate for the origination fee\n  uint256 public incrementPerRoll;\n\n  /// @dev The address that will receive the fees\n  address public treasury;\n\n  /// @dev Data struct to simplify the operations with stablecoins addresses\n  Asset.Data private _stablecoins;\n\n  /// @dev A record of each member's info, by address\n  mapping(address => Member) private _members;\n\n  /// @notice An event that's emitted when a member is created\n  event MemberCreated(address indexed member);\n  /// @notice An event that's emitted when a member is whitelisted\n  event MemberWhitelisted(address indexed member);\n  /// @notice An event that's emitted when a member is blacklisted\n  event MemberBlacklisted(address indexed member);\n\n  /// @notice An event that's emitted when a member's riskScore is changed\n  event RiskScoreChanged(address indexed member, uint256 score);\n\n  /// @notice An event that's emitted when the value of the penaltyRatePerYear is changed\n  event PenaltyRatePerYearUpdated(uint256 oldValue, uint256 newValue);\n\n  /// @notice An event that's emitted when the value of the spreadRate is changed\n  event SpreadRateChanged(uint256 oldValue, uint256 newValue);\n\n  /// @notice An event that's emitted when the value of the treasury is changed\n  event TreasuryChanged(address oldValue, address newValue);\n\n  /// @notice Emitted when origination fee rate is changed\n  event OriginationRateChanged(uint256 oldFee, uint256 newFee);\n\n  /// @notice Emitted when rolling increment rate is changed\n  event RollingIncrementChanged(uint256 oldIncrement, uint256 newIncrement);\n\n  /// @dev Modifier for checking membership record availability\n  modifier onlyMember(address _member) {\n    require(_members[_member].created, 'NPM');\n    _;\n  }\n\n  /// @dev Modifier for checking that risk score is in range of [1, 100]\n  modifier riskScoreInRange(uint256 _riskScore) {\n    require(_riskScore <= 100 && _riskScore > 0, 'RSI');\n    _;\n  }\n\n  /// @custom:oz-upgrades-unsafe-allow constructor\n  constructor() {\n    _disableInitializers();\n  }\n\n  /// @dev External function to initialize the contract after it's been added to the proxy.\n  /// @dev It initializes the inherited contracts.\n  /// @param stablecoins An array of stablecoins addresses\n  /// @param treasury_ The address that will receive the fees\n  /// @param penaltyRatePerYear_ The penalty rate per year\n  function __Prime_init(\n    address[] memory stablecoins,\n    address treasury_,\n    uint256 penaltyRatePerYear_\n  ) external virtual initializer {\n    __Ownable_init();\n    __Prime_init_unchained(stablecoins, treasury_, penaltyRatePerYear_);\n  }\n\n  /// @dev Internal function to initialize the contract after it's been added to the proxy\n  /// @dev It initializes current contract with the given parameters.\n  /// @param stablecoins An array of stablecoins addresses\n  /// @param treasury_ The address that will receive the fees\n  /// @param penaltyRatePerYear_ The penalty rate per year\n  function __Prime_init_unchained(\n    address[] memory stablecoins,\n    address treasury_,\n    uint256 penaltyRatePerYear_\n  ) internal nonZeroAddress(treasury_) nonZeroValue(penaltyRatePerYear_) onlyInitializing {\n    require(penaltyRatePerYear_ <= 1e19, 'PRI'); // 1000%;\n    treasury = treasury_;\n    penaltyRatePerYear = penaltyRatePerYear_;\n\n    for (uint256 i = 0; i < stablecoins.length; i++) {\n      require(_stablecoins.insert(stablecoins[i]), 'TIF');\n    }\n  }\n\n  /**\n   * @inheritdoc IPrime\n   */\n  function isMember(address _member) external view override returns (bool) {\n    Member storage member = _members[_member];\n    return member.created && member.status == MemberStatus.WHITELISTED;\n  }\n\n  /**\n   * @inheritdoc IPrime\n   */\n  function isAssetAvailable(\n    address asset\n  ) external view override nonZeroAddress(asset) returns (bool isAvailable) {\n    return _stablecoins.contains(asset);\n  }\n\n  /// @notice Returns an array of assets available for borrowing\n  /// @return An array of available assets\n  function availableAssets() external view returns (address[] memory) {\n    return _stablecoins.getList();\n  }\n\n  /**\n   * @inheritdoc IPrime\n   */\n  function membershipOf(address _member) external view override returns (Member memory member) {\n    return _members[_member];\n  }\n\n  /**\n   * @notice Request a membership record\n   *\n   *\n   * @dev Emits a {MemberCreated} event.\n   */\n  function requestMembership(address _requester) public nonZeroAddress(_requester) {\n    require(!_members[_requester].created, 'MAC');\n\n    _members[_requester] = Member(0, MemberStatus.PENDING, true);\n    emit MemberCreated(_requester);\n  }\n\n  /**\n   * @notice Alter or creates membership record by setting `_member` status and `_riskScore`\n   * @param _member The member address\n   * @param _riskScore The number up to 100 representing member's score\n   *\n   * @dev Emits a {MemberCreated} event.\n   * @dev Emits a {MemberWhitelisted} event.\n   * @dev Emits a {RiskScoreChanged} event.\n   */\n  function whitelistMember(\n    address _member,\n    uint256 _riskScore\n  ) external nonZeroAddress(_member) riskScoreInRange(_riskScore) onlyOwner {\n    _whitelistMember(_member, _riskScore);\n  }\n\n  /// @dev Internal function that whitelists member\n  /// @param _member The member address\n  /// @param _riskScore The number up to 100 representing member's score\n  function _whitelistMember(address _member, uint256 _riskScore) internal {\n    Member storage member = _members[_member];\n\n    if (!member.created) {\n      requestMembership(_member);\n    }\n\n    require(member.status != MemberStatus.WHITELISTED, 'AAD');\n\n    member.status = MemberStatus.WHITELISTED;\n    emit MemberWhitelisted(_member);\n\n    if (member.riskScore != _riskScore) {\n      member.riskScore = _riskScore;\n      emit RiskScoreChanged(_member, _riskScore);\n    }\n  }\n\n  /**\n   * @notice Alter membership record by setting `_member` status\n   * @param _member The member address\n   *\n   * @dev Emits a {MemberBlacklisted} event.\n   */\n  function blacklistMember(\n    address _member\n  ) external nonZeroAddress(_member) onlyMember(_member) onlyOwner {\n    Member storage member = _members[_member];\n\n    require(member.status != MemberStatus.BLACKLISTED, 'AAD');\n\n    member.status = MemberStatus.BLACKLISTED;\n    emit MemberBlacklisted(_member);\n  }\n\n  /**\n   * @notice Alter membership record by setting member `_riskScore`\n   * @param _member The member address\n   * @param _riskScore The number up to 100 representing member's score\n   *\n   * @dev Emits a {RiskScoreChanged} event.\n   */\n  function changeMemberRiskScore(\n    address _member,\n    uint256 _riskScore\n  ) external nonZeroAddress(_member) onlyMember(_member) riskScoreInRange(_riskScore) onlyOwner {\n    Member storage member = _members[_member];\n    if (member.riskScore != _riskScore) {\n      member.riskScore = _riskScore;\n      emit RiskScoreChanged(_member, _riskScore);\n    }\n  }\n\n  /**\n   * @notice Changes the spread rate\n   * @dev Callable only by owner. It is a mantissa value, so 1e18 is 100%\n   * @param spreadRate_ New spread fee rate\n   */\n  function changeSpreadRate(\n    uint256 spreadRate_\n  ) external onlyOwner nonMoreThenOne(spreadRate_) nonSameValue(spreadRate_, spreadRate) {\n    uint256 currentValue = spreadRate;\n    spreadRate = spreadRate_;\n    emit SpreadRateChanged(currentValue, spreadRate_);\n  }\n\n  /// @notice Changes the origination fee rate\n  /// @dev Callable only by owner\n  /// @param _originationRate New origination fee rate\n  function setOriginationRate(\n    uint256 _originationRate\n  )\n    external\n    onlyOwner\n    nonMoreThenOne(_originationRate)\n    nonSameValue(_originationRate, originationRate)\n  {\n    uint256 currentFee = originationRate;\n\n    originationRate = _originationRate;\n    emit OriginationRateChanged(currentFee, _originationRate);\n  }\n\n  /// @notice Changes the rolling increment fee rate\n  /// @dev Callable only by owner\n  /// @param _incrementPerRoll New origination fee rate\n  function setRollingIncrement(\n    uint256 _incrementPerRoll\n  )\n    external\n    onlyOwner\n    nonMoreThenOne(_incrementPerRoll)\n    nonSameValue(_incrementPerRoll, incrementPerRoll)\n  {\n    uint256 currentIncrement = incrementPerRoll;\n\n    incrementPerRoll = _incrementPerRoll;\n    emit RollingIncrementChanged(currentIncrement, _incrementPerRoll);\n  }\n\n  /// @notice Sets a new treasury address for the contract\n  /// @dev Callable only by owner\n  /// @param treasury_ The address of the new treasury\n  function setTreasury(\n    address treasury_\n  ) external nonZeroAddress(treasury_) nonSameAddress(treasury_, treasury) onlyOwner {\n    address currentValue = treasury;\n\n    treasury = treasury_;\n    emit TreasuryChanged(currentValue, treasury_);\n  }\n\n  /// @notice Updates penalty rate per year value\n  /// @dev Callable only by owner\n  /// @param penaltyRatePerYear_ New penalty rate per year value\n  function updatePenaltyRatePerYear(\n    uint256 penaltyRatePerYear_\n  ) external onlyOwner nonSameValue(penaltyRatePerYear_, penaltyRatePerYear) {\n    require(penaltyRatePerYear_ <= 1e19, 'PRI'); // 1000%;\n    uint256 currentValue = penaltyRatePerYear;\n\n    penaltyRatePerYear = penaltyRatePerYear_;\n    emit PenaltyRatePerYearUpdated(currentValue, penaltyRatePerYear_);\n  }\n}\n"
    },
    "contracts/utils/AddressCoder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nlibrary AddressCoder {\n  function encodeAddress(address[] calldata addresses) internal pure returns (bytes memory data) {\n    for (uint256 i = 0; i < addresses.length; i++) {\n      data = abi.encodePacked(data, addresses[i]);\n    }\n  }\n\n  function decodeAddress(bytes calldata data) internal pure returns (address[] memory addresses) {\n    uint256 n = data.length / 20;\n    addresses = new address[](n);\n\n    for (uint256 i = 0; i < n; i++) {\n      addresses[i] = bytesToAddress(data[i * 20:(i + 1) * 20]);\n    }\n  }\n\n  function bytesToAddress(bytes calldata data) private pure returns (address addr) {\n    bytes memory b = data;\n    assembly {\n      addr := mload(add(b, 20))\n    }\n  }\n}\n"
    },
    "contracts/utils/NZAGuard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\nabstract contract NZAGuard {\n  modifier nonZeroAddress(address _address) {\n    require(_address != address(0), 'NZA');\n    _;\n  }\n  modifier nonZeroValue(uint256 _value) {\n    require(_value != 0, 'ZVL');\n    _;\n  }\n  modifier nonSameValue(uint256 _value1, uint256 _value2) {\n    require(_value1 != _value2, 'SVR');\n    _;\n  }\n  modifier nonSameAddress(address _address1, address _address2) {\n    require(_address1 != _address2, 'SVA');\n    _;\n  }\n  modifier nonMoreThenOne(uint256 _value) {\n    require(_value <= 1e18, 'UTR');\n    _;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}