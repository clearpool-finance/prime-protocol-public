{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n *\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/hardhat-dependency-compiler/@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol';\n"
    },
    "contracts/mock/CoinKeeperGoerli.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ICoinKeeper.sol\";\r\n\r\ninterface IERC20Goerli is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external;\r\n}\r\n\r\ncontract CoinKeeperGoerli is ICoinKeeper {\r\n    address[] public allTokens;\r\n\r\n    mapping(string => address) public tokenBySymbol;\r\n    mapping(address => bool) public isTokenMintable;\r\n    mapping(address => bool) public isTokenExists;\r\n\r\n    /// @notice Returns msg.sender's balance of token\r\n    function myBalanceOf(address token) external view returns (uint256) {\r\n        return IERC20(token).balanceOf(msg.sender);\r\n    }\r\n\r\n    /// @notice Gives amount of token to msg.sender\r\n    function claim(\r\n        address token,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > amount) {\r\n            return IERC20(token).transfer(msg.sender, amount);\r\n        }\r\n        if (isTokenMintable[token]) {\r\n            IERC20Goerli(token).mint(msg.sender, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice Gives 1000 of each token to msg.sender\r\n    function claimAll() external returns (bool) {\r\n        for (uint256 i = 0; i < allTokens.length; i++) {\r\n            uint256 tokenDecimals = IERC20Metadata(allTokens[i]).decimals();\r\n            uint256 amount = 1000 * 10 ** tokenDecimals;\r\n            claim(allTokens[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Adds token to the list of tokens\r\n    /// @param token Address of the token\r\n    /// @param symbol Symbol of the token\r\n    /// @param isMintable Whether the token is mintable\r\n    function addTokenToList(\r\n        address token,\r\n        string calldata symbol,\r\n        bool isMintable\r\n    ) external returns (bool) {\r\n        require(!isTokenExists[token], \"Token already exists\");\r\n        require(tokenBySymbol[symbol] == address(0), \"Symbol already exists\");\r\n\r\n        allTokens.push(token);\r\n\r\n        isTokenMintable[token] = isMintable;\r\n        isTokenExists[token] = true;\r\n        tokenBySymbol[symbol] = token;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Mints token to 'to'\r\n    function mintTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        require(isTokenMintable[token], \"Token is not mintable\");\r\n        IERC20Goerli(token).mint(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers token from this to msg.sender\r\n    function transferTokenToMe(\r\n        address token,\r\n        uint256 amount\r\n    ) external tokenExists(token) returns (bool) {\r\n        return transferTokenTo(token, msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Transfers token from this to 'to'\r\n    function transferTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        return IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    /// @notice Transfers token from 'from' to 'to'\r\n    function transferTokenFromTo(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external tokenExists(token) returns (bool) {\r\n        return IERC20(token).transferFrom(from, to, amount);\r\n    }\r\n\r\n    /// @notice Transfers ownership of token to 'newOwner'\r\n    function transferOwnershipOfToken(\r\n        address token,\r\n        address newOwner\r\n    ) external override tokenExists(token) {\r\n        Ownable(token).transferOwnership(newOwner);\r\n    }\r\n\r\n    modifier tokenExists(address token) {\r\n        require(isTokenExists[token], \"Token does not exist\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/CoinKeeperMumbai.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./ICoinKeeper.sol\";\r\n\r\ninterface IERC20MintableBurnable is IERC20 {\r\n    function faucet(uint256 amount) external;\r\n\r\n    function faucetTo(address receiver, uint256 amount) external;\r\n}\r\n\r\ncontract CoinKeeperMumbai is ICoinKeeper {\r\n    address[] public allTokens;\r\n\r\n    mapping(string => address) public tokenBySymbol;\r\n    mapping(address => bool) public isTokenMintable;\r\n    mapping(address => bool) public isTokenExists;\r\n\r\n    /// @notice Returns msg.sender's balance of token\r\n    function myBalanceOf(address token) external view returns (uint256) {\r\n        return IERC20(token).balanceOf(msg.sender);\r\n    }\r\n\r\n    /// @notice Gives amount of token to msg.sender\r\n    function claim(\r\n        address token,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        uint256 balance = IERC20(token).balanceOf(address(this));\r\n        if (balance > amount) {\r\n            return IERC20(token).transfer(msg.sender, amount);\r\n        }\r\n        if (isTokenMintable[token]) {\r\n            IERC20MintableBurnable(token).faucetTo(msg.sender, amount);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /// @notice Gives 1000 of each token to msg.sender\r\n    function claimAll() external returns (bool) {\r\n        for (uint256 i = 0; i < allTokens.length; i++) {\r\n            uint256 tokenDecimals = IERC20Metadata(allTokens[i]).decimals();\r\n            uint256 amount = 1000 * 10 ** tokenDecimals;\r\n            claim(allTokens[i], amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @notice Adds token to the list of tokens\r\n    /// @param token Address of the token\r\n    /// @param symbol Symbol of the token\r\n    /// @param isMintable Whether the token is mintable\r\n    function addTokenToList(\r\n        address token,\r\n        string calldata symbol,\r\n        bool isMintable\r\n    ) external returns (bool) {\r\n        require(!isTokenExists[token], \"Token already exists\");\r\n        require(tokenBySymbol[symbol] == address(0), \"Symbol already exists\");\r\n\r\n        allTokens.push(token);\r\n\r\n        isTokenMintable[token] = isMintable;\r\n        isTokenExists[token] = true;\r\n        tokenBySymbol[symbol] = token;\r\n\r\n        return true;\r\n    }\r\n\r\n    /// @notice Mints token to msg.sender\r\n    function mintTokenToMe(\r\n        address token,\r\n        uint256 amount\r\n    ) external returns (bool) {\r\n        return mintTokenTo(token, msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Mints token to 'to'\r\n    function mintTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        require(isTokenMintable[token], \"Token is not mintable\");\r\n        IERC20MintableBurnable(token).faucetTo(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers token from this to msg.sender\r\n    function transferTokenToMe(\r\n        address token,\r\n        uint256 amount\r\n    ) external tokenExists(token) returns (bool) {\r\n        return transferTokenTo(token, msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Transfers token from this to 'to'\r\n    function transferTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) public tokenExists(token) returns (bool) {\r\n        return IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    /// @notice Transfers token from 'from' to 'to'\r\n    function transferTokenFromTo(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external tokenExists(token) returns (bool) {\r\n        return IERC20(token).transferFrom(from, to, amount);\r\n    }\r\n\r\n    /// @notice Transfers ownership of token to 'newOwner'\r\n    function transferOwnershipOfToken(\r\n        address token,\r\n        address newOwner\r\n    ) external tokenExists(token) {\r\n        Ownable(token).transferOwnership(newOwner);\r\n    }\r\n\r\n    modifier tokenExists(address token) {\r\n        require(isTokenExists[token], \"Token does not exist\");\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/mock/FaucetToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\r\n\r\ncontract FaucetToken is ERC20PresetMinterPauser, ERC20Permit {\r\n    uint8 private _decimals;\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals_\r\n    ) ERC20PresetMinterPauser(name, symbol) ERC20Permit(name) {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function faucet(uint256 amount) external {\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    function faucetTo(address receiver, uint256 amount) external {\r\n        _mint(receiver, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual override(ERC20, ERC20PresetMinterPauser) {\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/mock/ICoinKeeper.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface ICoinKeeper {\r\n    function tokenBySymbol(\r\n        string calldata symbol\r\n    ) external view returns (address);\r\n\r\n    function isTokenMintable(address token) external view returns (bool);\r\n\r\n    function isTokenExists(address token) external view returns (bool);\r\n\r\n    /// @notice Returns msg.sender's balance of token\r\n    function myBalanceOf(address token) external view returns (uint256);\r\n\r\n    /// @notice Gives amount of token to msg.sender\r\n    function claim(address token, uint256 amount) external returns (bool);\r\n\r\n    /// @notice Gives 1000 of each token to msg.sender\r\n    function claimAll() external returns (bool);\r\n\r\n    /// @notice Adds token to the list of tokens\r\n    /// @param token Address of the token\r\n    /// @param symbol Symbol of the token\r\n    /// @param isMintable Whether the token is mintable\r\n    function addTokenToList(\r\n        address token,\r\n        string calldata symbol,\r\n        bool isMintable\r\n    ) external returns (bool);\r\n\r\n    /// @notice Mints token to 'to'\r\n    function mintTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Transfers token amount from this to msg.sender\r\n    function transferTokenToMe(\r\n        address token,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Transfers token from this to 'to'\r\n    function transferTokenTo(\r\n        address token,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Transfers token from 'from' to 'to'\r\n    function transferTokenFromTo(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /// @notice Transfers ownership of token to 'newOwner'\r\n    function transferOwnershipOfToken(address token, address newOwner) external;\r\n}\r\n"
    },
    "contracts/mock/StableCoin.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract StableCoin is ERC20, Ownable {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _decimals = decimals_;\n    }\n\n    function mint(address account, uint256 amount) external {\n        _mint(account, amount);\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/Pool/IERC20Lite.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @notice Minimal interface for ERC20 transfers, used by the Pool to transfer\r\ninterface IERC20Lite {\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
    },
    "contracts/Pool/IPool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title Prime IPool contract interface\r\ninterface IPool {\r\n    /// @notice Pool member data struct\r\n    struct Member {\r\n        bool isCreated; // True if the member is created\r\n        bool isWhitelisted; // True if the member is whitelisted\r\n        uint256 principal; // Principal amount\r\n        uint256 accrualTs; // Timestamp of the last accrual\r\n        uint256 supplyIndex; // Supply index of the last accrual\r\n    }\r\n\r\n    /// @notice Roll data struct\r\n    struct Roll {\r\n        uint256 startDate; // Start date of the roll\r\n        uint256 endDate; // End date of the roll\r\n    }\r\n\r\n    /// @notice Callback data struct\r\n    struct CallBack {\r\n        bool isCreated; // True if the callback is created\r\n        uint256 timestamp; // Timestamp of the callback\r\n    }\r\n\r\n    /// @notice Struct to avoid stack too deep error\r\n    struct PoolData {\r\n        address asset;\r\n        uint256 size;\r\n        uint256 tenor;\r\n        uint256 rateMantissa;\r\n        uint256 depositWindow;\r\n    }\r\n\r\n    /// @notice Initialize the pool\r\n    /// @dev This function is called only once during the pool creation\r\n    /// @param _borrower - Pool borrower address\r\n    /// @param _spreadRate - Pool protocol spread rate\r\n    /// @param _originationRate - Pool origination fee rate\r\n    /// @param _incrementPerRoll - Pool rolling increment rate of origination fee\r\n    /// @param _poolData - Pool data struct: asset, size, tenor, rateMantissa, depositWindow\r\n    /// @param _members - Pool members (lenders) addresses encoded in bytes\r\n    function __Pool_init(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) external;\r\n\r\n    /// @notice Whitelists lenders\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lenders - Lenders addresses encoded in bytes\r\n    function whitelistLenders(bytes calldata lenders) external returns (bool);\r\n\r\n    /// @notice Blacklists lenders\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lenders - Lenders addresses encoded in bytes\r\n    function blacklistLenders(bytes calldata lenders) external returns (bool);\r\n\r\n    /// @notice Converts the pool to public\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if the pool is converted to public\r\n    function switchToPublic() external returns (bool success);\r\n\r\n    /// @notice Lends funds to the pool\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @param amount - Amount of funds to lend\r\n    /// @return success - True if the funds are lent\r\n    function lend(uint256 amount) external returns (bool success);\r\n\r\n    /// @notice Repays the lender\r\n    /// @dev Can be called only by the borrower\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the lender is repaid\r\n    function repay(address lender) external returns (bool success);\r\n\r\n    /// @notice Repays all lenders\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if all lenders are repaid\r\n    function repayAll() external returns (bool success);\r\n\r\n    /// @notice Creates the callback\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @return success - True if the callback is created by the lender\r\n    function requestCallBack() external returns (bool success);\r\n\r\n    /// @notice Cancels the callback\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    /// @return success - True if the callback is cancelled by the lender\r\n    function cancelCallBack() external returns (bool success);\r\n\r\n    /// @notice Requests the roll\r\n    /// @dev Can be called only by the borrower\r\n    function requestRoll() external;\r\n\r\n    /// @notice Accepts the roll\r\n    /// @dev Can be called only by the whitelisted Prime lenders\r\n    function acceptRoll() external;\r\n\r\n    /// @notice Defaults the pool\r\n    /// @dev Can be called only by lender or borrower if time conditions are met\r\n    /// @dev Can be called by governor without time conditions\r\n    function markPoolDefaulted() external;\r\n\r\n    /// @notice Closes the pool\r\n    /// @dev Can be called only by the borrower\r\n    /// @return success - True if the pool is closed\r\n    function close() external returns (bool success);\r\n\r\n    /// @notice Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\r\n    /// @return totalDue - Total due amount for repayment\r\n    function totalDue() external view returns (uint256 totalDue);\r\n\r\n    /// @notice Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\r\n    /// @param lender - The address of the lender\r\n    /// @return due - Due amount for repayment\r\n    /// @return spreadAmount - Protocol fee\r\n    /// @return originationFee - Origination protocol fee\r\n    function dueOf(\r\n        address lender\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 due, uint256 spreadAmount, uint256 originationFee);\r\n\r\n    /// @notice Calculates the accrued amount until today, excluding penalty\r\n    /// @param lender - The address of the lender\r\n    /// @return interestAccrued - Accrued amount until today\r\n    function balanceOf(address lender) external view returns (uint256);\r\n\r\n    /// @notice When maturity date passed, calculates the penalty fee for the lender\r\n    /// @param lender - The address of the lender\r\n    /// @return penaltyFee - Penalty fee\r\n    function penaltyOf(address lender) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Pool/IPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPool} from \"./IPool.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\n\r\n/// @title Prime IPoolFactory interface\r\ninterface IPoolFactory {\r\n    /// @notice Initialize the contract\r\n    /// @dev This function is called only once during the contract deployment\r\n    /// @param _prime Prime contract address\r\n    /// @param _poolBeacon Beacon address for pool proxy pattern\r\n    function __PoolFactory_init(address _prime, address _poolBeacon) external;\r\n\r\n    /// @notice Creates a new pool\r\n    /// @dev Callable only by prime members\r\n    /// @param pooldata Bla bla bla\r\n    /// @param members Pool members address encoded in bytes\r\n    function createPool(\r\n        IPool.PoolData calldata pooldata,\r\n        bytes calldata members\r\n    ) external;\r\n\r\n    function prime() external view returns (IPrime);\r\n}\r\n"
    },
    "contracts/Pool/Pool.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPool} from \"./IPool.sol\";\r\nimport {IPoolFactory} from \"./IPoolFactory.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\n\r\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\n\r\nimport {IERC20Lite} from \"./IERC20Lite.sol\";\r\nimport {NZAGuard} from \"../utils/NZAGuard.sol\";\r\nimport {AddressCoder} from \"../utils/AddressCoder.sol\";\r\n\r\n/// @title Pool contract is responsible for managing the pool\r\ncontract Pool is\r\n    IPool,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    NZAGuard\r\n{\r\n    /// @notice Standart year in seconds\r\n    uint256 public constant YEAR = 360 days;\r\n\r\n    /// @notice Pool publicity status\r\n    bool public isPublic;\r\n\r\n    /// @notice Pool availability status\r\n    bool public isClosed;\r\n\r\n    /// @notice Roll request status\r\n    bool public isRollRequested;\r\n\r\n    /// @notice Pool borrower address\r\n    address public borrower;\r\n\r\n    /// @notice Asset address of the pool\r\n    address public asset;\r\n\r\n    /// @notice Pool factory address\r\n    IPoolFactory public factory;\r\n\r\n    /// @notice Pool maximum size\r\n    uint256 public maxSize;\r\n\r\n    /// @notice Pool tenor\r\n    uint256 public tenor;\r\n\r\n    /// @notice Pool interest rate (in mantissa)\r\n    uint256 public rateMantissa;\r\n\r\n    /// @notice Protocol spread rate\r\n    uint256 public spreadRate;\r\n\r\n    /// @notice Origination fee rate\r\n    uint256 public originationRate;\r\n\r\n    /// @notice Pool rolling increment fee rate\r\n    uint256 public incrementPerRoll;\r\n\r\n    /// @notice Pool deposit window (in seconds)\r\n    uint256 public depositWindow;\r\n\r\n    /// @notice Pool current size\r\n    uint256 public currentSize;\r\n\r\n    /// @notice Pool deposit maturity\r\n    uint256 public depositMaturity;\r\n\r\n    /// @notice Pool maturity date\r\n    uint256 public maturityDate;\r\n\r\n    /// @notice Pool active roll id\r\n    uint256 public activeRollId;\r\n\r\n    /// @notice Pool lenders array\r\n    address[] private _lenders;\r\n\r\n    /// @notice Pool next roll id counter\r\n    uint256 private _nextRollId;\r\n\r\n    /// @notice Pool active lenders count\r\n    uint256 private _activeLendersCount;\r\n\r\n    /// @notice Pool active callbacks count\r\n    uint256 private _activeCallbacksCount;\r\n\r\n    /// @notice If pool is defaulted, this is the timestamp of the default\r\n    uint256 public poolDefaultTimestamp;\r\n\r\n    /// @notice Pool members mapping (lender address => Member struct)\r\n    mapping(address => Member) private poolMembers;\r\n\r\n    /// @notice Pool rolls mapping (roll id => Roll struct)\r\n    mapping(uint256 => Roll) private _poolRolls;\r\n\r\n    /// @notice Pool callbacks mapping (lender address => CallBack struct)\r\n    mapping(address => CallBack) private _poolCallbacks;\r\n\r\n    /// @notice Pool deposits mapping (lender address => deposit amount)\r\n    mapping(address => uint256) private _poolDeposits;\r\n\r\n    /// @notice Emitted when the pool is activated\r\n    /// @param depositMaturity - Lender can deposit until this timestamp\r\n    /// @param maturityDate - Borrower's maturity date (timestamp)\r\n    event Activated(uint256 depositMaturity, uint256 maturityDate);\r\n\r\n    /// @notice Emitted when the pool is closed\r\n    event Closed();\r\n\r\n    /// @notice Emitted when the pool is rolled\r\n    /// @param rollId - Id of the new roll\r\n    /// @param newMaturity - New maturity date (timestamp)\r\n    event RollAccepted(uint256 indexed rollId, uint256 newMaturity);\r\n\r\n    /// @notice Emitted when the roll is requested\r\n    /// @param rollId - Id of the roll\r\n    event RollRequested(uint256 indexed rollId);\r\n\r\n    /// @notice Emitted when the roll is rejected\r\n    /// @param rollId - Id of the roll\r\n    /// @param user - Address of the user who rejected the roll\r\n    event RollRejected(uint256 indexed rollId, address user);\r\n\r\n    /// @notice Emitted when new lender is added to the pool\r\n    event LenderWhitelisted(address lender);\r\n\r\n    /// @notice Emitted when lender is removed from the pool\r\n    event LenderBlacklisted(address lender);\r\n\r\n    /// @notice Emitted when lender is rejected the roll to borrower\r\n    event LenderRejectedRoll(uint256 indexed rollId, address lender);\r\n\r\n    /// @notice Emitted when funds are lent to the pool\r\n    event Lent(address indexed lender, uint256 amount);\r\n\r\n    /// @notice Emitted when lender is repayed\r\n    event Repayed(\r\n        address indexed lender,\r\n        uint256 repayed,\r\n        uint256 spreadFee,\r\n        uint256 originationFee\r\n    );\r\n\r\n    /// @notice Emitted when callback is created\r\n    event CallbackCreated(address indexed lender);\r\n\r\n    /// @notice Emitted when callback is cancelled\r\n    event CallbackCancelled(address indexed lender);\r\n\r\n    /// @notice Emitted when pool is converted to public\r\n    event ConvertedToPublic();\r\n\r\n    /// @notice Emitted when pool is defaulted\r\n    event PoolDefaulted();\r\n\r\n    /// @notice Modifier to check if the caller is a prime member\r\n    modifier onlyPrime() {\r\n        _isPrimeMember(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the caller is a pool borrower\r\n    modifier onlyBorrower() {\r\n        require(msg.sender == borrower, \"NCR\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is not closed\r\n    modifier poolNotClosed() {\r\n        require(!isClosed, \"OAC\");\r\n        _;\r\n    }\r\n    /// @notice Modifier to check if the roll is requested\r\n    modifier rollRequested() {\r\n        require(isRollRequested, \"ARM\");\r\n        _;\r\n    }\r\n\r\n    /// @notice Modifier to check if the pool is not defaulted\r\n    modifier poolNotDefaulted() {\r\n        require(poolDefaultTimestamp == 0, \"PDD\");\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function __Pool_init(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) external initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        __Pool_init_unchained(\r\n            _borrower,\r\n            _spreadRate,\r\n            _originationRate,\r\n            _incrementPerRoll,\r\n            _poolData,\r\n            _members\r\n        );\r\n    }\r\n\r\n    /// @dev The __Pool_init_unchained sets initial parameters for the pool\r\n    /// @param _borrower The address of the borrower that created the pool\r\n    /// @param _spreadRate The rate at which protocol will earn spread\r\n    /// @param _originationRate The rate of yield enhancement intended to incentivize collateral providers\r\n    /// @param _incrementPerRoll - Pool rolling increment fee rate\r\n    /// @param _poolData Data regarding the pool\r\n    /// @param _members The list of members who rose the funds for the borrower\r\n    function __Pool_init_unchained(\r\n        address _borrower,\r\n        uint256 _spreadRate,\r\n        uint256 _originationRate,\r\n        uint256 _incrementPerRoll,\r\n        PoolData calldata _poolData,\r\n        bytes calldata _members\r\n    ) internal onlyInitializing {\r\n        /// @dev Fill pool data\r\n        borrower = _borrower;\r\n        asset = _poolData.asset;\r\n        maxSize = _poolData.size;\r\n        tenor = _poolData.tenor;\r\n        rateMantissa = _poolData.rateMantissa;\r\n        depositWindow = _poolData.depositWindow;\r\n        spreadRate = _spreadRate;\r\n        originationRate = _originationRate;\r\n        incrementPerRoll = _incrementPerRoll;\r\n\r\n        /// @dev Starting new rolls from 1\r\n        ++_nextRollId;\r\n\r\n        /// @dev Factory is caller of initializer\r\n        factory = IPoolFactory(msg.sender);\r\n\r\n        /// @dev Pool is available for all prime users if it is public\r\n        if (_members.length == 0) {\r\n            isPublic = true;\r\n        } else {\r\n            _parseLenders(true, _members);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function whitelistLenders(\r\n        bytes calldata lenders\r\n    ) external override onlyBorrower nonReentrant returns (bool success) {\r\n        require(lenders.length != 0, \"LLZ\");\r\n\r\n        /// @dev Pool converts to private if it is public\r\n        if (isPublic) {\r\n            isPublic = false;\r\n        }\r\n        _parseLenders(true, lenders);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function blacklistLenders(\r\n        bytes calldata lenders\r\n    ) external override onlyBorrower nonReentrant returns (bool success) {\r\n        require(lenders.length != 0, \"LLZ\");\r\n\r\n        _parseLenders(false, lenders);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function switchToPublic()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        require(!isPublic, \"AAD\");\r\n\r\n        isPublic = true;\r\n\r\n        emit ConvertedToPublic();\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function lend(\r\n        uint256 amount\r\n    )\r\n        external\r\n        override\r\n        nonReentrant\r\n        onlyPrime\r\n        nonZeroValue(amount)\r\n        poolNotClosed\r\n        poolNotDefaulted\r\n        returns (bool success)\r\n    {\r\n        return _lend(amount, msg.sender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function repay(\r\n        address lender\r\n    )\r\n        external\r\n        override\r\n        onlyBorrower\r\n        nonZeroAddress(lender)\r\n        poolNotDefaulted\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        return _repay(lender);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function repayAll()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        poolNotDefaulted\r\n        nonReentrant\r\n        returns (bool success)\r\n    {\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            _repay(_lenders[i]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function requestCallBack()\r\n        external\r\n        override\r\n        onlyPrime\r\n        poolNotDefaulted\r\n        poolNotClosed\r\n        returns (bool success)\r\n    {\r\n        /// @dev Lender should have principal\r\n        require(poolMembers[msg.sender].principal != 0, \"LZL\");\r\n\r\n        /// @dev Lender should not have created callback\r\n        require(!_poolCallbacks[msg.sender].isCreated, \"AAD\");\r\n\r\n        /// @dev Callback can be created only before the maturity date\r\n        require(maturityDate > block.timestamp, \"EMD\");\r\n\r\n        /// @dev If last lender requests callback and roll is requested\r\n        /// @dev then roll is rejected\r\n        if (isRollRequested) {\r\n            _rejectRoll();\r\n        }\r\n\r\n        /// @dev Increases the number of active callbacks\r\n        _activeCallbacksCount++;\r\n\r\n        /// @dev Saves callback as a struct\r\n        _poolCallbacks[msg.sender] = CallBack(true, block.timestamp);\r\n\r\n        emit CallbackCreated(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function cancelCallBack()\r\n        external\r\n        override\r\n        poolNotDefaulted\r\n        onlyPrime\r\n        returns (bool success)\r\n    {\r\n        /// @dev Lender should have created callback\r\n        require(_poolCallbacks[msg.sender].isCreated, \"AAD\");\r\n\r\n        /// @dev Removes callback\r\n        delete _poolCallbacks[msg.sender];\r\n\r\n        emit CallbackCancelled(msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function requestRoll()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        poolNotDefaulted\r\n        poolNotClosed\r\n    {\r\n        /// @dev Roll should be requested\r\n        require(!isRollRequested, \"RAR\");\r\n\r\n        /// @dev Roll can be requested only if there is one active lender and no active callbacks\r\n        require(_activeLendersCount == 1, \"RCR\");\r\n\r\n        /// @dev New roll can be activated only after deposit window until 48 hours before the maturity date\r\n        require(\r\n            block.timestamp > depositMaturity &&\r\n                block.timestamp > _poolRolls[activeRollId].startDate &&\r\n                block.timestamp < maturityDate - 48 hours,\r\n            \"RTR\"\r\n        );\r\n\r\n        isRollRequested = true;\r\n\r\n        emit RollRequested(_nextRollId);\r\n    }\r\n\r\n    function acceptRoll()\r\n        external\r\n        override\r\n        onlyPrime\r\n        rollRequested\r\n        poolNotClosed\r\n        poolNotDefaulted\r\n    {\r\n        /// @dev Lender can accept roll only before it starts\r\n        require(block.timestamp < maturityDate, \"RTR\");\r\n\r\n        /// @dev Should be an authorized lender\r\n        require(poolMembers[msg.sender].principal != 0, \"IMB\");\r\n\r\n        /// @dev Roll can be accepted only if there is one active lender\r\n        require(_activeLendersCount == 1, \"RCR\");\r\n\r\n        isRollRequested = false; // renew request status\r\n\r\n        /// @dev Get the current roll id\r\n        uint256 currentRollId = _nextRollId;\r\n\r\n        /// @dev Increment the rolls counter\r\n        ++_nextRollId;\r\n\r\n        /// @dev Update the roll id tracker\r\n        activeRollId = currentRollId;\r\n\r\n        /// @dev Save the new roll as Roll struct\r\n        _poolRolls[currentRollId] = Roll(maturityDate, maturityDate + tenor);\r\n\r\n        /// @dev Prolongate the maturity date\r\n        maturityDate += tenor;\r\n\r\n        emit RollAccepted(currentRollId, maturityDate);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function markPoolDefaulted() external poolNotClosed poolNotDefaulted {\r\n        /// @dev Governor is able to mark pool as defaulted through the Factory\r\n        if (msg.sender != address(factory)) {\r\n            /// @dev Lender or the borrower with loan can mark pool as defaulted\r\n            _isPrimeMember(msg.sender);\r\n\r\n            if (msg.sender != borrower) {\r\n                /// @dev Lender should have principal\r\n                require(poolMembers[msg.sender].principal != 0, \"IMB\");\r\n            }\r\n\r\n            /// @dev Pool can be marked as defaulted by lender only after (72 hours + maturity date)\r\n            require(\r\n                block.timestamp > maturityDate &&\r\n                    block.timestamp - maturityDate > 72 hours,\r\n                \"EDR\"\r\n            );\r\n        }\r\n\r\n        /// @dev Set the pool default timestamp\r\n        poolDefaultTimestamp = block.timestamp;\r\n\r\n        emit PoolDefaulted();\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function close()\r\n        external\r\n        override\r\n        onlyBorrower\r\n        poolNotClosed\r\n        returns (bool success)\r\n    {\r\n        /// @dev The pool can be closed only if it's size is 0\r\n        require(currentSize == 0, \"OHD\");\r\n        _close();\r\n        return true;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function totalDue()\r\n        external\r\n        view\r\n        override\r\n        returns (uint256 totalDueAmount)\r\n    {\r\n        /// @dev Gas optimization\r\n        uint256 lendersLength = _lenders.length;\r\n        for (uint256 i = 0; i < lendersLength; ++i) {\r\n            /// @dev Second variable is spread amount, it is already included in lender's due\r\n            (uint256 due, , uint256 originationFee) = dueOf(_lenders[i]);\r\n            totalDueAmount += due + originationFee;\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function dueOf(\r\n        address lender\r\n    )\r\n        public\r\n        view\r\n        override\r\n        returns (uint256 due, uint256 spreadAmount, uint256 originationFee)\r\n    {\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If principal is zero, due is zero too\r\n        if (member.principal == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n\r\n        /// @dev Define the lender's active timestamp and origination fee if any\r\n        uint256 principalPaymentTimestamp;\r\n        (principalPaymentTimestamp, originationFee) = _getTimestampAndOrigFee(\r\n            lender\r\n        );\r\n\r\n        uint256 principalPlusInterest = _principalPlusInterest(\r\n            lender,\r\n            principalPaymentTimestamp\r\n        );\r\n        /// @dev Due calculation. due == principal + interest + penalty + originationFee\r\n        due = principalPlusInterest + _getPenaltyFee(lender, maturityDate);\r\n        /// @dev Calculate spread amount\r\n        /// @dev SpreadAmount = spreadRate * (loanAmount * annualBorrowAPR)\r\n        /// @dev SpreadAmount = spreadRate * (principalPlusInterest - principal)\r\n        /// @dev SpreadAmount = spreadRate * (interest)\r\n        spreadAmount =\r\n            (spreadRate * (principalPlusInterest - member.principal)) /\r\n            1e18;\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function balanceOf(address lender) public view override returns (uint256) {\r\n        /// @dev If principal is zero, balance is zero too\r\n        if (poolMembers[lender].principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        return _principalPlusInterest(lender, block.timestamp);\r\n    }\r\n\r\n    /// @inheritdoc IPool\r\n    function penaltyOf(address lender) public view override returns (uint256) {\r\n        /// @dev In common case, penalty starts from maturity date\r\n        return _getPenaltyFee(lender, maturityDate);\r\n    }\r\n\r\n    /// @notice Returns Prime address\r\n    /// @dev Prime converted as IPrime interface\r\n    /// @return primeInstance - Prime address\r\n    function prime() public view returns (IPrime primeInstance) {\r\n        /// @dev Factory should keep actual link to Prime\r\n        return factory.prime();\r\n    }\r\n\r\n    /// @notice Parses the members encoded in bytes and calls _parseLender() for each member\r\n    /// @dev Internal function\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    /// @param members - The encoded members bytes\r\n    function _parseLenders(\r\n        bool isWhitelistOperation,\r\n        bytes calldata members\r\n    ) internal {\r\n        if (members.length == 20) {\r\n            _parseLender(\r\n                isWhitelistOperation,\r\n                AddressCoder.decodeAddress(members)[0]\r\n            );\r\n        } else {\r\n            address[] memory addresses = AddressCoder.decodeAddress(members);\r\n            uint256 length = addresses.length;\r\n\r\n            require(length <= 60, \"EAL\");\r\n\r\n            for (uint256 i = 0; i < length; i++) {\r\n                _parseLender(isWhitelistOperation, addresses[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Creates lender if not exists and updates the whitelist status\r\n    /// @dev Internal function\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    /// @param member - The address of the lender\r\n    function _parseLender(bool isWhitelistOperation, address member) internal {\r\n        _isPrimeMember(member);\r\n\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage memberStruct = poolMembers[member];\r\n\r\n        /// @dev Whitelist Lender\r\n        if (isWhitelistOperation) {\r\n            /// @dev Creates member if not exists\r\n            if (!memberStruct.isCreated) {\r\n                _initLender(member, true);\r\n            } else {\r\n                /// @dev Whitelists member if it is not whitelisted\r\n                memberStruct.isWhitelisted = true;\r\n            }\r\n\r\n            emit LenderWhitelisted(member);\r\n        } else {\r\n            /// @dev If we blacklist a lender, it should exist\r\n            require(memberStruct.isCreated, \"IMB\");\r\n\r\n            memberStruct.isWhitelisted = false;\r\n\r\n            emit LenderBlacklisted(member);\r\n        }\r\n    }\r\n\r\n    /// @dev Creates lender if not exists and updates the whitelist status\r\n    /// @param member - The address of the lender\r\n    /// @param isWhitelistOperation - True if the operation is a whitelist operation\r\n    function _initLender(address member, bool isWhitelistOperation) internal {\r\n        /// @dev Creates lender if not exists\r\n        if (!poolMembers[member].isCreated) {\r\n            /// @dev Borrower cannot be a lender\r\n            require(borrower != member, \"BLS\");\r\n            /// @dev Init struct for lender's data\r\n            poolMembers[member] = Member(\r\n                true,\r\n                isWhitelistOperation,\r\n                0,\r\n                0,\r\n                1e18\r\n            );\r\n            _lenders.push(member);\r\n        }\r\n    }\r\n\r\n    /// @notice Lends funds to the pool\r\n    /// @dev Internal function\r\n    /// @param amount - Amount of funds to lend\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the funds are lent\r\n    function _lend(\r\n        uint256 amount,\r\n        address lender\r\n    ) internal returns (bool success) {\r\n        /// @dev New size of the pool shouldn't be greater than max allowed size\r\n        require(currentSize + amount <= maxSize, \"OSE\");\r\n\r\n        /// @dev Gas saving link to lender's member struct\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev If roll is public, we should create it's data structure\r\n        if (isPublic) {\r\n            _initLender(lender, true);\r\n        } else {\r\n            /// @dev If roll is private, lender should be whitelisted\r\n            require(member.isWhitelisted, \"IMB\");\r\n        }\r\n\r\n        /// @dev If depositMaturity is zero, it means that the pool is not activated yet\r\n        if (depositMaturity == 0) {\r\n            /// @dev Set depositMaturity and maturityDate\r\n            depositMaturity = block.timestamp + depositWindow;\r\n            maturityDate = block.timestamp + tenor;\r\n            emit Activated(depositMaturity, maturityDate);\r\n        } else {\r\n            require(block.timestamp <= depositMaturity, \"DWC\");\r\n        }\r\n        /// @dev Increase pool size, lender's deposit and active lenders count\r\n        currentSize += amount;\r\n        _poolDeposits[lender] += amount;\r\n\r\n        if (member.principal == 0) {\r\n            ++_activeLendersCount;\r\n        }\r\n\r\n        /// @dev Update lender's member struct\r\n        member.principal = balanceOf(lender) + amount;\r\n        member.supplyIndex = _getSupplyIndex(lender, block.timestamp);\r\n        member.accrualTs = block.timestamp;\r\n\r\n        emit Lent(lender, amount);\r\n\r\n        return IERC20Lite(asset).transferFrom(lender, borrower, amount);\r\n    }\r\n\r\n    /// @notice Repays the lender\r\n    /// @dev Internal function\r\n    /// @param lender - Lender address\r\n    /// @return success - True if the lender is repaid\r\n    function _repay(address lender) internal returns (bool success) {\r\n        /// @dev Short circuit for non lenders\r\n        if (poolMembers[lender].principal == 0) {\r\n            return true;\r\n        }\r\n        /// @dev Member struct link\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /// @dev Calculate the amount of funds to repay\r\n        (\r\n            uint256 memberDueAmount,\r\n            uint256 spreadFee,\r\n            uint256 originationFee\r\n        ) = dueOf(lender);\r\n\r\n        /// @dev Cleanup lender callbacks\r\n        if (_poolCallbacks[lender].isCreated) {\r\n            _poolCallbacks[lender].isCreated = false;\r\n        }\r\n\r\n        /// @dev Cleanup lender roll\r\n        if (activeRollId != 0) {\r\n            activeRollId = 0;\r\n        }\r\n\r\n        /// @dev Remove lender's deposit from the pool\r\n        currentSize -= _poolDeposits[lender];\r\n\r\n        /// @dev Cleanup deposited amount for lender\r\n        delete _poolDeposits[lender];\r\n\r\n        /// @dev Emit repay event before potential pool closure\r\n        emit Repayed(lender, memberDueAmount, spreadFee, originationFee);\r\n\r\n        /// @dev Cleanup member struct\r\n        member.principal = 0;\r\n        member.accrualTs = block.timestamp;\r\n        --_activeLendersCount;\r\n\r\n        /// @dev Close pool if it is empty and deposit window is over\r\n        if (currentSize == 0 && depositMaturity <= block.timestamp) {\r\n            _close();\r\n        }\r\n\r\n        uint256 totalFees = spreadFee + originationFee;\r\n\r\n        /// @dev Treasury is always not zero address. Pay protocol fees if any\r\n        if (totalFees != 0) {\r\n            require(\r\n                IERC20Lite(asset).transferFrom(\r\n                    msg.sender,\r\n                    prime().treasury(),\r\n                    totalFees\r\n                ),\r\n                \"TFL\"\r\n            );\r\n        }\r\n        return\r\n            IERC20Lite(asset).transferFrom(\r\n                msg.sender,\r\n                lender,\r\n                memberDueAmount - spreadFee\r\n            );\r\n    }\r\n\r\n    /// @dev Rejects the roll\r\n    function _rejectRoll() internal {\r\n        isRollRequested = false;\r\n        emit RollRejected(_nextRollId, msg.sender);\r\n    }\r\n\r\n    /// @dev Closes the pool\r\n    function _close() internal {\r\n        isClosed = true;\r\n        emit Closed();\r\n    }\r\n\r\n    /// @notice Calculates index for supply interest\r\n    /// @dev Internal function\r\n    /// @param lender - The address of the lender\r\n    /// @param timestamp - The timestamp for which the index is calculated\r\n    function _getSupplyIndex(\r\n        address lender,\r\n        uint256 timestamp\r\n    ) internal view returns (uint256 newSupplyIndex) {\r\n        Member storage member = poolMembers[lender];\r\n\r\n        /* Short-circuit accumulating 0 interest */\r\n        if (member.accrualTs == timestamp || member.accrualTs == 0) {\r\n            return member.supplyIndex;\r\n        }\r\n\r\n        if (timestamp > maturityDate) {\r\n            timestamp = maturityDate;\r\n        }\r\n\r\n        uint256 timeDelta = timestamp - member.accrualTs;\r\n        uint256 currentRateMantissa = _annualRate(rateMantissa, timeDelta);\r\n        /// @dev newSupplyIndex = (rateMantissa + 1) * supplyIndex / divisor\r\n        return\r\n            (currentRateMantissa * member.supplyIndex) /\r\n            1e18 +\r\n            member.supplyIndex;\r\n    }\r\n\r\n    /// @dev Calculates principal + interest\r\n    /// @param lender - The address of the lender\r\n    /// @param timestamp - The timestamp for which the supply index is calculated\r\n    function _principalPlusInterest(\r\n        address lender,\r\n        uint256 timestamp\r\n    ) internal view returns (uint256 principalPlusInterest) {\r\n        Member storage member = poolMembers[lender];\r\n        uint256 supplyIndex = _getSupplyIndex(lender, timestamp);\r\n        return (supplyIndex * member.principal) / member.supplyIndex;\r\n    }\r\n\r\n    /// @dev Calculates principal timestamp and origination fee\r\n    /// @param lender - The address of the lender\r\n    function _getTimestampAndOrigFee(\r\n        address lender\r\n    ) internal view returns (uint256 timestamp, uint256 originationFee) {\r\n        Member storage member = poolMembers[lender];\r\n\r\n        uint256 unusedTime;\r\n\r\n        /// @dev Check if the specified lender has rejected the roll in progress. It decreases lender's credit score.\r\n        if (_poolCallbacks[lender].isCreated) {\r\n            /// @dev If callback is created, timestamp is calculated to the current time.\r\n            timestamp = block.timestamp;\r\n            /// @dev If first roll rejected, not all origination fee is used.\r\n            if (_nextRollId == 1 && maturityDate > block.timestamp) {\r\n                /// @dev Borrower should have a discount if lender has created callback.\r\n                unusedTime = maturityDate - block.timestamp;\r\n                /// @dev In other cases unused origination fee is zero.\r\n            }\r\n        } else {\r\n            /// @dev If lender hasn't created callback, his due is calculated from the maturity date\r\n            timestamp = maturityDate;\r\n        }\r\n\r\n        if (originationRate != 0) {\r\n            /// @dev origination fee  == (principal * [annual origination rate of funds used])\r\n            originationFee =\r\n                (member.principal *\r\n                    (_annualRate(originationRate, tenor - unusedTime))) /\r\n                1e18;\r\n\r\n            // rollingOriginationFeeAmount\r\n            // == originationFeeAmount + (( incrementPerRoll * originationFeeAmount )*( timeElapsed/time ))\r\n            if (_nextRollId != 1) {\r\n                if (_poolCallbacks[lender].isCreated) {\r\n                    /// @dev If Callback been requested, origination fee is calculated from the start of the roll\r\n                    /// @dev [times of tenor passed from maturity date] == (daysPassed) / tenor\r\n                    /// @dev Summ origination fee with rolling origination fee\r\n                    originationFee +=\r\n                        (\r\n                            (originationFee *\r\n                                incrementPerRoll *\r\n                                (block.timestamp -\r\n                                    _poolRolls[activeRollId].startDate))\r\n                        ) /\r\n                        (tenor * 1e18); // 1e18 is divisor from incrementPerRoll\r\n                } else {\r\n                    originationFee +=\r\n                        (originationFee *\r\n                            incrementPerRoll *\r\n                            (_nextRollId - 1)) / // originationFeeAmount // incrementPerRoll\r\n                        1e18; // rolls count\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates penalty fee for the lender\r\n    /// @dev Internal function\r\n    /// @param lender - The address of the lender\r\n    /// @param startingDate - The timestamp from which the penalty fee is calculated\r\n    function _getPenaltyFee(\r\n        address lender,\r\n        uint256 startingDate\r\n    ) internal view returns (uint256 penaltyFee) {\r\n        /// @dev If principal is zero, no penalty fee is charged\r\n        if (poolMembers[lender].principal == 0) {\r\n            return 0;\r\n        }\r\n\r\n        /// @dev In common case, penalty fee is calculated to the current time\r\n        uint256 endingDate = block.timestamp;\r\n\r\n        if (poolDefaultTimestamp != 0) {\r\n            /// @dev If pool is defaulted, penalty fee is calculated to the default date\r\n            endingDate = poolDefaultTimestamp;\r\n        }\r\n\r\n        /// @dev Calculate penalty fee only if pool is overdue or defaulted\r\n        if (endingDate > startingDate) {\r\n            uint256 penaltyRateMantissa = prime().penaltyRate(\r\n                endingDate - startingDate\r\n            );\r\n\r\n            /// @dev If penalty rate is zero, no penalty fee is charged\r\n            if (penaltyRateMantissa == 0) {\r\n                return 0;\r\n            }\r\n\r\n            /// @dev Penalty fee == (penaltyRateForTime * principal)\r\n            /// @dev function callable only if principal is not zero\r\n            return (penaltyRateMantissa * poolMembers[lender].principal) / 1e18;\r\n        } else {\r\n            /// @dev Else return zero\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /// @notice Calculates the annual rate for a given interest rate and specific interval\r\n    /// @param _rateMantissa The interest rate as a mantissa between [0, 1e18]\r\n    /// @param _timeDelta The interval in seconds\r\n    /// @return rate as a mantissa between [0, 1e18]\r\n    function _annualRate(\r\n        uint256 _rateMantissa,\r\n        uint256 _timeDelta\r\n    ) internal pure returns (uint256) {\r\n        return (_rateMantissa * _timeDelta) / YEAR;\r\n    }\r\n\r\n    /// @dev Checks if the address is a prime member\r\n    /// @param _member - The address of the member\r\n    function _isPrimeMember(address _member) internal view {\r\n        require(prime().isMember(_member), \"NPM\");\r\n    }\r\n}\r\n"
    },
    "contracts/Pool/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {IPoolFactory} from \"./IPoolFactory.sol\";\r\nimport {IPrime} from \"../PrimeMembership/IPrime.sol\";\r\nimport {Pool, IPool} from \"./Pool.sol\";\r\n\r\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {ReentrancyGuardUpgradeable} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport {BeaconProxy} from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\r\n\r\nimport {NZAGuard} from \"../utils/NZAGuard.sol\";\r\n\r\n/// @title Prime PoolFactory contract is responsible for creating new pools\r\ncontract PoolFactory is\r\n    IPoolFactory,\r\n    Initializable,\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    NZAGuard\r\n{\r\n    /// @notice Prime contract address\r\n    IPrime public prime;\r\n\r\n    /// @notice Beacon address for pool proxy pattern\r\n    address public poolBeacon;\r\n\r\n    /// @notice Array of pool addresses\r\n    address[] public pools;\r\n\r\n    /// @notice Emitted when prime contract address is changed\r\n    event PrimeContractChanged(address oldAddress, address newAddress);\r\n\r\n    /// @notice Emitted when pool beacon address is changed\r\n    event PoolBeaconChanged(address oldAddress, address newAddress);\r\n\r\n    /// @notice Emitted when a new pool is created\r\n    event PoolCreated(\r\n        address pool,\r\n        address indexed borrower,\r\n        address indexed asset,\r\n        uint256 size,\r\n        uint256 rateMantissa,\r\n        uint256 tenor,\r\n        uint256 depositWindow,\r\n        uint256 spreadRate,\r\n        uint256 originationRate\r\n    );\r\n\r\n    /// @notice Modifier to check if the caller is a prime member\r\n    modifier onlyPrime() {\r\n        _isPrimeMember(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /// @inheritdoc IPoolFactory\r\n    function __PoolFactory_init(\r\n        address _prime,\r\n        address _poolBeacon\r\n    )\r\n        external\r\n        override\r\n        nonZeroAddress(_prime)\r\n        nonZeroAddress(_poolBeacon)\r\n        initializer\r\n    {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        prime = IPrime(_prime);\r\n        poolBeacon = _poolBeacon;\r\n    }\r\n\r\n    /// @inheritdoc IPoolFactory\r\n    function createPool(\r\n        IPool.PoolData calldata pooldata,\r\n        bytes calldata members\r\n    )\r\n        external\r\n        override\r\n        onlyPrime\r\n        nonZeroAddress(pooldata.asset)\r\n        nonZeroValue(pooldata.size)\r\n    {\r\n        /// @dev Tenor should be greater than 48 hours and greater than deposit window\r\n        require(pooldata.depositWindow > 1 hours, \"UTR\");\r\n        require(pooldata.tenor > pooldata.depositWindow + 48 hours, \"DET\");\r\n        require(prime.isAssetAvailable(pooldata.asset), \"AAI\");\r\n\r\n        /// @dev Fetches spread, origination rate and rolling increment from prime contract\r\n        uint256 spreadRate = prime.spreadRate();\r\n        uint256 originationRate = prime.originationRate();\r\n        uint256 incrementPerRoll = prime.incrementPerRoll();\r\n\r\n        /// @dev Creates a pool using beacon proxy pattern\r\n        address pool = address(new BeaconProxy(poolBeacon, \"\"));\r\n\r\n        /// @dev Initializes the pool according to the pool beacon pattern\r\n        IPool(pool).__Pool_init(\r\n            msg.sender,\r\n            spreadRate,\r\n            originationRate,\r\n            incrementPerRoll,\r\n            pooldata,\r\n            members\r\n        );\r\n\r\n        pools.push(pool);\r\n\r\n        emit PoolCreated(\r\n            pool,\r\n            msg.sender,\r\n            pooldata.asset,\r\n            pooldata.size,\r\n            pooldata.rateMantissa,\r\n            pooldata.tenor,\r\n            pooldata.depositWindow,\r\n            spreadRate,\r\n            originationRate\r\n        );\r\n    }\r\n\r\n    /// @notice Marks the pools as defaulted\r\n    /// @dev Callable only by owner\r\n    function defaultPools(address[] calldata _pools) external onlyOwner {\r\n        uint256 length = _pools.length;\r\n        for (uint256 i = 0; i < length; ++i) {\r\n            IPool(_pools[i]).markPoolDefaulted();\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the pools array\r\n    /// @return Array of pool addresses\r\n    function getPools() external view returns (address[] memory) {\r\n        return pools;\r\n    }\r\n\r\n    /// @notice Changes the prime contract address\r\n    /// @dev Callable only by owner\r\n    /// @param newAddress New prime contract address\r\n    function setPrimeContract(\r\n        address newAddress\r\n    )\r\n        external\r\n        nonZeroAddress(newAddress)\r\n        nonSameAddress(newAddress, address(prime))\r\n        onlyOwner\r\n    {\r\n        address currentAddress = address(prime);\r\n\r\n        prime = IPrime(newAddress);\r\n        emit PrimeContractChanged(currentAddress, newAddress);\r\n    }\r\n\r\n    /// @notice Changes the pool beacon address\r\n    /// @dev Callable only by owner\r\n    /// @param _newPoolBeacon New pool beacon address\r\n    function setPoolBeacon(\r\n        address _newPoolBeacon\r\n    )\r\n        external\r\n        nonZeroAddress(_newPoolBeacon)\r\n        nonSameAddress(_newPoolBeacon, poolBeacon)\r\n        onlyOwner\r\n    {\r\n        address currentAddress = poolBeacon;\r\n        poolBeacon = _newPoolBeacon;\r\n\r\n        emit PoolBeaconChanged(currentAddress, _newPoolBeacon);\r\n    }\r\n\r\n    /// @notice Checks if the caller is a prime member\r\n    /// @dev Internal function, reverts if the caller is not a prime member\r\n    /// @param _member Member address\r\n    function _isPrimeMember(address _member) internal view {\r\n        require(prime.isMember(_member), \"NPM\");\r\n    }\r\n}\r\n"
    },
    "contracts/PrimeMembership/Asset.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.17;\n\nlibrary Asset {\n    struct Data {\n        mapping(address => bool) flags;\n        mapping(address => uint256) addressIndex;\n        address[] addresses;\n        uint256 id;\n    }\n\n    function insert(Data storage self, address asset) internal returns (bool) {\n        if (self.flags[asset]) {\n            return false;\n        }\n\n        self.flags[asset] = true;\n        self.addresses.push(asset);\n        self.addressIndex[asset] = self.id;\n        self.id++;\n        return true;\n    }\n\n    function contains(\n        Data storage self,\n        address asset\n    ) internal view returns (bool) {\n        return self.flags[asset];\n    }\n\n    function getList(\n        Data storage self\n    ) internal view returns (address[] memory) {\n        return self.addresses;\n    }\n}\n"
    },
    "contracts/PrimeMembership/IPrime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title Interface of the Prime membership contract\r\n */\r\ninterface IPrime {\r\n    /// @notice Member status enum\r\n    enum MemberStatus {\r\n        PENDING,\r\n        WHITELISTED,\r\n        BLACKLISTED\r\n    }\r\n\r\n    /// @notice A record of member info\r\n    struct Member {\r\n        uint256 riskScore;\r\n        MemberStatus status;\r\n        bool created;\r\n    }\r\n\r\n    /**\r\n     * @notice Check membership status for a given `_member`\r\n     * @param _member The address of member\r\n     * @return Boolean flag containing membership status\r\n     */\r\n    function isMember(address _member) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Calculates the penalty rate for a given interval\r\n     * @param interval The interval in seconds\r\n     * @return The penalty rate as a mantissa between [0, 1e18]\r\n     */\r\n    function penaltyRate(uint256 interval) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Check Stablecoin existence for a given `asset` address\r\n     * @param asset The address of asset\r\n     * @return Boolean flag containing asset availability\r\n     */\r\n    function isAssetAvailable(address asset) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Get membership info for a given `_member`\r\n     * @param _member The address of member\r\n     * @return The member info struct\r\n     */\r\n    function membershipOf(\r\n        address _member\r\n    ) external view returns (Member memory);\r\n\r\n    /**\r\n     * @notice Returns current protocol rate value\r\n     * @return The protocol rate as a mantissa between [0, 1e18]\r\n     */\r\n    function spreadRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current originated fee value\r\n     * @return originated fee rate as a mantissa between [0, 1e18]\r\n     */\r\n    function originationRate() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current rolling increment fee\r\n     * @return rolling fee rate as a mantissa between [0, 1e18]\r\n     */\r\n    function incrementPerRoll() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns current protocol fee collector address\r\n     * @return address of protocol fee collector\r\n     */\r\n    function treasury() external view returns (address);\r\n}\r\n"
    },
    "contracts/PrimeMembership/Prime.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\nimport {IPrime} from \"./IPrime.sol\";\r\nimport {Asset} from \"./Asset.sol\";\r\n\r\nimport {NZAGuard} from \"../utils/NZAGuard.sol\";\r\n\r\n/// @title A contract for control Clearpool Prime membership database\r\ncontract Prime is Initializable, OwnableUpgradeable, IPrime, NZAGuard {\r\n    using Asset for Asset.Data;\r\n\r\n    /// @notice Standart year in seconds\r\n    uint256 public constant YEAR = 360 days;\r\n\r\n    /// @notice Setted penalty rate per year value\r\n    uint256 public penaltyRatePerYear;\r\n\r\n    /// @dev Protocol spread rate\r\n    uint256 public spreadRate; // from 0 (0%) to 1e18 (100%)\r\n\r\n    /// @notice Origination fee rate\r\n    uint256 public originationRate;\r\n\r\n    /// @notice Rolling increment rate for the origination fee\r\n    uint256 public incrementPerRoll;\r\n\r\n    /// @dev The address that will receive the fees\r\n    address public treasury;\r\n\r\n    /// @dev Data struct to simplify the operations with stablecoins addresses\r\n    Asset.Data private _stablecoins;\r\n\r\n    /// @dev A record of each member's info, by address\r\n    mapping(address => Member) private _members;\r\n\r\n    /// @notice An event that's emitted when a member is created\r\n    event MemberCreated(address indexed member);\r\n    /// @notice An event that's emitted when a member is whitelisted\r\n    event MemberWhitelisted(address indexed member);\r\n    /// @notice An event that's emitted when a member is blacklisted\r\n    event MemberBlacklisted(address indexed member);\r\n\r\n    /// @notice An event that's emitted when a member's riskScore is changed\r\n    event RiskScoreChanged(address indexed member, uint256 score);\r\n\r\n    /// @notice An event that's emitted when the value of the blocksPerDay is changed\r\n    event BlocksPerDayUpdated(uint256 oldValue, uint256 newValue);\r\n\r\n    /// @notice An event that's emitted when the value of the penaltyRatePerYear is changed\r\n    event PenaltyRatePerDayUpdated(uint256 oldValue, uint256 newValue);\r\n\r\n    /// @notice An event that's emitted when the value of the spreadRate is changed\r\n    event SpreadRateChanged(uint256 oldValue, uint256 newValue);\r\n\r\n    /// @notice An event that's emitted when the value of the treasury is changed\r\n    event TreasuryChanged(address oldValue, address newValue);\r\n\r\n    /// @notice Emitted when origination fee rate is changed\r\n    event OriginationRateChanged(uint256 oldFee, uint256 newFee);\r\n\r\n    /// @notice Emitted when rolling increment rate is changed\r\n    event RollingIncrementChanged(uint256 oldIncrement, uint256 newIncrement);\r\n\r\n    /// @dev Modifier for checking membership record availability\r\n    modifier onlyMember(address _member) {\r\n        require(_members[_member].created, \"NPM\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier for checking that risk score is in range of [1, 100]\r\n    modifier riskScoreInRange(uint256 _riskScore) {\r\n        require(_riskScore <= 100 && _riskScore > 0, \"RSI\");\r\n        _;\r\n    }\r\n\r\n    /// @dev Internal function to initialize the contract after it's been added to the proxy.\r\n    /// @dev It initializes the inherited contracts.\r\n    /// @param stablecoins An array of stablecoins addresses\r\n    /// @param treasury_ The address that will receive the fees\r\n    /// @param penaltyRatePerYear_ The penalty rate per year\r\n    function __Prime_init(\r\n        address[] memory stablecoins,\r\n        address treasury_,\r\n        uint256 penaltyRatePerYear_\r\n    ) external virtual initializer {\r\n        __Ownable_init_unchained();\r\n        __Prime_init_unchained(stablecoins, treasury_, penaltyRatePerYear_);\r\n    }\r\n\r\n    /// @dev Internal function to initialize the contract after it's been added to the proxy\r\n    /// @dev It initializes current contract with the given parameters.\r\n    /// @param stablecoins An array of stablecoins addresses\r\n    /// @param treasury_ The address that will receive the fees\r\n    /// @param penaltyRatePerYear_ The penalty rate per year\r\n    function __Prime_init_unchained(\r\n        address[] memory stablecoins,\r\n        address treasury_,\r\n        uint256 penaltyRatePerYear_\r\n    )\r\n        internal\r\n        nonZeroAddress(treasury_)\r\n        nonZeroValue(penaltyRatePerYear_)\r\n        initializer\r\n    {\r\n        treasury = treasury_;\r\n        penaltyRatePerYear = penaltyRatePerYear_;\r\n\r\n        for (uint256 i = 0; i < stablecoins.length; i++) {\r\n            require(_stablecoins.insert(stablecoins[i]), \"TIF\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IPrime\r\n     */\r\n    function isMember(address _member) external view override returns (bool) {\r\n        Member storage member = _members[_member];\r\n        return member.created && member.status == MemberStatus.WHITELISTED;\r\n        // TODO: implement check for riskScore\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IPrime\r\n     */\r\n    function penaltyRate(\r\n        uint256 interval\r\n    ) external view override returns (uint256 rate) {\r\n        return (penaltyRatePerYear * interval) / YEAR;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IPrime\r\n     */\r\n    function isAssetAvailable(\r\n        address asset\r\n    ) external view override nonZeroAddress(asset) returns (bool isAvailable) {\r\n        return _stablecoins.contains(asset);\r\n    }\r\n\r\n    /// @notice Returns an array of assets available for borrowing\r\n    /// @return An array of available assets\r\n    function availableAssets() external view returns (address[] memory) {\r\n        return _stablecoins.getList();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IPrime\r\n     */\r\n    function membershipOf(\r\n        address _member\r\n    ) external view override returns (Member memory member) {\r\n        return _members[_member];\r\n    }\r\n\r\n    /**\r\n     * @notice Request a membership record\r\n     *\r\n     *\r\n     * @dev Emits a {MemberCreated} event.\r\n     */\r\n    function requestMembership(\r\n        address _requester\r\n    ) public nonZeroAddress(_requester) {\r\n        require(!_members[_requester].created, \"MAC\");\r\n\r\n        _members[_requester] = Member(0, MemberStatus.PENDING, true);\r\n        emit MemberCreated(_requester);\r\n    }\r\n\r\n    /**\r\n     * @dev SHOULD BE DEPLOYED ON TESTNET ONLY\r\n     */\r\n    function whitelistMemberTestnet(\r\n        address _member\r\n    ) external nonZeroAddress(_member) {\r\n        _whitelistMember(_member, 1);\r\n    }\r\n\r\n    /**\r\n     * @notice Alter or creates membership record by setting `_member` status and `_riskScore`\r\n     * @param _member The member address\r\n     * @param _riskScore The number up to 100 representing member's score\r\n     *\r\n     * @dev Emits a {MemberCreated} event.\r\n     * @dev Emits a {MemberWhitelisted} event.\r\n     * @dev Emits a {RiskScoreChanged} event.\r\n     */\r\n    function whitelistMember(\r\n        address _member,\r\n        uint256 _riskScore\r\n    ) external nonZeroAddress(_member) riskScoreInRange(_riskScore) onlyOwner {\r\n        _whitelistMember(_member, _riskScore);\r\n    }\r\n\r\n    /// @dev Internal function that whitelists member\r\n    /// @param _member The member address\r\n    /// @param _riskScore The number up to 100 representing member's score\r\n    function _whitelistMember(address _member, uint256 _riskScore) internal {\r\n        Member storage member = _members[_member];\r\n\r\n        if (!member.created) {\r\n            requestMembership(_member);\r\n        }\r\n\r\n        require(member.status != MemberStatus.WHITELISTED, \"AAD\");\r\n\r\n        member.status = MemberStatus.WHITELISTED;\r\n        emit MemberWhitelisted(_member);\r\n\r\n        if (member.riskScore != _riskScore) {\r\n            member.riskScore = _riskScore;\r\n            emit RiskScoreChanged(_member, _riskScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Alter membership record by setting `_member` status\r\n     * @param _member The member address\r\n     *\r\n     * @dev Emits a {MemberBlacklisted} event.\r\n     */\r\n    function blacklistMember(\r\n        address _member\r\n    ) external nonZeroAddress(_member) onlyMember(_member) onlyOwner {\r\n        Member storage member = _members[_member];\r\n\r\n        require(member.status != MemberStatus.BLACKLISTED, \"AAD\");\r\n\r\n        member.status = MemberStatus.BLACKLISTED;\r\n        emit MemberBlacklisted(_member);\r\n    }\r\n\r\n    /**\r\n     * @notice Alter membership record by setting member `_riskScore`\r\n     * @param _member The member address\r\n     * @param _riskScore The number up to 100 representing member's score\r\n     *\r\n     * @dev Emits a {RiskScoreChanged} event.\r\n     */\r\n    function changeMemberRiskScore(\r\n        address _member,\r\n        uint256 _riskScore\r\n    )\r\n        external\r\n        nonZeroAddress(_member)\r\n        onlyMember(_member)\r\n        riskScoreInRange(_riskScore)\r\n        onlyOwner\r\n    {\r\n        Member storage member = _members[_member];\r\n        if (member.riskScore != _riskScore) {\r\n            member.riskScore = _riskScore;\r\n            emit RiskScoreChanged(_member, _riskScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the spread rate\r\n     * @dev Callable only by owner. It is a mantissa value, so 1e18 is 100%\r\n     * @param spreadRate_ New fee collector address\r\n     */\r\n    function changeSpreadRate(\r\n        uint256 spreadRate_\r\n    )\r\n        external\r\n        onlyOwner\r\n        nonMoreThenOne(spreadRate_)\r\n        nonSameValue(spreadRate_, spreadRate)\r\n    {\r\n        uint256 currentValue = spreadRate;\r\n        spreadRate = spreadRate_;\r\n        emit SpreadRateChanged(currentValue, spreadRate_);\r\n    }\r\n\r\n    /// @notice Changes the origination fee rate\r\n    /// @dev Callable only by owner\r\n    /// @param _originationRate New origination fee rate\r\n    function setOriginationRate(\r\n        uint256 _originationRate\r\n    )\r\n        external\r\n        onlyOwner\r\n        nonMoreThenOne(_originationRate)\r\n        nonSameValue(_originationRate, originationRate)\r\n    {\r\n        uint256 currentFee = originationRate;\r\n\r\n        originationRate = _originationRate;\r\n        emit OriginationRateChanged(currentFee, _originationRate);\r\n    }\r\n\r\n    /// @notice Changes the rolling increment fee rate\r\n    /// @dev Callable only by owner\r\n    /// @param _incrementPerRoll New origination fee rate\r\n    function setRollingIncrement(\r\n        uint256 _incrementPerRoll\r\n    )\r\n        external\r\n        onlyOwner\r\n        nonMoreThenOne(_incrementPerRoll)\r\n        nonSameValue(_incrementPerRoll, incrementPerRoll)\r\n    {\r\n        uint256 currentIncrement = incrementPerRoll;\r\n\r\n        incrementPerRoll = _incrementPerRoll;\r\n        emit OriginationRateChanged(currentIncrement, _incrementPerRoll);\r\n    }\r\n\r\n    /// @notice Sets a new treasury address for the contract\r\n    /// @dev Callable only by owner\r\n    /// @param treasury_ The address of the new treasury\r\n    function setTreasury(\r\n        address treasury_\r\n    )\r\n        external\r\n        nonZeroAddress(treasury_)\r\n        nonSameAddress(treasury_, treasury)\r\n        onlyOwner\r\n    {\r\n        address currentValue = treasury;\r\n\r\n        treasury = treasury_;\r\n        emit TreasuryChanged(currentValue, treasury_);\r\n    }\r\n\r\n    /// @notice Updates penalty rate per year value\r\n    /// @dev Callable only by owner\r\n    /// @param penaltyRatePerYear_ New penalty rate per year value\r\n    function updatePenaltyRatePerYear(\r\n        uint256 penaltyRatePerYear_\r\n    )\r\n        external\r\n        onlyOwner\r\n        nonZeroValue(penaltyRatePerYear_)\r\n        nonSameValue(penaltyRatePerYear_, penaltyRatePerYear)\r\n    {\r\n        uint256 currentValue = penaltyRatePerYear;\r\n\r\n        penaltyRatePerYear = penaltyRatePerYear_;\r\n        emit PenaltyRatePerDayUpdated(currentValue, penaltyRatePerYear_);\r\n    }\r\n}\r\n"
    },
    "contracts/utils/AddressCoder.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\npragma abicoder v2;\r\n\r\nlibrary AddressCoder {\r\n    function encodeAddress(\r\n        address[] calldata addresses\r\n    ) internal pure returns (bytes memory data) {\r\n        for (uint256 i = 0; i < addresses.length; i++) {\r\n            data = abi.encodePacked(data, addresses[i]);\r\n        }\r\n    }\r\n\r\n    function decodeAddress(\r\n        bytes calldata data\r\n    ) internal pure returns (address[] memory addresses) {\r\n        uint256 n = data.length / 20;\r\n        addresses = new address[](n);\r\n\r\n        for (uint256 i = 0; i < n; i++) {\r\n            addresses[i] = bytesToAddress(data[i * 20:(i + 1) * 20]);\r\n        }\r\n    }\r\n\r\n    function bytesToAddress(\r\n        bytes calldata data\r\n    ) private pure returns (address addr) {\r\n        bytes memory b = data;\r\n        assembly {\r\n            addr := mload(add(b, 20))\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Counters.sol\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        uint256 _value;\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/utils/NZAGuard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\r\npragma solidity 0.8.17;\r\n\r\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\r\nabstract contract NZAGuard {\r\n    modifier nonZeroAddress(address _address) {\r\n        require(_address != address(0), \"NZA\");\r\n        _;\r\n    }\r\n    modifier nonZeroValue(uint256 _value) {\r\n        require(_value != 0, \"ZVL\");\r\n        _;\r\n    }\r\n    modifier nonSameValue(uint256 _value1, uint256 _value2) {\r\n        require(_value1 != _value2, \"SVR\");\r\n        _;\r\n    }\r\n    modifier nonSameAddress(address _address1, address _address2) {\r\n        require(_address1 != _address2, \"SVA\");\r\n        _;\r\n    }\r\n    modifier nonMoreThenOne(uint256 _value) {\r\n        require(_value <= 1e18, \"UTR\");\r\n        _;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}