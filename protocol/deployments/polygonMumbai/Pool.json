{
  "address": "0xC968701912cC6Ef0b7d4A8C7C73752D8d9e4E448",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositMaturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "Activated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "CallbackCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "CallbackCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Closed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ConvertedToPublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Defaulted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LenderWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spreadFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "originationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "name": "Repayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "spreadFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "name": "RepayedInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaturity",
          "type": "uint256"
        }
      ],
      "name": "RollAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "RollRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rollId",
          "type": "uint256"
        }
      ],
      "name": "RollRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_spreadRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_originationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_incrementPerRoll",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_penaltyRatePerYear",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isBulletLoan",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "size",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tenor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rateMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositWindow",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPool.PoolData",
          "name": "_poolData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_members",
          "type": "bytes"
        }
      ],
      "name": "__Pool_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeRollId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "lenders",
          "type": "bytes"
        }
      ],
      "name": "blacklistLenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canBeDefaulted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAbleToDefault",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelCallBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "dueInterestOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "due",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spreadFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "dueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "due",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spreadFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "originationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IPoolFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNextPaymentTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payableToTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementPerRoll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isBulletLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRollRequested",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPaidTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lend",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "markPoolDefaulted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturityDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "originationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "penaltyOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "penaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyRatePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prime",
      "outputs": [
        {
          "internalType": "contract IPrime",
          "name": "primeInstance",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rateMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestCallBack",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spreadRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "switchToPublic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalDueAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "lenders",
          "type": "bytes"
        }
      ],
      "name": "whitelistLenders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fef7327028e880ed51f5a8795e3b0c3962b326961152d8630ffa5bc99d4fb89",
  "receipt": {
    "to": null,
    "from": "0xB3FFde53f0076295f2C183f13b4A07dE288Df61D",
    "contractAddress": "0xC968701912cC6Ef0b7d4A8C7C73752D8d9e4E448",
    "transactionIndex": 3,
    "gasUsed": "2835723",
    "logsBloom": "0x
    "blockHash": "0x508b35ab63fc74589624b27382e5f34fb44804deda3c256edcaa56bee3f8d790",
    "transactionHash": "0x3fef7327028e880ed51f5a8795e3b0c3962b326961152d8630ffa5bc99d4fb89",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 36547632,
        "transactionHash": "0x3fef7327028e880ed51f5a8795e3b0c3962b326961152d8630ffa5bc99d4fb89",
        "address": "0xC968701912cC6Ef0b7d4A8C7C73752D8d9e4E448",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 76,
        "blockHash": "0x508b35ab63fc74589624b27382e5f34fb44804deda3c256edcaa56bee3f8d790"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 36547632,
        "transactionHash": "0x3fef7327028e880ed51f5a8795e3b0c3962b326961152d8630ffa5bc99d4fb89",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b3ffde53f0076295f2c183f13b4a07de288df61d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001426266951c6450000000000000000000000000000000000000000000000000222f5a70e07d44e000000000000000000000000000000000000000000003213a3c341e061bc1e4f000000000000000000000000000000000000000000000000020ecf80a4b60e09000000000000000000000000000000000000000000003213a3d76806cb0de494",
        "logIndex": 77,
        "blockHash": "0x508b35ab63fc74589624b27382e5f34fb44804deda3c256edcaa56bee3f8d790"
      }
    ],
    "blockNumber": 36547632,
    "cumulativeGasUsed": "6106796",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8c5f1d733fcdadb859f8259dc1ed9ca5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositMaturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"Activated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"CallbackCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"CallbackCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConvertedToPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Defaulted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LenderWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spreadFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"Repayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spreadFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"name\":\"RepayedInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaturity\",\"type\":\"uint256\"}],\"name\":\"RollAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"RollRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rollId\",\"type\":\"uint256\"}],\"name\":\"RollRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_spreadRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_originationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incrementPerRoll\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_penaltyRatePerYear\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBulletLoan\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tenor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositWindow\",\"type\":\"uint256\"}],\"internalType\":\"struct IPool.PoolData\",\"name\":\"_poolData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_members\",\"type\":\"bytes\"}],\"name\":\"__Pool_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeRollId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lenders\",\"type\":\"bytes\"}],\"name\":\"blacklistLenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canBeDefaulted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAbleToDefault\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelCallBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"dueInterestOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"dueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"due\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextPaymentTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payableToTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementPerRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isBulletLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRollRequested\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPaidTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"markPoolDefaulted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"originationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"penaltyOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"penaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRatePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prime\",\"outputs\":[{\"internalType\":\"contract IPrime\",\"name\":\"primeInstance\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestCallBack\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spreadRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToPublic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDueAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"lenders\",\"type\":\"bytes\"}],\"name\":\"whitelistLenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Activated(uint256,uint256)\":{\"params\":{\"depositMaturity\":\"- Lender can deposit until this timestamp\",\"maturityDate\":\"- Borrower's maturity date (timestamp)\"}},\"RollAccepted(uint256,uint256)\":{\"params\":{\"newMaturity\":\"- New maturity date (timestamp)\",\"rollId\":\"- Id of the new roll\"}},\"RollRejected(uint256,address)\":{\"params\":{\"rollId\":\"- Id of the roll\",\"user\":\"- Address of the user who rejected the roll\"}},\"RollRequested(uint256)\":{\"params\":{\"rollId\":\"- Id of the roll\"}}},\"kind\":\"dev\",\"methods\":{\"__Pool_init(address,uint256,uint256,uint256,uint256,(bool,address,uint256,uint256,uint256,uint256),bytes)\":{\"details\":\"This function is called only once during the pool creation\",\"params\":{\"_borrower\":\"- Pool borrower address\",\"_incrementPerRoll\":\"- Pool rolling increment rate of origination fee\",\"_members\":\"- Pool members (lenders) addresses encoded in bytes\",\"_originationRate\":\"- Pool origination fee rate\",\"_penaltyRatePerYear\":\"- Pool penalty rate calculated for 1 year\",\"_poolData\":\"- Pool data struct: asset, size, tenor, rateMantissa, depositWindow\",\"_spreadRate\":\"- Pool protocol spread rate\"}},\"acceptRoll()\":{\"details\":\"Can be called only by the whitelisted Prime lenders\"},\"balanceOf(address)\":{\"params\":{\"lender\":\"- The address of the lender\"},\"returns\":{\"balance\":\"interestAccrued - Accrued amount until today\"}},\"blacklistLenders(bytes)\":{\"details\":\"Can be called only by the borrower\",\"params\":{\"lenders\":\"- Lenders addresses encoded in bytes\"}},\"canBeDefaulted()\":{\"returns\":{\"isAbleToDefault\":\"True if the pool can be defaulted\"}},\"cancelCallBack()\":{\"details\":\"Can be called only by the whitelisted Prime lenders\",\"returns\":{\"success\":\"- True if the callback is cancelled by the lender\"}},\"close()\":{\"details\":\"Can be called only by the borrower\",\"returns\":{\"success\":\"- True if the pool is closed\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"dueInterestOf(address)\":{\"params\":{\"lender\":\"The lender address\"},\"returns\":{\"due\":\"The interest amount\",\"penalty\":\"The penalty amount\",\"spreadFee\":\"The spread amount\"}},\"dueOf(address)\":{\"params\":{\"lender\":\"- The address of the lender\"},\"returns\":{\"due\":\"- Due amount for repayment\",\"originationFee\":\"- Origination protocol fee\",\"penalty\":\"- Penalty fee\",\"spreadFee\":\"- Protocol spread fee\"}},\"getNextPaymentTimestamp()\":{\"returns\":{\"payableToTimestamp\":\"- The timestamp of the next payment\"}},\"lend(uint256)\":{\"details\":\"Can be called only by the whitelisted Prime lenders\",\"params\":{\"amount\":\"- Amount of funds to lend\"},\"returns\":{\"success\":\"- True if the funds are lent\"}},\"markPoolDefaulted()\":{\"details\":\"Can be called only by lender or borrower if time conditions are metCan be called by governor without time conditions\"},\"penaltyOf(address)\":{\"params\":{\"lender\":\"- The address of the lender\"},\"returns\":{\"penalty\":\"penaltyFee - Penalty fee\"}},\"penaltyRate(uint256)\":{\"params\":{\"interval\":\"The interval in seconds\"},\"returns\":{\"_0\":\"The penalty rate as a mantissa between [0, 1e18]\"}},\"prime()\":{\"details\":\"Prime converted as IPrime interface\",\"returns\":{\"primeInstance\":\"- Prime address\"}},\"repay(address)\":{\"details\":\"Can be called only by the borrower\",\"params\":{\"lender\":\"- Lender address\"},\"returns\":{\"success\":\"- True if the lender is repaid\"}},\"repayAll()\":{\"details\":\"Can be called only by the borrower\",\"returns\":{\"success\":\"- True if all lenders are repaid\"}},\"repayInterest()\":{\"details\":\"Can be called only by the borrower in monthly loans\"},\"requestCallBack()\":{\"details\":\"Can be called only by the whitelisted Prime lenders\",\"returns\":{\"success\":\"- True if the callback is created by the lender\"}},\"requestRoll()\":{\"details\":\"Can be called only by the borrower\"},\"switchToPublic()\":{\"details\":\"Can be called only by the borrower\",\"returns\":{\"success\":\"- True if the pool is converted to public\"}},\"totalDue()\":{\"returns\":{\"totalDueAmount\":\"- Total due amount for repayment\"}},\"totalDueInterest()\":{\"returns\":{\"totalInterest\":\"The interest amount\"}},\"whitelistLenders(bytes)\":{\"details\":\"Can be called only by the borrower\",\"params\":{\"lenders\":\"- Lenders addresses encoded in bytes\"}}},\"title\":\"Pool contract is responsible for managing the pool\",\"version\":1},\"userdoc\":{\"events\":{\"Activated(uint256,uint256)\":{\"notice\":\"Emitted when the pool is activated\"},\"CallbackCancelled(address)\":{\"notice\":\"Emitted when callback is cancelled\"},\"CallbackCreated(address)\":{\"notice\":\"Emitted when callback is created\"},\"Closed()\":{\"notice\":\"Emitted when the pool is closed\"},\"ConvertedToPublic()\":{\"notice\":\"Emitted when pool is converted to public\"},\"Defaulted()\":{\"notice\":\"Emitted when pool is defaulted\"},\"LenderBlacklisted(address)\":{\"notice\":\"Emitted when lender is removed from the pool\"},\"LenderWhitelisted(address)\":{\"notice\":\"Emitted when new lender is added to the pool\"},\"Lent(address,uint256)\":{\"notice\":\"Emitted when funds are lent to the pool\"},\"Repayed(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when lender is fully repayed\"},\"RepayedInterest(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when interest is repayed to the lender\"},\"RollAccepted(uint256,uint256)\":{\"notice\":\"Emitted when the pool is rolled\"},\"RollRejected(uint256,address)\":{\"notice\":\"Emitted when the roll is rejected\"},\"RollRequested(uint256)\":{\"notice\":\"Emitted when the roll is requested\"}},\"kind\":\"user\",\"methods\":{\"YEAR()\":{\"notice\":\"Standart year in seconds\"},\"__Pool_init(address,uint256,uint256,uint256,uint256,(bool,address,uint256,uint256,uint256,uint256),bytes)\":{\"notice\":\"Initialize the pool\"},\"acceptRoll()\":{\"notice\":\"Accepts the roll\"},\"activeRollId()\":{\"notice\":\"Pool active roll id\"},\"asset()\":{\"notice\":\"Asset address of the pool\"},\"balanceOf(address)\":{\"notice\":\"Calculates the accrued amount until today, excluding penalty\"},\"blacklistLenders(bytes)\":{\"notice\":\"Blacklists lenders\"},\"borrower()\":{\"notice\":\"Pool borrower address\"},\"canBeDefaulted()\":{\"notice\":\"Checks if the pool can be defaulted by borrower or lender\"},\"cancelCallBack()\":{\"notice\":\"Cancels the callback\"},\"close()\":{\"notice\":\"Closes the pool\"},\"currentSize()\":{\"notice\":\"Pool current size\"},\"defaultedAt()\":{\"notice\":\"If pool is defaulted, this is the timestamp of the default\"},\"depositMaturity()\":{\"notice\":\"Pool deposit maturity\"},\"depositWindow()\":{\"notice\":\"Pool deposit window (in seconds)\"},\"dueInterestOf(address)\":{\"notice\":\"Calculates the total interest and penalty for the next payment to the lender\"},\"dueOf(address)\":{\"notice\":\"Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\"},\"factory()\":{\"notice\":\"Pool factory address\"},\"getNextPaymentTimestamp()\":{\"notice\":\"Calculates the next payment timestamp for the borrower\"},\"incrementPerRoll()\":{\"notice\":\"Pool rolling increment fee rate\"},\"isBulletLoan()\":{\"notice\":\"Pool repayment option. Bullet loan or monthly repayment\"},\"isClosed()\":{\"notice\":\"Pool availability status\"},\"isPublic()\":{\"notice\":\"Pool publicity status\"},\"isRollRequested()\":{\"notice\":\"Roll request status\"},\"lastPaidTimestamp()\":{\"notice\":\"The last timestamp at which a payment was made or received in monthly repayment pool.\"},\"lend(uint256)\":{\"notice\":\"Lends funds to the pool\"},\"markPoolDefaulted()\":{\"notice\":\"Defaults the pool\"},\"maturityDate()\":{\"notice\":\"Pool maturity date\"},\"maxSize()\":{\"notice\":\"Pool maximum size\"},\"originationRate()\":{\"notice\":\"Origination fee rate\"},\"penaltyOf(address)\":{\"notice\":\"When maturity date passed, calculates the penalty fee for the lender\"},\"penaltyRate(uint256)\":{\"notice\":\"Calculates the penalty rate for a given interval\"},\"penaltyRatePerYear()\":{\"notice\":\"Pool penalty rate calculated for 1 year\"},\"prime()\":{\"notice\":\"Returns Prime address\"},\"rateMantissa()\":{\"notice\":\"Pool interest rate (in mantissa)\"},\"repay(address)\":{\"notice\":\"Fully repays the lender with the principal and interest\"},\"repayAll()\":{\"notice\":\"Repays all lenders with the principal and interest\"},\"repayInterest()\":{\"notice\":\"Repays interest to the lender\"},\"requestCallBack()\":{\"notice\":\"Creates the callback\"},\"requestRoll()\":{\"notice\":\"Requests the roll\"},\"spreadRate()\":{\"notice\":\"Protocol spread rate\"},\"switchToPublic()\":{\"notice\":\"Converts the pool to public\"},\"tenor()\":{\"notice\":\"Pool tenor\"},\"totalDue()\":{\"notice\":\"Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\"},\"totalDueInterest()\":{\"notice\":\"Calculates the total interest and penalty amount for the next payment for all lenders\"},\"whitelistLenders(bytes)\":{\"notice\":\"Whitelists lenders\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"contracts/Pool/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\n/// @title Prime IPool contract interface\\ninterface IPool {\\n  /// @notice Pool member data struct\\n  struct Member {\\n    bool isCreated; // True if the member is created\\n    bool isWhitelisted; // True if the member is whitelisted\\n    uint256 principal; // Principal amount\\n    uint256 accrualTs; // Timestamp of the last accrual\\n    uint256 totalOriginationFee;\\n    uint256 totalInterest;\\n  }\\n\\n  /// @notice Roll data struct\\n  struct Roll {\\n    uint256 startDate; // Start date of the roll\\n    uint256 endDate; // End date of the roll\\n  }\\n\\n  /// @notice Callback data struct\\n  struct CallBack {\\n    bool isCreated; // True if the callback is created\\n    uint256 timestamp; // Timestamp of the callback\\n  }\\n\\n  /// @notice Struct to store lender deposits as separate position\\n  struct Position {\\n    uint256 interest; // total interest for entire deposit period\\n    uint256 startAt; // Timestamp of the deposit\\n    uint256 endAt; // Timestamp when the interest ends\\n  }\\n\\n  /// @notice Struct to avoid stack too deep error\\n  struct PoolData {\\n    bool isBulletLoan; // True if the pool is bullet loan, False if the pool is term loan\\n    address asset;\\n    uint256 size;\\n    uint256 tenor;\\n    uint256 rateMantissa;\\n    uint256 depositWindow;\\n  }\\n\\n  /// @notice Initialize the pool\\n  /// @dev This function is called only once during the pool creation\\n  /// @param _borrower - Pool borrower address\\n  /// @param _spreadRate - Pool protocol spread rate\\n  /// @param _originationRate - Pool origination fee rate\\n  /// @param _incrementPerRoll - Pool rolling increment rate of origination fee\\n  /// @param _penaltyRatePerYear - Pool penalty rate calculated for 1 year\\n  /// @param _poolData - Pool data struct: asset, size, tenor, rateMantissa, depositWindow\\n  /// @param _members - Pool members (lenders) addresses encoded in bytes\\n  function __Pool_init(\\n    address _borrower,\\n    uint256 _spreadRate,\\n    uint256 _originationRate,\\n    uint256 _incrementPerRoll,\\n    uint256 _penaltyRatePerYear,\\n    PoolData calldata _poolData,\\n    bytes calldata _members\\n  ) external;\\n\\n  /// @notice Whitelists lenders\\n  /// @dev Can be called only by the borrower\\n  /// @param lenders - Lenders addresses encoded in bytes\\n  function whitelistLenders(bytes calldata lenders) external returns (bool);\\n\\n  /// @notice Blacklists lenders\\n  /// @dev Can be called only by the borrower\\n  /// @param lenders - Lenders addresses encoded in bytes\\n  function blacklistLenders(bytes calldata lenders) external returns (bool);\\n\\n  /// @notice Converts the pool to public\\n  /// @dev Can be called only by the borrower\\n  /// @return success - True if the pool is converted to public\\n  function switchToPublic() external returns (bool success);\\n\\n  /// @notice Lends funds to the pool\\n  /// @dev Can be called only by the whitelisted Prime lenders\\n  /// @param amount - Amount of funds to lend\\n  /// @return success - True if the funds are lent\\n  function lend(uint256 amount) external returns (bool success);\\n\\n  /// @notice Fully repays the lender with the principal and interest\\n  /// @dev Can be called only by the borrower\\n  /// @param lender - Lender address\\n  /// @return success - True if the lender is repaid\\n  function repay(address lender) external returns (bool success);\\n\\n  /// @notice Repays all lenders with the principal and interest\\n  /// @dev Can be called only by the borrower\\n  /// @return success - True if all lenders are repaid\\n  function repayAll() external returns (bool success);\\n\\n  /// @notice Repays interest to the lender\\n  /// @dev Can be called only by the borrower in monthly loans\\n  function repayInterest() external;\\n\\n  /// @notice Creates the callback\\n  /// @dev Can be called only by the whitelisted Prime lenders\\n  /// @return success - True if the callback is created by the lender\\n  function requestCallBack() external returns (bool success);\\n\\n  /// @notice Cancels the callback\\n  /// @dev Can be called only by the whitelisted Prime lenders\\n  /// @return success - True if the callback is cancelled by the lender\\n  function cancelCallBack() external returns (bool success);\\n\\n  /// @notice Requests the roll\\n  /// @dev Can be called only by the borrower\\n  function requestRoll() external;\\n\\n  /// @notice Accepts the roll\\n  /// @dev Can be called only by the whitelisted Prime lenders\\n  function acceptRoll() external;\\n\\n  /// @notice Defaults the pool\\n  /// @dev Can be called only by lender or borrower if time conditions are met\\n  /// @dev Can be called by governor without time conditions\\n  function markPoolDefaulted() external;\\n\\n  /// @notice Closes the pool\\n  /// @dev Can be called only by the borrower\\n  /// @return success - True if the pool is closed\\n  function close() external returns (bool success);\\n\\n  /// @notice Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders\\n  /// @return totalDue - Total due amount for repayment\\n  function totalDue() external view returns (uint256 totalDue);\\n\\n  /// @notice Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender\\n  /// @param lender - The address of the lender\\n  /// @return due - Due amount for repayment\\n  /// @return spreadFee - Protocol spread fee\\n  /// @return originationFee - Origination protocol fee\\n  /// @return penalty - Penalty fee\\n  function dueOf(\\n    address lender\\n  ) external view returns (uint256 due, uint256 spreadFee, uint256 originationFee, uint256 penalty);\\n\\n  /// @notice Calculates the total interest and penalty amount for the next payment for all lenders\\n  /// @return totalInterest The interest amount\\n  function totalDueInterest() external returns (uint256 totalInterest);\\n\\n  /// @notice Calculates the total interest and penalty for the next payment to the lender\\n  /// @param lender The lender address\\n  /// @return due The interest amount\\n  /// @return spreadFee The spread amount\\n  /// @return penalty The penalty amount\\n  function dueInterestOf(\\n    address lender\\n  ) external view returns (uint256 due, uint256 spreadFee, uint256 penalty);\\n\\n  /// @notice Calculates the accrued amount until today, excluding penalty\\n  /// @param lender - The address of the lender\\n  /// @return interestAccrued - Accrued amount until today\\n  function balanceOf(address lender) external view returns (uint256);\\n\\n  /// @notice When maturity date passed, calculates the penalty fee for the lender\\n  /// @param lender - The address of the lender\\n  /// @return penaltyFee - Penalty fee\\n  function penaltyOf(address lender) external view returns (uint256);\\n\\n  /// @notice Calculates the next payment timestamp for the borrower\\n  /// @return payableToTimestamp - The timestamp of the next payment\\n  function getNextPaymentTimestamp() external view returns (uint256);\\n\\n  /// @notice Checks if the pool can be defaulted by borrower or lender\\n  /// @return isAbleToDefault True if the pool can be defaulted\\n  function canBeDefaulted() external view returns (bool isAbleToDefault);\\n}\\n\",\"keccak256\":\"0x56206f11570cdb95d4b39dda4902a31b1d362b2e3173c928538dd0b5278c18e5\",\"license\":\"Apache-2.0\"},\"contracts/Pool/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from './IPool.sol';\\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\\n\\n/// @title Prime IPoolFactory interface\\ninterface IPoolFactory {\\n  /// @notice Initialize the contract\\n  /// @dev This function is called only once during the contract deployment\\n  /// @param _prime Prime contract address\\n  /// @param _poolBeacon Beacon address for pool proxy pattern\\n  function __PoolFactory_init(address _prime, address _poolBeacon) external;\\n\\n  /// @notice Creates a new pool\\n  /// @dev Callable only by prime members\\n  /// @param pooldata Bla bla bla\\n  /// @param members Pool members address encoded in bytes\\n  function createPool(IPool.PoolData calldata pooldata, bytes calldata members) external;\\n\\n  function prime() external view returns (IPrime);\\n}\\n\",\"keccak256\":\"0x3112c1c482d560098dd02f54a43cb9c08164e44610ffd04ffb9bb42053634b4d\",\"license\":\"Apache-2.0\"},\"contracts/Pool/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nimport {IPool} from './IPool.sol';\\nimport {IPoolFactory} from './IPoolFactory.sol';\\nimport {IPrime} from '../PrimeMembership/IPrime.sol';\\n\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport {ReentrancyGuardUpgradeable} from '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport {SafeERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport {IERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\nimport {NZAGuard} from '../utils/NZAGuard.sol';\\nimport {AddressCoder} from '../utils/AddressCoder.sol';\\n\\n/// @title Pool contract is responsible for managing the pool\\ncontract Pool is IPool, Initializable, ReentrancyGuardUpgradeable, NZAGuard {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  /// @notice Standart year in seconds\\n  uint256 public constant YEAR = 360 days;\\n\\n  /// @notice Pool repayment option. Bullet loan or monthly repayment\\n  bool public isBulletLoan;\\n\\n  /// @notice Pool publicity status\\n  bool public isPublic;\\n\\n  /// @notice Pool availability status\\n  bool public isClosed;\\n\\n  /// @notice Roll request status\\n  bool public isRollRequested;\\n\\n  /// @notice Pool borrower address\\n  address public borrower;\\n\\n  /// @notice Asset address of the pool\\n  address public asset;\\n\\n  /// @notice Pool factory address\\n  IPoolFactory public factory;\\n\\n  /// @notice Pool current size\\n  uint256 public currentSize;\\n\\n  /// @notice Pool maximum size\\n  uint256 public maxSize;\\n\\n  /// @notice Pool interest rate (in mantissa)\\n  uint256 public rateMantissa;\\n\\n  /// @notice Protocol spread rate\\n  uint256 public spreadRate;\\n\\n  /// @notice Origination fee rate\\n  uint256 public originationRate;\\n\\n  /// @notice Pool rolling increment fee rate\\n  uint256 public incrementPerRoll;\\n\\n  /// @notice Pool deposit window (in seconds)\\n  uint256 public depositWindow;\\n\\n  /// @notice Pool deposit maturity\\n  uint256 public depositMaturity;\\n\\n  /// @notice Pool tenor\\n  uint256 public tenor;\\n\\n  /// @notice Pool maturity date\\n  uint256 public maturityDate;\\n\\n  /// @notice Pool active roll id\\n  uint256 public activeRollId;\\n\\n  /// @notice The last timestamp at which a payment was made or received in monthly repayment pool.\\n  uint256 public lastPaidTimestamp;\\n\\n  /// @notice If pool is defaulted, this is the timestamp of the default\\n  uint256 public defaultedAt;\\n\\n  /// @notice Pool lenders array\\n  address[] private _lenders;\\n\\n  /// @notice Pool next roll id counter\\n  uint256 private _nextRollId;\\n\\n  /// @notice Pool active lenders count\\n  uint256 internal _activeLendersCount;\\n\\n  /// @notice Pool active callbacks count\\n  uint256 private _activeCallbacksCount;\\n\\n  /// @notice Pool members mapping (lender address => Member struct)\\n  mapping(address => Member) private poolMembers;\\n\\n  /// @notice Pool rolls mapping (roll id => Roll struct)\\n  mapping(uint256 => Roll) private _poolRolls;\\n\\n  /// @notice Pool lender's positions (lender address => Positions array)\\n  mapping(address => Position[]) private _lenderPositions;\\n\\n  /// @notice Pool callbacks mapping (lender address => CallBack struct)\\n  mapping(address => CallBack) private _poolCallbacks;\\n\\n  /// @notice Pool penalty rate calculated for 1 year\\n  uint256 public penaltyRatePerYear;\\n\\n  /// @dev config variables allowing to easily test the time features on testnets\\n\\n  /// @notice Pool monthly repayment schedule duration (by default is 30 days)\\n  uint256 internal monthlyPaymentRoundDuration;\\n\\n  /// @notice Pool roll request ending range duration (xTs before ending)\\n  uint256 internal rollRangeDuration;\\n\\n  /// @notice Pool grace period duration until the pool can be marked as Default\\n  uint256 internal gracePeriodDuration;\\n\\n  /// @notice Emitted when the pool is activated\\n  /// @param depositMaturity - Lender can deposit until this timestamp\\n  /// @param maturityDate - Borrower's maturity date (timestamp)\\n  event Activated(uint256 depositMaturity, uint256 maturityDate);\\n\\n  /// @notice Emitted when pool is converted to public\\n  event ConvertedToPublic();\\n\\n  /// @notice Emitted when pool is defaulted\\n  event Defaulted();\\n\\n  /// @notice Emitted when the pool is closed\\n  event Closed();\\n\\n  /// @notice Emitted when the roll is requested\\n  /// @param rollId - Id of the roll\\n  event RollRequested(uint256 indexed rollId);\\n\\n  /// @notice Emitted when the pool is rolled\\n  /// @param rollId - Id of the new roll\\n  /// @param newMaturity - New maturity date (timestamp)\\n  event RollAccepted(uint256 indexed rollId, uint256 newMaturity);\\n\\n  /// @notice Emitted when the roll is rejected\\n  /// @param rollId - Id of the roll\\n  /// @param user - Address of the user who rejected the roll\\n  event RollRejected(uint256 indexed rollId, address user);\\n\\n  /// @notice Emitted when new lender is added to the pool\\n  event LenderWhitelisted(address lender);\\n\\n  /// @notice Emitted when lender is removed from the pool\\n  event LenderBlacklisted(address lender);\\n\\n  /// @notice Emitted when funds are lent to the pool\\n  event Lent(address indexed lender, uint256 amount);\\n\\n  /// @notice Emitted when lender is fully repayed\\n  event Repayed(\\n    address indexed lender,\\n    uint256 repayed,\\n    uint256 spreadFee,\\n    uint256 originationFee,\\n    uint256 penalty\\n  );\\n\\n  /// @notice Emitted when interest is repayed to the lender\\n  event RepayedInterest(\\n    address indexed lender,\\n    uint256 repayed,\\n    uint256 spreadFee,\\n    uint256 penalty\\n  );\\n\\n  /// @notice Emitted when callback is created\\n  event CallbackCreated(address indexed lender);\\n\\n  /// @notice Emitted when callback is cancelled\\n  event CallbackCancelled(address indexed lender);\\n\\n  /// @notice Modifier to check if the caller is a prime member\\n  modifier onlyPrime() {\\n    _isPrimeMember(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Modifier to check if the caller is a pool borrower\\n  modifier onlyBorrower() {\\n    require(msg.sender == borrower, 'NCR');\\n    _;\\n  }\\n\\n  /// @notice Modifier to check if the pool is not closed\\n  modifier nonClosed() {\\n    require(!isClosed, 'OAC');\\n    _;\\n  }\\n\\n  /// @notice Modifier to check if the pool is not defaulted\\n  modifier nonDefaulted() {\\n    require(defaultedAt == 0, 'PDD');\\n    _;\\n  }\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  /// @inheritdoc IPool\\n  function __Pool_init(\\n    address _borrower,\\n    uint256 _spreadRate,\\n    uint256 _originationRate,\\n    uint256 _incrementPerRoll,\\n    uint256 _penaltyRatePerYear,\\n    PoolData calldata _poolData,\\n    bytes calldata _members\\n  ) external initializer {\\n    __ReentrancyGuard_init();\\n    __Pool_init_unchained(\\n      _borrower,\\n      _spreadRate,\\n      _originationRate,\\n      _incrementPerRoll,\\n      _penaltyRatePerYear,\\n      _poolData,\\n      _members\\n    );\\n  }\\n\\n  /// @dev The __Pool_init_unchained sets initial parameters for the pool\\n  /// @param _borrower The address of the borrower that created the pool\\n  /// @param _spreadRate The rate at which protocol will earn spread\\n  /// @param _originationRate The rate of yield enhancement intended to incentivize collateral providers\\n  /// @param _penaltyRatePerYear The rate at which borrower will pay additional interest for 1 year\\n  /// @param _incrementPerRoll - Pool rolling increment fee rate\\n  /// @param _poolData Data regarding the pool\\n  /// @param _members The list of members who rose the funds for the borrower\\n  function __Pool_init_unchained(\\n    address _borrower,\\n    uint256 _spreadRate,\\n    uint256 _originationRate,\\n    uint256 _incrementPerRoll,\\n    uint256 _penaltyRatePerYear,\\n    PoolData calldata _poolData,\\n    bytes calldata _members\\n  ) internal onlyInitializing {\\n    /// @dev Fill pool data\\n    borrower = _borrower;\\n    asset = _poolData.asset;\\n    maxSize = _poolData.size;\\n    tenor = _poolData.tenor;\\n    rateMantissa = _poolData.rateMantissa;\\n    depositWindow = _poolData.depositWindow;\\n    isBulletLoan = _poolData.isBulletLoan;\\n    spreadRate = _spreadRate;\\n    originationRate = _originationRate;\\n    incrementPerRoll = _incrementPerRoll;\\n    penaltyRatePerYear = _penaltyRatePerYear;\\n\\n    /// @dev config variables\\n    monthlyPaymentRoundDuration = 30 days;\\n    rollRangeDuration = 48 hours;\\n    gracePeriodDuration = 3 days;\\n\\n    /// @dev Starting new rolls from 1\\n    ++_nextRollId;\\n\\n    /// @dev Factory is caller of initializer\\n    factory = IPoolFactory(msg.sender);\\n\\n    /// @dev Pool is available for all prime users if it is public\\n    if (_members.length == 0) {\\n      isPublic = true;\\n    } else {\\n      _parseLenders(true, _members);\\n    }\\n  }\\n\\n  /// @inheritdoc IPool\\n  function whitelistLenders(\\n    bytes calldata lenders\\n  ) external override onlyBorrower nonReentrant returns (bool success) {\\n    require(lenders.length != 0, 'LLZ');\\n\\n    /// @dev Pool converts to private if it is public\\n    if (isPublic) {\\n      isPublic = false;\\n    }\\n    _parseLenders(true, lenders);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function blacklistLenders(\\n    bytes calldata lenders\\n  ) external override onlyBorrower nonReentrant returns (bool success) {\\n    require(!isPublic, 'OPP');\\n    require(lenders.length != 0, 'LLZ');\\n\\n    _parseLenders(false, lenders);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function switchToPublic() external override onlyBorrower nonReentrant returns (bool success) {\\n    require(!isPublic, 'AAD');\\n\\n    isPublic = true;\\n\\n    emit ConvertedToPublic();\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function lend(\\n    uint256 amount\\n  )\\n    external\\n    override\\n    nonReentrant\\n    onlyPrime\\n    nonZeroValue(amount)\\n    nonClosed\\n    nonDefaulted\\n    returns (bool success)\\n  {\\n    return _lend(amount, msg.sender);\\n  }\\n\\n  /// @inheritdoc IPool\\n  function repay(\\n    address lender\\n  )\\n    external\\n    override\\n    onlyBorrower\\n    nonZeroAddress(lender)\\n    nonDefaulted\\n    nonReentrant\\n    returns (bool success)\\n  {\\n    return _repayTo(lender);\\n  }\\n\\n  /// @inheritdoc IPool\\n  function repayAll()\\n    external\\n    override\\n    onlyBorrower\\n    nonDefaulted\\n    nonReentrant\\n    returns (bool success)\\n  {\\n    uint256 lendersLength = _lenders.length;\\n    for (uint256 i = 0; i < lendersLength; ++i) {\\n      _repayTo(_lenders[i]);\\n    }\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function repayInterest() external override onlyBorrower nonDefaulted nonReentrant {\\n    require(!isBulletLoan, 'NML');\\n    _repayInterest();\\n  }\\n\\n  /// @inheritdoc IPool\\n  function requestCallBack()\\n    external\\n    override\\n    onlyPrime\\n    nonDefaulted\\n    nonClosed\\n    returns (bool success)\\n  {\\n    /// @dev Lender should have principal\\n    require(poolMembers[msg.sender].principal != 0, 'LZL');\\n\\n    /// @dev Lender should not have created callback\\n    require(!_poolCallbacks[msg.sender].isCreated, 'AAD');\\n\\n    /// @dev Callback can be created only before the maturity date\\n    require(block.timestamp < maturityDate, 'EMD');\\n\\n    /// @dev If last lender requests callback and roll is requested\\n    /// @dev then roll is rejected\\n    if (isRollRequested) {\\n      _rejectRoll();\\n    }\\n\\n    /// @dev Increases the number of active callbacks\\n    _activeCallbacksCount++;\\n\\n    /// @dev Saves callback as a struct\\n    _poolCallbacks[msg.sender] = CallBack(true, block.timestamp);\\n\\n    emit CallbackCreated(msg.sender);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function cancelCallBack()\\n    external\\n    override\\n    nonDefaulted\\n    nonClosed\\n    onlyPrime\\n    returns (bool success)\\n  {\\n    /// @dev Lender should have created callback\\n    require(_poolCallbacks[msg.sender].isCreated, 'AAD');\\n\\n    /// @dev Removes callback\\n    delete _poolCallbacks[msg.sender];\\n\\n    emit CallbackCancelled(msg.sender);\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function requestRoll() external override onlyBorrower nonDefaulted nonClosed {\\n    /// @dev Roll should not be requested\\n    require(!isRollRequested, 'RAR');\\n\\n    /// @dev Roll can be requested only if there is one active lender and no active callbacks\\n    require(_activeLendersCount == 1, 'RCR');\\n\\n    /// @dev New roll can be activated only after deposit window until {@dev rollRangeDuration} before the maturity date\\n    require(\\n      block.timestamp > depositMaturity &&\\n        block.timestamp > _poolRolls[activeRollId].startDate &&\\n        block.timestamp < maturityDate - rollRangeDuration,\\n      'RTR'\\n    );\\n\\n    isRollRequested = true;\\n\\n    emit RollRequested(_nextRollId);\\n  }\\n\\n  /// @inheritdoc IPool\\n  function acceptRoll() external override onlyPrime nonClosed nonDefaulted {\\n    /// @notice check if the roll was requested\\n    require(isRollRequested, 'ARM');\\n\\n    /// @dev Lender can accept roll only before it starts\\n    require(block.timestamp < maturityDate, 'RTR');\\n\\n    Member storage member = poolMembers[msg.sender];\\n\\n    /// @dev Should be an authorized lender\\n    require(member.principal != 0, 'IMB');\\n\\n    isRollRequested = false; // renew request status\\n\\n    /// @dev Get the current roll id\\n    uint256 currentRollId = _nextRollId;\\n\\n    /// @dev Increment the rolls counter\\n    ++_nextRollId;\\n\\n    /// @dev Update the roll id tracker\\n    activeRollId = currentRollId;\\n\\n    /// @dev Save the new roll as Roll struct\\n    _poolRolls[currentRollId] = Roll(maturityDate, maturityDate + tenor);\\n\\n    /// @dev update positions amounts\\n    member.totalInterest += (member.principal * _annualRate(rateMantissa, tenor)) / 1e18;\\n\\n    /// @dev Prolongate the maturity date\\n    maturityDate += tenor;\\n\\n    emit RollAccepted(currentRollId, maturityDate);\\n  }\\n\\n  /// @inheritdoc IPool\\n  function markPoolDefaulted() external nonClosed nonDefaulted {\\n    /// @dev Governor is able to mark pool as defaulted through the Factory\\n    if (msg.sender != address(factory)) {\\n      /// @dev Lender or the borrower with loan can mark pool as defaulted\\n      _isPrimeMember(msg.sender);\\n\\n      if (msg.sender != borrower) {\\n        /// @dev Lender should have principal\\n        require(poolMembers[msg.sender].principal != 0, 'IMB');\\n      }\\n\\n      require(canBeDefaulted(), 'EDR');\\n    }\\n\\n    /// @dev Set the pool default timestamp\\n    defaultedAt = block.timestamp;\\n\\n    emit Defaulted();\\n  }\\n\\n  /// @inheritdoc IPool\\n  function close() external override onlyBorrower nonClosed returns (bool success) {\\n    /// @dev The pool can be closed only if it's size is 0\\n    require(currentSize == 0, 'OHD');\\n    _close();\\n    return true;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function totalDue() external view override returns (uint256 totalDueAmount) {\\n    /// @dev Gas optimization\\n    uint256 lendersLength = _lenders.length;\\n    for (uint256 i = 0; i < lendersLength; ++i) {\\n      (uint256 due, uint256 spreadFee, uint256 originationFee, ) = dueOf(_lenders[i]);\\n      totalDueAmount += due + spreadFee + originationFee;\\n    }\\n  }\\n\\n  /// @inheritdoc IPool\\n  function dueOf(\\n    address lender\\n  )\\n    public\\n    view\\n    override\\n    returns (uint256 due, uint256 spreadFee, uint256 originationFee, uint256 penalty)\\n  {\\n    /// @dev Gas saving link to lender's member struct\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev If principal is zero, interest is zero too\\n    if (member.principal == 0) {\\n      return (0, 0, 0, 0);\\n    }\\n    (due, spreadFee, penalty) = _dueInterestOf(lender, member.totalInterest, member.accrualTs);\\n    originationFee = _getOriginationFee(lender);\\n    due += member.principal;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function totalDueInterest() external view override returns (uint256 totalInterest) {\\n    /// @dev Gas optimization\\n    uint256 lendersLength = _lenders.length;\\n    for (uint256 i = 0; i < lendersLength; ++i) {\\n      /// @dev Lenders address from the array\\n      address lender = _lenders[i];\\n      (uint256 interest, uint256 spreadAmount, ) = dueInterestOf(lender);\\n      totalInterest += interest + spreadAmount;\\n    }\\n  }\\n\\n  /// @inheritdoc IPool\\n  function dueInterestOf(\\n    address lender\\n  ) public view override returns (uint256 due, uint256 spreadFee, uint256 penalty) {\\n    /// @dev Gas saving link to lender's member struct\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev If principal is zero, interest is zero too\\n    if (member.principal == 0) {\\n      return (0, 0, 0);\\n    }\\n\\n    if (isBulletLoan) {\\n      (due, spreadFee, penalty) = _dueInterestOf(lender, member.totalInterest, member.accrualTs);\\n    } else {\\n      uint256 timestamp = getNextPaymentTimestamp();\\n      uint256 endDate = block.timestamp > timestamp ? block.timestamp : timestamp;\\n\\n      (due, spreadFee) = _dueInterestFor(member.totalInterest, member.accrualTs, endDate);\\n      penalty = _penaltyOf(lender);\\n      due += penalty;\\n    }\\n  }\\n\\n  /// @inheritdoc IPool\\n  function balanceOf(address lender) external view override returns (uint256 balance) {\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev If principal is zero, balance is zero too\\n    if (member.principal == 0) {\\n      return 0;\\n    }\\n\\n    balance = member.principal;\\n    uint256 positionsLength = _lenderPositions[lender].length;\\n    for (uint256 i = 0; i < positionsLength; ++i) {\\n      Position memory position = _lenderPositions[lender][i];\\n      balance +=\\n        (position.interest * (block.timestamp - position.startAt)) /\\n        (position.endAt - position.startAt);\\n    }\\n  }\\n\\n  /// @inheritdoc IPool\\n  function penaltyOf(address lender) public view override returns (uint256 penalty) {\\n    /// @dev In common case, penalty starts from maturity date in case of bullet loan\\n    /// @dev or from the last paid timestamp in case of monthly loan\\n    return _penaltyOf(lender);\\n  }\\n\\n  /// @inheritdoc IPool\\n  function getNextPaymentTimestamp() public view returns (uint256 payableToTimestamp) {\\n    /// @dev Initial timestamp is the last paid timestamp\\n    payableToTimestamp = lastPaidTimestamp;\\n\\n    /// @dev If pool is active and last month is paid, next month is payable\\n    if (\\n      payableToTimestamp != 0 && payableToTimestamp < block.timestamp + monthlyPaymentRoundDuration\\n    ) {\\n      payableToTimestamp += monthlyPaymentRoundDuration;\\n\\n      if (payableToTimestamp > maturityDate) {\\n        payableToTimestamp = maturityDate;\\n      }\\n    }\\n    return payableToTimestamp;\\n  }\\n\\n  /// @inheritdoc IPool\\n  function canBeDefaulted() public view override returns (bool isAbleToDefault) {\\n    /// @dev Pool can be marked as defaulted only if it is not defaulted already and has lenders\\n    if (defaultedAt != 0 || _activeLendersCount == 0) {\\n      return false;\\n    }\\n\\n    if (isBulletLoan) {\\n      /// @dev Pool can be marked as defaulted by lender only after ({@dev gracePeriodDuration} + maturity date) in case of bullet loan\\n      return block.timestamp > maturityDate + gracePeriodDuration;\\n    } else {\\n      /// @dev Otherwise, pool can be marked as defaulted by lender only after {@dev gracePeriodDuration + monthlyPaymentRoundDuration} days since last payment\\n      return\\n        block.timestamp > lastPaidTimestamp + monthlyPaymentRoundDuration + gracePeriodDuration;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates the penalty rate for a given interval\\n   * @param interval The interval in seconds\\n   * @return The penalty rate as a mantissa between [0, 1e18]\\n   */\\n  function penaltyRate(uint256 interval) public view returns (uint256) {\\n    return (penaltyRatePerYear * interval) / YEAR;\\n  }\\n\\n  /// @notice Returns Prime address\\n  /// @dev Prime converted as IPrime interface\\n  /// @return primeInstance - Prime address\\n  function prime() public view returns (IPrime primeInstance) {\\n    /// @dev Factory should keep actual link to Prime\\n    return factory.prime();\\n  }\\n\\n  /// @notice Parses the members encoded in bytes and calls _parseLender() for each member\\n  /// @dev Internal function\\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\\n  /// @param members - The encoded members bytes\\n  function _parseLenders(bool isWhitelistOperation, bytes calldata members) internal {\\n    if (members.length == 20) {\\n      _parseLender(isWhitelistOperation, AddressCoder.decodeAddress(members)[0]);\\n    } else {\\n      address[] memory addresses = AddressCoder.decodeAddress(members);\\n      uint256 length = addresses.length;\\n\\n      require(length <= 60, 'EAL');\\n\\n      for (uint256 i = 0; i < length; i++) {\\n        _parseLender(isWhitelistOperation, addresses[i]);\\n      }\\n    }\\n  }\\n\\n  /// @notice Creates lender if not exists and updates the whitelist status\\n  /// @dev Internal function\\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\\n  /// @param member - The address of the lender\\n  function _parseLender(bool isWhitelistOperation, address member) internal {\\n    _isPrimeMember(member);\\n\\n    /// @dev Gas saving link to lender's member struct\\n    Member storage memberStruct = poolMembers[member];\\n\\n    /// @dev Whitelist Lender\\n    if (isWhitelistOperation) {\\n      /// @dev Creates member if not exists\\n      if (!memberStruct.isCreated) {\\n        _initLender(member, true);\\n      } else {\\n        /// @dev Whitelists member if it is not whitelisted\\n        memberStruct.isWhitelisted = true;\\n      }\\n\\n      emit LenderWhitelisted(member);\\n    } else {\\n      /// @dev If we blacklist a lender, it should exist\\n      require(memberStruct.isCreated, 'IMB');\\n\\n      memberStruct.isWhitelisted = false;\\n\\n      emit LenderBlacklisted(member);\\n    }\\n  }\\n\\n  /// @dev Creates lender if not exists and updates the whitelist status\\n  /// @param member - The address of the lender\\n  /// @param isWhitelistOperation - True if the operation is a whitelist operation\\n  function _initLender(address member, bool isWhitelistOperation) internal {\\n    /// @dev Creates lender if not exists\\n    if (!poolMembers[member].isCreated) {\\n      /// @dev Borrower cannot be a lender\\n      require(borrower != member, 'BLS');\\n      /// @dev Init struct for lender's data\\n      poolMembers[member] = Member(true, isWhitelistOperation, 0, 0, 0, 0);\\n      _lenders.push(member);\\n    }\\n  }\\n\\n  /// @notice Lends funds to the pool\\n  /// @dev Internal function\\n  /// @param amount - Amount of funds to lend\\n  /// @param lender - Lender address\\n  /// @return success - True if the funds are lent\\n  function _lend(uint256 amount, address lender) internal returns (bool success) {\\n    /// @dev New size of the pool shouldn't be greater than max allowed size\\n    require(currentSize + amount <= maxSize, 'OSE');\\n\\n    /// @dev Gas saving link to lender's member struct\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev If roll is public, we should create it's data structure\\n    if (isPublic) {\\n      _initLender(lender, true);\\n    } else {\\n      /// @dev If roll is private, lender should be whitelisted\\n      require(member.isWhitelisted, 'IMB');\\n    }\\n\\n    /// @dev If depositMaturity is zero, it means that the pool is not activated yet\\n    if (depositMaturity == 0) {\\n      /// @dev Set depositMaturity and maturityDate\\n      depositMaturity = block.timestamp + depositWindow;\\n      maturityDate = block.timestamp + tenor;\\n\\n      if (!isBulletLoan) {\\n        lastPaidTimestamp = block.timestamp;\\n      }\\n      emit Activated(depositMaturity, maturityDate);\\n    } else {\\n      require(block.timestamp <= depositMaturity, 'DWC');\\n    }\\n    /// @dev Increase pool size, lender's deposit and active lenders count\\n    currentSize += amount;\\n\\n    if (member.principal == 0) {\\n      ++_activeLendersCount;\\n      member.accrualTs = block.timestamp;\\n    }\\n    uint256 timeInTenor = maturityDate - block.timestamp;\\n\\n    _lenderPositions[lender].push(\\n      Position({\\n        interest: (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18,\\n        startAt: block.timestamp,\\n        endAt: maturityDate\\n      })\\n    );\\n\\n    member.totalInterest += (amount * _annualRate(rateMantissa, timeInTenor)) / 1e18;\\n    member.totalOriginationFee += (amount * _annualRate(originationRate, timeInTenor)) / 1e18;\\n    /// @dev Update lender's member struct\\n    member.principal += amount;\\n\\n    emit Lent(lender, amount);\\n\\n    _safeTransferFrom(asset, lender, borrower, amount);\\n    return true;\\n  }\\n\\n  /// @notice Repays all the funds to the lender and Pool.\\n  /// @dev Internal function\\n  /// @param lender - Lender address\\n  /// @return success - True if the lender is repaid\\n  function _repayTo(address lender) internal returns (bool success) {\\n    /// @dev Member struct link\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev Short circuit for non lenders\\n    if (member.principal == 0) {\\n      return true;\\n    }\\n\\n    /// @dev Calculate the amount of funds to repay\\n    (uint256 memberDueAmount, uint256 spreadFee, uint256 originationFee, uint256 penalty) = dueOf(\\n      lender\\n    );\\n\\n    /// @dev Cleanup lender callbacks\\n    if (_poolCallbacks[lender].isCreated) {\\n      _poolCallbacks[lender].isCreated = false;\\n    }\\n\\n    /// @dev Cleanup lender roll\\n    if (activeRollId != 0) {\\n      activeRollId = 0;\\n    }\\n\\n    /// @dev Emit repay event before potential pool closure\\n    emit Repayed(lender, memberDueAmount, spreadFee, originationFee, penalty);\\n\\n    /// @dev Cleanup related data\\n    currentSize -= member.principal;\\n    member.totalInterest = 0;\\n    member.totalOriginationFee = 0;\\n    member.principal = 0;\\n    member.accrualTs = block.timestamp;\\n    --_activeLendersCount;\\n\\n    /// @dev Remove all lender positions\\n    delete _lenderPositions[lender];\\n\\n    /// @dev Close pool if it is empty and deposit window is over\\n    if (currentSize == 0 && depositMaturity <= block.timestamp) {\\n      _close();\\n    }\\n\\n    uint256 totalFees = spreadFee + originationFee;\\n\\n    /// @dev Treasury is always not zero address. Pay protocol fees if any\\n    if (totalFees != 0) {\\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), totalFees);\\n    }\\n    _safeTransferFrom(asset, msg.sender, lender, memberDueAmount);\\n    return true;\\n  }\\n\\n  /// @dev Repays the interest to all lenders\\n  function _repayInterest() internal {\\n    require(block.timestamp > lastPaidTimestamp, 'RTE');\\n\\n    /// @dev Get next payment timestamp\\n    uint256 newPaidTimestamp = getNextPaymentTimestamp();\\n\\n    uint256 lendersLength = _lenders.length;\\n    for (uint256 i = 0; i < lendersLength; ++i) {\\n      /// @dev Iterate over all lenders and repay interest to each of them\\n      _repayInterestTo(_lenders[i], newPaidTimestamp);\\n    }\\n    lastPaidTimestamp = newPaidTimestamp;\\n  }\\n\\n  /// @dev Repays the interest to the lender\\n  function _repayInterestTo(address lender, uint256 lastPaidTs) internal {\\n    /// @dev Member struct link\\n    Member storage member = poolMembers[lender];\\n\\n    /// @dev Do not repay interest to non lenders or if already paid\\n    if (member.principal == 0) {\\n      return;\\n    }\\n\\n    (uint256 interest, uint256 spreadFee, uint256 penalty) = dueInterestOf(lender);\\n\\n    /// @dev Substract borrow interest from total interest\\n    member.totalInterest -=\\n      (member.totalInterest * (lastPaidTs - member.accrualTs)) /\\n      (maturityDate - member.accrualTs);\\n    member.accrualTs = lastPaidTs;\\n    emit RepayedInterest(lender, interest, spreadFee, penalty);\\n\\n    /// @dev Repay fees if any\\n    if (spreadFee != 0) {\\n      _safeTransferFrom(asset, msg.sender, prime().treasury(), spreadFee);\\n    }\\n    /// @dev Repay interest and penalty if any.\\n    /// @dev interest == 0 is not possible because of the check above for member.accrualTs\\n    _safeTransferFrom(asset, msg.sender, lender, interest);\\n  }\\n\\n  /// @dev Rejects the roll\\n  function _rejectRoll() internal {\\n    isRollRequested = false;\\n    emit RollRejected(_nextRollId, msg.sender);\\n  }\\n\\n  /// @dev Closes the pool\\n  function _close() internal {\\n    isClosed = true;\\n    emit Closed();\\n  }\\n\\n  function _getOriginationFee(address lender) internal view returns (uint256 originationFee) {\\n    if (originationRate == 0) {\\n      return 0;\\n    }\\n\\n    /// @dev Member struct link\\n    Member storage member = poolMembers[lender];\\n\\n    originationFee = member.totalOriginationFee;\\n\\n    /// @dev Initial maturity date equals to [depositMaturity - depositWindow + tenor].\\n    if (\\n      _poolCallbacks[lender].isCreated && block.timestamp < depositMaturity - depositWindow + tenor\\n    ) {\\n      /// @dev If lender hasn't created callback, and borrower repays the loan before the maturity date,\\n      /// @dev not all origination fee is used.\\n      uint256 unusedTime = maturityDate - block.timestamp;\\n\\n      originationFee -= (member.principal * (_annualRate(originationRate, unusedTime))) / 1e18;\\n    }\\n\\n    /// @dev If there was a roll and increment per roll is not zero, adjust origination fee\\n    if (_nextRollId != 1 && incrementPerRoll != 0) {\\n      /// @dev originationFeeAmount is applied only on the original tenure set on the pool,\\n      /// @dev and an additional X% annualized added to the originationFeeAmount for every roll.\\n      uint256 fullOriginationFeePerRoll = (((member.principal *\\n        _annualRate(originationRate, tenor)) / 1e18) * incrementPerRoll) / 1e18;\\n\\n      if (\\n        _poolCallbacks[lender].isCreated &&\\n        block.timestamp > _poolRolls[1].startDate &&\\n        block.timestamp < maturityDate\\n      ) {\\n        /// @dev If Callback been requested, origination fee is calculated from the start of the roll\\n        /// @dev [times of tenor passed from maturity date] == (daysPassed) / tenor\\n        /// @dev Summ origination fee with rolling origination fee\\n        originationFee +=\\n          (fullOriginationFeePerRoll * (block.timestamp - _poolRolls[1].startDate)) /\\n          tenor;\\n      } else {\\n        originationFee += (fullOriginationFeePerRoll * (_nextRollId - 1));\\n      }\\n    }\\n  }\\n\\n  function _dueInterestOf(\\n    address lender,\\n    uint256 totalInterest,\\n    uint256 accrualTs\\n  ) internal view returns (uint256 due, uint256 spreadFee, uint256 penalty) {\\n    /// @dev By default due is calculated up to maturity date\\n    uint256 currentTs = maturityDate;\\n\\n    if (block.timestamp > maturityDate) {\\n      currentTs = block.timestamp;\\n      /// @dev If the lender requesting callback is repayed up to maturity or currentTs is after maturity use block timestamp\\n    } else if (_poolCallbacks[lender].isCreated && block.timestamp < maturityDate) {\\n      /// @dev On monthly pools lender interest maybe be repayed in advance, therefore we should pay no interest\\n      currentTs = block.timestamp;\\n\\n      if (!isBulletLoan && accrualTs > currentTs) {\\n        currentTs = accrualTs;\\n      }\\n    }\\n    (due, spreadFee) = _dueInterestFor(totalInterest, accrualTs, currentTs);\\n    penalty = _penaltyOf(lender);\\n\\n    /// @dev Due calculation. due == interest + penalty - spreadFee\\n    due += penalty;\\n  }\\n\\n  /// @dev Calculates the annual rate for a given interest rate and specific interval\\n  /// @param _rateMantissa The interest rate as a mantissa between [0, 1e18]\\n  /// @param _timeDelta The interval in seconds\\n  /// @return rate as a mantissa between [0, 1e18]\\n  function _annualRate(uint256 _rateMantissa, uint256 _timeDelta) internal pure returns (uint256) {\\n    return (_rateMantissa * _timeDelta) / YEAR;\\n  }\\n\\n  /// @dev Checks if the address is a prime member\\n  /// @param _member - The address of the member\\n  function _isPrimeMember(address _member) internal view {\\n    require(prime().isMember(_member), 'NPM');\\n  }\\n\\n  /// @dev Calculates the interest for specific time\\n  /// @param totalInterest - The interest amount calculated for entire time\\n  /// @param accrualTs - The timestamp to which the interest was paid\\n  /// @param timestamp - The timestamp to which the interest is calculated\\n  /// @return interest - The interest amount for given timestamp (spread is substracted)\\n  /// @return spreadAmount - The spread amount\\n  function _dueInterestFor(\\n    uint256 totalInterest,\\n    uint256 accrualTs,\\n    uint256 timestamp\\n  ) internal view returns (uint256 interest, uint256 spreadAmount) {\\n    interest = (totalInterest * (timestamp - accrualTs)) / (maturityDate - accrualTs);\\n    spreadAmount = (interest * spreadRate) / 1e18;\\n    interest -= spreadAmount;\\n  }\\n\\n  /// @dev Calculates penalty fee for the lender\\n  /// @param lender - The address of the lender\\n  function _penaltyOf(address lender) internal view returns (uint256) {\\n    /// @dev Link to member's data struct\\n    Member storage member = poolMembers[lender];\\n    /// @dev If principal is zero, no penalty fee is charged.\\n    /// @dev If monthly loan penalty fee does not charged if it is a first on time payment.\\n    if (member.principal == 0) {\\n      return 0;\\n    }\\n\\n    /// @dev Penalty fee is charged from the next month after the last payment in case of monthly loan,\\n    /// @dev and from the maturity in case of bullet loan.\\n    uint256 startingDate = isBulletLoan\\n      ? maturityDate\\n      : member.accrualTs + monthlyPaymentRoundDuration;\\n\\n    /// @dev Adjust starting date if it is greater than maturity date\\n    if (!isBulletLoan && startingDate > maturityDate) {\\n      startingDate = maturityDate;\\n    }\\n\\n    /// @dev In common case, penalty fee is calculated to the current time\\n    uint256 endingDate = block.timestamp;\\n\\n    if (defaultedAt != 0) {\\n      /// @dev If pool is defaulted, penalty fee is calculated to the default date\\n      endingDate = defaultedAt;\\n    }\\n\\n    /// @dev Calculate overdue amounts only if pool is overdue or defaulted\\n    if (endingDate > startingDate) {\\n      uint256 penaltyRateMantissa = penaltyRate(endingDate - startingDate);\\n\\n      /// @dev If penalty rate is zero, no penalty fee is charged\\n      if (penaltyRateMantissa == 0) {\\n        return 0;\\n      }\\n\\n      /// @dev Penalty fee == (penaltyRateForTime * principal)\\n      /// @dev function callable only if principal is not zero\\n      return (penaltyRateMantissa * member.principal) / 1e18;\\n    } else {\\n      /// @dev Else return zero\\n      return 0;\\n    }\\n  }\\n\\n  function _safeTransferFrom(\\n    address token,\\n    address sender,\\n    address receiver,\\n    uint256 amount\\n  ) internal {\\n    return IERC20Upgradeable(token).safeTransferFrom(sender, receiver, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd566223719b668076f5453782db0662974e363c11ff9e3e9f2549ee713ca0021\",\"license\":\"Apache-2.0\"},\"contracts/PrimeMembership/IPrime.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\n/**\\n * @title Interface of the Prime membership contract\\n */\\ninterface IPrime {\\n  /// @notice Member status enum\\n  enum MemberStatus {\\n    PENDING,\\n    WHITELISTED,\\n    BLACKLISTED\\n  }\\n\\n  /// @notice A record of member info\\n  struct Member {\\n    uint256 riskScore;\\n    MemberStatus status;\\n    bool created;\\n  }\\n\\n  /**\\n   * @notice Check membership status for a given `_member`\\n   * @param _member The address of member\\n   * @return Boolean flag containing membership status\\n   */\\n  function isMember(address _member) external view returns (bool);\\n\\n  /**\\n   * @notice Check Stablecoin existence for a given `asset` address\\n   * @param asset The address of asset\\n   * @return Boolean flag containing asset availability\\n   */\\n  function isAssetAvailable(address asset) external view returns (bool);\\n\\n  /**\\n   * @notice Get membership info for a given `_member`\\n   * @param _member The address of member\\n   * @return The member info struct\\n   */\\n  function membershipOf(address _member) external view returns (Member memory);\\n\\n  /**\\n   * @notice Returns current protocol rate value\\n   * @return The protocol rate as a mantissa between [0, 1e18]\\n   */\\n  function spreadRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current originated fee value\\n   * @return originated fee rate as a mantissa between [0, 1e18]\\n   */\\n  function originationRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current rolling increment fee\\n   * @return rolling fee rate as a mantissa between [0, 1e18]\\n   */\\n  function incrementPerRoll() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns current protocol fee collector address\\n   * @return address of protocol fee collector\\n   */\\n  function treasury() external view returns (address);\\n\\n  /**\\n   * @notice Returns current penalty rate for 1 year\\n   * @return penalty fee rate as a mantissa between [0, 1e18]\\n   */\\n  function penaltyRatePerYear() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4593120ae00d8dc6962e313ec3e8eb9c483cb26a0761567b8765cbb92129cf4d\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressCoder.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\nlibrary AddressCoder {\\n  function encodeAddress(address[] calldata addresses) internal pure returns (bytes memory data) {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      data = abi.encodePacked(data, addresses[i]);\\n    }\\n  }\\n\\n  function decodeAddress(bytes calldata data) internal pure returns (address[] memory addresses) {\\n    uint256 n = data.length / 20;\\n    addresses = new address[](n);\\n\\n    for (uint256 i = 0; i < n; i++) {\\n      addresses[i] = bytesToAddress(data[i * 20:(i + 1) * 20]);\\n    }\\n  }\\n\\n  function bytesToAddress(bytes calldata data) private pure returns (address addr) {\\n    bytes memory b = data;\\n    assembly {\\n      addr := mload(add(b, 20))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x467b3fcc277da7c61d26cc01b482f1bbfeb7d0cc88e771c35cb07ebb015f6274\",\"license\":\"Apache-2.0\"},\"contracts/utils/NZAGuard.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.17;\\n\\n/// @title NZAGuard contract contains modifiers to check inputs for non-zero address, non-zero value, non-same address, non-same value, and non-more-than-one\\nabstract contract NZAGuard {\\n  modifier nonZeroAddress(address _address) {\\n    require(_address != address(0), 'NZA');\\n    _;\\n  }\\n  modifier nonZeroValue(uint256 _value) {\\n    require(_value != 0, 'ZVL');\\n    _;\\n  }\\n  modifier nonSameValue(uint256 _value1, uint256 _value2) {\\n    require(_value1 != _value2, 'SVR');\\n    _;\\n  }\\n  modifier nonSameAddress(address _address1, address _address2) {\\n    require(_address1 != _address2, 'SVA');\\n    _;\\n  }\\n  modifier nonMoreThenOne(uint256 _value) {\\n    require(_value <= 1e18, 'UTR');\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x9f9eb25d75ff7023215c7374675aedafb27c7d30df09e1bb01c29a12f328aa10\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e4565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e2576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6131da80620000f46000396000f3fe608060405234801561001057600080fd5b50600436106102895760003560e01c8063839145401161015c578063b75a197d116100ce578063d59624b411610087578063d59624b414610507578063dc9a153514610510578063e6ad04c914610522578063f13fa0c11461052a578063fa3ae6dc14610533578063fa5d30b51461053b57600080fd5b8063b75a197d1461049a578063bda1504b146104c8578063c2b6b58c146104d1578063c45a0155146104e4578063c7ee005e146104f7578063c9d0cf0a146104ff57600080fd5b8063a15612d111610120578063a15612d114610442578063a2d273f91461044b578063a4af9d4614610458578063a6aa57ce1461046b578063a8ce6bbd1461047e578063b5cae5321461049157600080fd5b8063839145401461040c5780638a9e667c146104175780638fd0aeb21461041f57806393e88f3a146104275780639f7c73e91461042f57600080fd5b806343d726d61161020057806370a08231116101b957806370a08231146103b257806370acf929146103c557806376bc05ae146103d85780637bf04e3f146103e15780637df1f1b9146103e9578063821b10b01461040357600080fd5b806343d726d614610369578063443388191461037157806355e172d9146103845780635ab2af51146103975780635ceeb36c146103a05780636e4a3a56146103a857600080fd5b80631d097974116102525780631d097974146102dc5780632565b159146102f0578063337e04c1146102f95780633551dd8c1461032c57806338d52e0f146103355780633e0b06db1461036057600080fd5b806280af811461028e5780630afbd5c9146102aa5780630d692cc1146102b2578063125f01c8146102bb578063179541ca146102d3575b600080fd5b61029760415481565b6040519081526020015b60405180910390f35b610297610543565b61029760395481565b6102c36105bd565b60405190151581526020016102a1565b610297604b5481565b6033546102c3906301000000900460ff1681565b61029760375481565b61030c610307366004612d99565b610695565b6040805194855260208501939093529183015260608201526080016102a1565b610297603d5481565b603454610348906001600160a01b031681565b6040516001600160a01b0390911681526020016102a1565b61029760385481565b6102c3610713565b6102c361037f366004612dff565b6107b4565b610297610392366004612d99565b610861565b610297603a5481565b6102c361086c565b6103b06108ca565b005b6102976103c0366004612d99565b6109e1565b6103b06103d3366004612e41565b610aef565b610297603c5481565b610297610c18565b60335461034890600160201b90046001600160a01b031681565b610297603b5481565b6102976301da9c0081565b6103b0610c5a565b6102c3610df8565b610297610ea0565b6102c361043d366004612d99565b610f22565b610297603e5481565b6033546102c39060ff1681565b6102c3610466366004612dff565b610fd5565b6102c3610479366004612edc565b611092565b61029761048c366004612edc565b611140565b61029760425481565b6104ad6104a8366004612d99565b61115f565b604080519384526020840192909252908201526060016102a1565b61029760365481565b6033546102c39062010000900460ff1681565b603554610348906001600160a01b031681565b61034861121b565b6103b061128e565b610297603f5481565b6033546102c390610100900460ff1681565b6102c3611333565b61029760405481565b6102c36114ce565b6103b0611588565b604354600090815b818110156105b85760006043828154811061056857610568612ef5565b60009182526020822001546001600160a01b03169150806105888361115f565b5090925090506105988183612f21565b6105a29087612f21565b9550505050806105b190612f34565b905061054b565b505090565b60006042546000146105ea5760405162461bcd60e51b81526004016105e190612f4d565b60405180910390fd5b60335462010000900460ff16156106135760405162461bcd60e51b81526004016105e190612f6a565b61061c33611789565b336000908152604a602052604090205460ff1661064b5760405162461bcd60e51b81526004016105e190612f87565b336000818152604a6020526040808220805460ff19168155600101829055517f6fa5f2f133d0fabc383ccf7982b3fd93ab389a1dbad7e1a5e6d20e58ae3acf759190a25060015b90565b6001600160a01b038116600090815260476020526040812060018101548291829182919082036106d35760008060008094509450945094505061070c565b6106e68682600401548360020154611832565b919650945091506106f6866118ca565b92508060010154856107089190612f21565b9450505b9193509193565b603354600090600160201b90046001600160a01b031633146107475760405162461bcd60e51b81526004016105e190612fa4565b60335462010000900460ff16156107705760405162461bcd60e51b81526004016105e190612f6a565b603654156107a65760405162461bcd60e51b815260206004820152600360248201526213d21160ea1b60448201526064016105e1565b6107ae611ae4565b50600190565b603354600090600160201b90046001600160a01b031633146107e85760405162461bcd60e51b81526004016105e190612fa4565b6107f0611b20565b60008290036108275760405162461bcd60e51b815260206004820152600360248201526226262d60e91b60448201526064016105e1565b603354610100900460ff1615610843576033805461ff00191690555b61084f60018484611b79565b50600161085b60018055565b92915050565b600061085b82611c3d565b600060425460001415806108805750604554155b1561088b5750600090565b60335460ff16156108ad57604e54603f546108a69190612f21565b4211905090565b604e54604c546041546108c09190612f21565b6108a69190612f21565b60335462010000900460ff16156108f35760405162461bcd60e51b81526004016105e190612f6a565b604254156109135760405162461bcd60e51b81526004016105e190612f4d565b6035546001600160a01b031633146109b25761092e33611789565b603354600160201b90046001600160a01b03163314610978573360009081526047602052604081206001015490036109785760405162461bcd60e51b81526004016105e190612fc1565b61098061086c565b6109b25760405162461bcd60e51b815260206004820152600360248201526222a22960e91b60448201526064016105e1565b426042556040517f46b9cd4891c2c9c48ba40bb38b2058575e06ecdaab42ec43bcb2574c4be226be90600090a1565b6001600160a01b038116600090815260476020526040812060018101548203610a0d5750600092915050565b60018101546001600160a01b0384166000908152604960205260408120549193505b81811015610ae7576001600160a01b0385166000908152604960205260408120805483908110610a6157610a61612ef5565b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201819052909250610aa49190612fde565b6020820151610ab39042612fde565b8251610abf9190612ff1565b610ac99190613008565b610ad39086612f21565b94505080610ae090612f34565b9050610a2f565b505050919050565b600054610100900460ff1615808015610b0f5750600054600160ff909116105b80610b295750303b158015610b29575060005460ff166001145b610b8c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e1565b6000805460ff191660011790558015610baf576000805461ff0019166101001790555b610bb7611d26565b610bc78989898989898989611d55565b8015610c0d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6041548015801590610c355750604c54610c329042612f21565b81105b1561069257604c54610c479082612f21565b9050603f548111156106925750603f5490565b603354600160201b90046001600160a01b03163314610c8b5760405162461bcd60e51b81526004016105e190612fa4565b60425415610cab5760405162461bcd60e51b81526004016105e190612f4d565b60335462010000900460ff1615610cd45760405162461bcd60e51b81526004016105e190612f6a565b6033546301000000900460ff1615610d145760405162461bcd60e51b81526020600482015260036024820152622920a960e91b60448201526064016105e1565b604554600114610d4c5760405162461bcd60e51b81526020600482015260036024820152622921a960e91b60448201526064016105e1565b603d5442118015610d6b57506040805460009081526048602052205442115b8015610d855750604d54603f54610d829190612fde565b42105b610db75760405162461bcd60e51b8152602060048201526003602482015262292a2960e91b60448201526064016105e1565b6033805463ff000000191663010000001790556044546040517fc9fce8903c0374743352608574b0e3bfc73ce3af1d4f17bdd3a08045547a820890600090a2565b603354600090600160201b90046001600160a01b03163314610e2c5760405162461bcd60e51b81526004016105e190612fa4565b610e34611b20565b603354610100900460ff1615610e5c5760405162461bcd60e51b81526004016105e190612f87565b6033805461ff0019166101001790556040517f0a2faf0a3c3f5b47a50a6a353f0fe6478f470cb962e2045989e4bcbede93887c90600090a150600161069260018055565b604354600090815b818110156105b8576000806000610ee560438581548110610ecb57610ecb612ef5565b6000918252602090912001546001600160a01b0316610695565b509194509250905080610ef88385612f21565b610f029190612f21565b610f0c9087612f21565b955050505080610f1b90612f34565b9050610ea8565b603354600090600160201b90046001600160a01b03163314610f565760405162461bcd60e51b81526004016105e190612fa4565b816001600160a01b038116610f935760405162461bcd60e51b81526020600482015260036024820152624e5a4160e81b60448201526064016105e1565b60425415610fb35760405162461bcd60e51b81526004016105e190612f4d565b610fbb611b20565b610fc483611e91565b9150610fcf60018055565b50919050565b603354600090600160201b90046001600160a01b031633146110095760405162461bcd60e51b81526004016105e190612fa4565b611011611b20565b603354610100900460ff161561104f5760405162461bcd60e51b815260206004820152600360248201526204f50560ec1b60448201526064016105e1565b60008290036110865760405162461bcd60e51b815260206004820152600360248201526226262d60e91b60448201526064016105e1565b61084f60008484611b79565b600061109c611b20565b6110a533611789565b81806000036110dc5760405162461bcd60e51b815260206004820152600360248201526216959360ea1b60448201526064016105e1565b60335462010000900460ff16156111055760405162461bcd60e51b81526004016105e190612f6a565b604254156111255760405162461bcd60e51b81526004016105e190612f4d565b61112f83336120bf565b91505061113b60018055565b919050565b60006301da9c0082604b546111559190612ff1565b61085b9190613008565b6001600160a01b0381166000908152604760205260408120600181015482918291820361119757600080600093509350935050611214565b60335460ff16156111c1576111b58582600401548360020154611832565b91955093509150611212565b60006111cb610c18565b905060008142116111dc57816111de565b425b90506111f3836004015484600201548361241e565b909650945061120187611c3d565b935061120d8487612f21565b955050505b505b9193909250565b603554604080516363f7002f60e11b815290516000926001600160a01b03169163c7ee005e9160048083019260209291908290030181865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611289919061302a565b905090565b603354600160201b90046001600160a01b031633146112bf5760405162461bcd60e51b81526004016105e190612fa4565b604254156112df5760405162461bcd60e51b81526004016105e190612f4d565b6112e7611b20565b60335460ff16156113205760405162461bcd60e51b815260206004820152600360248201526213935360ea1b60448201526064016105e1565b611328612486565b61133160018055565b565b600061133e33611789565b6042541561135e5760405162461bcd60e51b81526004016105e190612f4d565b60335462010000900460ff16156113875760405162461bcd60e51b81526004016105e190612f6a565b3360009081526047602052604081206001015490036113ce5760405162461bcd60e51b815260206004820152600360248201526213169360ea1b60448201526064016105e1565b336000908152604a602052604090205460ff16156113fe5760405162461bcd60e51b81526004016105e190612f87565b603f5442106114355760405162461bcd60e51b815260206004820152600360248201526211535160ea1b60448201526064016105e1565b6033546301000000900460ff161561144f5761144f612520565b6046805490600061145f83612f34565b90915550506040805180820182526001808252426020808401918252336000818152604a9092528582209451855460ff191690151517855591519390920192909255915190917fa64980a49b0572c7b3106aa75a1480ce0e6c5ce99caf11c0aacb03354173e03591a250600190565b603354600090600160201b90046001600160a01b031633146115025760405162461bcd60e51b81526004016105e190612fa4565b604254156115225760405162461bcd60e51b81526004016105e190612f4d565b61152a611b20565b60435460005b81811015611579576115686043828154811061154e5761154e612ef5565b6000918252602090912001546001600160a01b0316611e91565b5061157281612f34565b9050611530565b50600191505061069260018055565b61159133611789565b60335462010000900460ff16156115ba5760405162461bcd60e51b81526004016105e190612f6a565b604254156115da5760405162461bcd60e51b81526004016105e190612f4d565b6033546301000000900460ff166116195760405162461bcd60e51b815260206004820152600360248201526241524d60e81b60448201526064016105e1565b603f5442106116505760405162461bcd60e51b8152602060048201526003602482015262292a2960e91b60448201526064016105e1565b33600090815260476020526040812060018101549091036116835760405162461bcd60e51b81526004016105e190612fc1565b6033805463ff00000019169055604480549060006116a083612f34565b9091555060408181558051808201909152603f54808252603e5460208301916116c99190612f21565b9052600082815260486020908152604090912082518155910151600190910155603854603e54670de0b6b3a76400009161170291612565565b83600101546117119190612ff1565b61171b9190613008565b82600401600082825461172e9190612f21565b9091555050603e54603f8054600090611748908490612f21565b9091555050603f5460405190815281907f01d3e7d9e37a1ba8e45cd56d6778b3f9eea1dfc58752d6522349db020479de599060200160405180910390a25050565b61179161121b565b60405163288c314960e21b81526001600160a01b038381166004830152919091169063a230c52490602401602060405180830381865afa1580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd9190613055565b61182f5760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016105e1565b50565b600080600080603f549050603f5442111561184e575042611899565b6001600160a01b0387166000908152604a602052604090205460ff1680156118775750603f5442105b156118995750603354429060ff1615801561189157508085115b156118995750835b6118a486868361241e565b90945092506118b287611c3d565b91506118be8285612f21565b93505093509350939050565b6000603a546000036118de57506000919050565b506001600160a01b03811660009081526047602090815260408083206003810154604a90935292205490919060ff1680156119345750603e54603c54603d546119279190612fde565b6119319190612f21565b42105b1561198757600042603f546119499190612fde565b9050670de0b6b3a7640000611960603a5483612565565b836001015461196f9190612ff1565b6119799190613008565b6119839084612fde565b9250505b60445460011415801561199b5750603b5415155b15610fcf576000670de0b6b3a7640000603b54670de0b6b3a76400006119c5603a54603e54612565565b85600101546119d49190612ff1565b6119de9190613008565b6119e89190612ff1565b6119f29190613008565b6001600160a01b0385166000908152604a602052604090205490915060ff168015611a475750600160005260486020527f149d903478f13b7f42654b0aa3a0f06ce2ec329315e01622f824555dff9970635442115b8015611a545750603f5442105b15611ab757603e54600160005260486020527f149d903478f13b7f42654b0aa3a0f06ce2ec329315e01622f824555dff99706354611a929042612fde565b611a9c9083612ff1565b611aa69190613008565b611ab09084612f21565b9250611add565b6001604454611ac69190612fde565b611ad09082612ff1565b611ada9084612f21565b92505b5050919050565b6033805462ff00001916620100001790556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a90600090a1565b600260015403611b725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105e1565b6002600155565b6014819003611bb457611baf83611b908484612587565b600081518110611ba257611ba2612ef5565b6020026020010151612665565b505050565b6000611bc08383612587565b8051909150603c811115611bfc5760405162461bcd60e51b815260206004820152600360248201526211505360ea1b60448201526064016105e1565b60005b81811015611c2f57611c1d86848381518110611ba257611ba2612ef5565b80611c2781612f34565b915050611bff565b505050505050565b60018055565b6001600160a01b038116600090815260476020526040812060018101548203611c695750600092915050565b60335460009060ff16611c8d57604c548260020154611c889190612f21565b611c91565b603f545b60335490915060ff16158015611ca85750603f5481115b15611cb25750603f545b604254429015611cc157506042545b81811115611d1b576000611cd861048c8484612fde565b905080600003611cee5750600095945050505050565b670de0b6b3a7640000846001015482611d079190612ff1565b611d119190613008565b9695505050505050565b506000949350505050565b600054610100900460ff16611d4d5760405162461bcd60e51b81526004016105e190613072565b611331612758565b600054610100900460ff16611d7c5760405162461bcd60e51b81526004016105e190613072565b60338054640100000000600160c01b031916600160201b6001600160a01b038b1602179055611db16040840160208501612d99565b603480546001600160a01b0319166001600160a01b039290921691909117905560408301356037556060830135603e55608083013560385560a0830135603c55611dfe60208401846130bd565b6033805460ff19169115159190911790556039879055603a869055603b859055604b84905562278d00604c556202a300604d556203f480604e5560448054600090611e4890612f34565b90915550603580546001600160a01b031916331790556000819003611e7b576033805461ff001916610100179055611e87565b611e8760018383611b79565b5050505050505050565b6001600160a01b038116600090815260476020526040812060018101548203611ebd5750600192915050565b600080600080611ecc87610695565b6001600160a01b038b166000908152604a60205260409020549397509195509350915060ff1615611f18576001600160a01b0387166000908152604a60205260409020805460ff191690555b60405415611f265760006040555b6040805185815260208101859052908101839052606081018290526001600160a01b038816907f4d717b642cf5faf5bf4c2e2dfa4d80e68dd08aa4530694c0a67fe5006a28caa49060800160405180910390a2846001015460366000828254611f8f9190612fde565b9091555050600060048601819055600386018190556001860181905542600287015560458054909190611fc1906130da565b909155506001600160a01b0387166000908152604960205260408120611fe691612d42565b603654158015611ff8575042603d5411155b1561200557612005611ae4565b60006120118385612f21565b9050801561209957603454612099906001600160a01b03163361203261121b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561206f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612093919061302a565b8461277f565b6034546120b1906001600160a01b0316338a8861277f565b506001979650505050505050565b6000603754836036546120d29190612f21565b11156121065760405162461bcd60e51b81526020600482015260036024820152624f534560e81b60448201526064016105e1565b6001600160a01b0382166000908152604760205260409020603354610100900460ff161561213e5761213983600161279a565b612164565b8054610100900460ff166121645760405162461bcd60e51b81526004016105e190612fc1565b603d546000036121e857603c5461217b9042612f21565b603d55603e5461218b9042612f21565b603f5560335460ff1661219d57426041555b7f4867887a5b0bebacccb6e4c9c656b3a6b2fe478e226ea1fa5230d9b4bdabc26e603d54603f546040516121db929190918252602082015260400190565b60405180910390a1612220565b603d544211156122205760405162461bcd60e51b815260206004820152600360248201526244574360e81b60448201526064016105e1565b83603660008282546122329190612f21565b9091555050600181015460000361225d5760456000815461225290612f34565b909155504260028201555b600042603f5461226d9190612fde565b905060496000856001600160a01b03166001600160a01b031681526020019081526020016000206040518060600160405280670de0b6b3a76400006122b460385486612565565b6122be908a612ff1565b6122c89190613008565b815242602080830191909152603f54604092830152835460018181018655600095865294829020845160039092020190815590830151938101939093550151600290910155603854670de0b6b3a7640000906123249083612565565b61232e9087612ff1565b6123389190613008565b82600401600082825461234b9190612f21565b92505081905550670de0b6b3a7640000612367603a5483612565565b6123719087612ff1565b61237b9190613008565b82600301600082825461238e9190612f21565b92505081905550848260010160008282546123a99190612f21565b90915550506040518581526001600160a01b038516907f26ff3f6dedac6d273c293b8c866e073f40896739d99ad513862fe7ba70cf63ca9060200160405180910390a2603454603354612413916001600160a01b03908116918791600160201b909104168861277f565b506001949350505050565b60008083603f5461242f9190612fde565b6124398585612fde565b6124439087612ff1565b61244d9190613008565b9150670de0b6b3a7640000603954836124669190612ff1565b6124709190613008565b905061247c8183612fde565b9150935093915050565b60415442116124bd5760405162461bcd60e51b815260206004820152600360248201526252544560e81b60448201526064016105e1565b60006124c7610c18565b60435490915060005b8181101561251957612509604382815481106124ee576124ee612ef5565b6000918252602090912001546001600160a01b0316846128d8565b61251281612f34565b90506124d0565b5050604155565b6033805463ff000000191690556044546040513381527f5c34576b5e454f10dc4c9d9bd51b9c481a15af0738c70a740634b1ce47dc36379060200160405180910390a2565b60006301da9c006125768385612ff1565b6125809190613008565b9392505050565b60606000612596601484613008565b90508067ffffffffffffffff8111156125b1576125b16130f1565b6040519080825280602002602001820160405280156125da578160200160208202803683370190505b50915060005b8181101561265d5761262185856125f8846014612ff1565b90612604856001612f21565b61260f906014612ff1565b9261261c93929190613107565b612a58565b83828151811061263357612633612ef5565b6001600160a01b03909216602092830291909101909101528061265581612f34565b9150506125e0565b505092915050565b61266e81611789565b6001600160a01b038116600090815260476020526040902082156126f557805460ff166126a5576126a082600161279a565b6126b3565b805461ff0019166101001781555b6040516001600160a01b03831681527feafaba2a6f658ac7632689fd61982a1c5387c8437e5ff730560eb63d3c935ed1906020015b60405180910390a1505050565b805460ff166127165760405162461bcd60e51b81526004016105e190612fc1565b805461ff00191681556040516001600160a01b03831681527f646f70a08891433fa5fa07bd0874c798dfc78b4b8be5b9db947619f1cc9df3a3906020016126e8565b600054610100900460ff16611c375760405162461bcd60e51b81526004016105e190613072565b6127946001600160a01b038516848484612a9d565b50505050565b6001600160a01b03821660009081526047602052604090205460ff166128d4576033546001600160a01b03808416600160201b90920416036128045760405162461bcd60e51b8152602060048201526003602482015262424c5360e81b60448201526064016105e1565b6040805160c081018252600180825283151560208084019182526000848601818152606086018281526080870183815260a088018481526001600160a01b038c16808652604790965298842097518854965161ffff1990971690151561ff00191617610100961515969096029590951787559051868601555160028601559151600385015593516004909301929092556043805491820181559091527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c6951027930180546001600160a01b03191690911790555b5050565b6001600160a01b0382166000908152604760205260408120600181015490910361290157505050565b600080600061290f8661115f565b9250925092508360020154603f546129279190612fde565b60028501546129369087612fde565b85600401546129459190612ff1565b61294f9190613008565b8460040160008282546129629190612fde565b90915550506002840185905560408051848152602081018490529081018290526001600160a01b038716907f4b17857dbdcd87f2659c612a7f181d1c2ff8f5f2d77a3d4fe275f559c94351b29060600160405180910390a28115612a4057603454612a40906001600160a01b0316336129d961121b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3a919061302a565b8561277f565b603454611c2f906001600160a01b031633888661277f565b60008083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060140151949350505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180516001600160e01b03166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261279492879291600091612b35918516908490612bb2565b805190915015611baf5780806020019051810190612b539190613055565b611baf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105e1565b6060612bc18484600085612bc9565b949350505050565b606082471015612c2a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105e1565b600080866001600160a01b03168587604051612c469190613155565b60006040518083038185875af1925050503d8060008114612c83576040519150601f19603f3d011682016040523d82523d6000602084013e612c88565b606091505b5091509150612c9987838387612ca4565b979650505050505050565b60608315612d13578251600003612d0c576001600160a01b0385163b612d0c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105e1565b5081612bc1565b612bc18383815115612d285781518083602001fd5b8060405162461bcd60e51b81526004016105e19190613171565b508054600082556003029060005260206000209081019061182f91905b80821115612d80576000808255600182018190556002820155600301612d5f565b5090565b6001600160a01b038116811461182f57600080fd5b600060208284031215612dab57600080fd5b813561258081612d84565b60008083601f840112612dc857600080fd5b50813567ffffffffffffffff811115612de057600080fd5b602083019150836020828501011115612df857600080fd5b9250929050565b60008060208385031215612e1257600080fd5b823567ffffffffffffffff811115612e2957600080fd5b612e3585828601612db6565b90969095509350505050565b600080600080600080600080888a03610180811215612e5f57600080fd5b8935612e6a81612d84565b985060208a0135975060408a0135965060608a0135955060808a0135945060c0609f1982011215612e9a57600080fd5b5060a08901925061016089013567ffffffffffffffff811115612ebc57600080fd5b612ec88b828c01612db6565b999c989b5096995094979396929594505050565b600060208284031215612eee57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561085b5761085b612f0b565b600060018201612f4657612f46612f0b565b5060010190565b60208082526003908201526214111160ea1b604082015260600190565b6020808252600390820152624f414360e81b604082015260600190565b60208082526003908201526210505160ea1b604082015260600190565b6020808252600390820152622721a960e91b604082015260600190565b60208082526003908201526224a6a160e91b604082015260600190565b8181038181111561085b5761085b612f0b565b808202811582820484141761085b5761085b612f0b565b60008261302557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561303c57600080fd5b815161258081612d84565b801515811461182f57600080fd5b60006020828403121561306757600080fd5b815161258081613047565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156130cf57600080fd5b813561258081613047565b6000816130e9576130e9612f0b565b506000190190565b634e487b7160e01b600052604160045260246000fd5b6000808585111561311757600080fd5b8386111561312457600080fd5b5050820193919092039150565b60005b8381101561314c578181015183820152602001613134565b50506000910152565b60008251613167818460208701613131565b9190910192915050565b6020815260008251806020840152613190816040850160208701613131565b601f01601f1916919091016040019291505056fea26469706673582212201f650f0a3a8b992976eb2508a8c21f2a1669e289900f8d189a27752681666a1364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102895760003560e01c8063839145401161015c578063b75a197d116100ce578063d59624b411610087578063d59624b414610507578063dc9a153514610510578063e6ad04c914610522578063f13fa0c11461052a578063fa3ae6dc14610533578063fa5d30b51461053b57600080fd5b8063b75a197d1461049a578063bda1504b146104c8578063c2b6b58c146104d1578063c45a0155146104e4578063c7ee005e146104f7578063c9d0cf0a146104ff57600080fd5b8063a15612d111610120578063a15612d114610442578063a2d273f91461044b578063a4af9d4614610458578063a6aa57ce1461046b578063a8ce6bbd1461047e578063b5cae5321461049157600080fd5b8063839145401461040c5780638a9e667c146104175780638fd0aeb21461041f57806393e88f3a146104275780639f7c73e91461042f57600080fd5b806343d726d61161020057806370a08231116101b957806370a08231146103b257806370acf929146103c557806376bc05ae146103d85780637bf04e3f146103e15780637df1f1b9146103e9578063821b10b01461040357600080fd5b806343d726d614610369578063443388191461037157806355e172d9146103845780635ab2af51146103975780635ceeb36c146103a05780636e4a3a56146103a857600080fd5b80631d097974116102525780631d097974146102dc5780632565b159146102f0578063337e04c1146102f95780633551dd8c1461032c57806338d52e0f146103355780633e0b06db1461036057600080fd5b806280af811461028e5780630afbd5c9146102aa5780630d692cc1146102b2578063125f01c8146102bb578063179541ca146102d3575b600080fd5b61029760415481565b6040519081526020015b60405180910390f35b610297610543565b61029760395481565b6102c36105bd565b60405190151581526020016102a1565b610297604b5481565b6033546102c3906301000000900460ff1681565b61029760375481565b61030c610307366004612d99565b610695565b6040805194855260208501939093529183015260608201526080016102a1565b610297603d5481565b603454610348906001600160a01b031681565b6040516001600160a01b0390911681526020016102a1565b61029760385481565b6102c3610713565b6102c361037f366004612dff565b6107b4565b610297610392366004612d99565b610861565b610297603a5481565b6102c361086c565b6103b06108ca565b005b6102976103c0366004612d99565b6109e1565b6103b06103d3366004612e41565b610aef565b610297603c5481565b610297610c18565b60335461034890600160201b90046001600160a01b031681565b610297603b5481565b6102976301da9c0081565b6103b0610c5a565b6102c3610df8565b610297610ea0565b6102c361043d366004612d99565b610f22565b610297603e5481565b6033546102c39060ff1681565b6102c3610466366004612dff565b610fd5565b6102c3610479366004612edc565b611092565b61029761048c366004612edc565b611140565b61029760425481565b6104ad6104a8366004612d99565b61115f565b604080519384526020840192909252908201526060016102a1565b61029760365481565b6033546102c39062010000900460ff1681565b603554610348906001600160a01b031681565b61034861121b565b6103b061128e565b610297603f5481565b6033546102c390610100900460ff1681565b6102c3611333565b61029760405481565b6102c36114ce565b6103b0611588565b604354600090815b818110156105b85760006043828154811061056857610568612ef5565b60009182526020822001546001600160a01b03169150806105888361115f565b5090925090506105988183612f21565b6105a29087612f21565b9550505050806105b190612f34565b905061054b565b505090565b60006042546000146105ea5760405162461bcd60e51b81526004016105e190612f4d565b60405180910390fd5b60335462010000900460ff16156106135760405162461bcd60e51b81526004016105e190612f6a565b61061c33611789565b336000908152604a602052604090205460ff1661064b5760405162461bcd60e51b81526004016105e190612f87565b336000818152604a6020526040808220805460ff19168155600101829055517f6fa5f2f133d0fabc383ccf7982b3fd93ab389a1dbad7e1a5e6d20e58ae3acf759190a25060015b90565b6001600160a01b038116600090815260476020526040812060018101548291829182919082036106d35760008060008094509450945094505061070c565b6106e68682600401548360020154611832565b919650945091506106f6866118ca565b92508060010154856107089190612f21565b9450505b9193509193565b603354600090600160201b90046001600160a01b031633146107475760405162461bcd60e51b81526004016105e190612fa4565b60335462010000900460ff16156107705760405162461bcd60e51b81526004016105e190612f6a565b603654156107a65760405162461bcd60e51b815260206004820152600360248201526213d21160ea1b60448201526064016105e1565b6107ae611ae4565b50600190565b603354600090600160201b90046001600160a01b031633146107e85760405162461bcd60e51b81526004016105e190612fa4565b6107f0611b20565b60008290036108275760405162461bcd60e51b815260206004820152600360248201526226262d60e91b60448201526064016105e1565b603354610100900460ff1615610843576033805461ff00191690555b61084f60018484611b79565b50600161085b60018055565b92915050565b600061085b82611c3d565b600060425460001415806108805750604554155b1561088b5750600090565b60335460ff16156108ad57604e54603f546108a69190612f21565b4211905090565b604e54604c546041546108c09190612f21565b6108a69190612f21565b60335462010000900460ff16156108f35760405162461bcd60e51b81526004016105e190612f6a565b604254156109135760405162461bcd60e51b81526004016105e190612f4d565b6035546001600160a01b031633146109b25761092e33611789565b603354600160201b90046001600160a01b03163314610978573360009081526047602052604081206001015490036109785760405162461bcd60e51b81526004016105e190612fc1565b61098061086c565b6109b25760405162461bcd60e51b815260206004820152600360248201526222a22960e91b60448201526064016105e1565b426042556040517f46b9cd4891c2c9c48ba40bb38b2058575e06ecdaab42ec43bcb2574c4be226be90600090a1565b6001600160a01b038116600090815260476020526040812060018101548203610a0d5750600092915050565b60018101546001600160a01b0384166000908152604960205260408120549193505b81811015610ae7576001600160a01b0385166000908152604960205260408120805483908110610a6157610a61612ef5565b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201819052909250610aa49190612fde565b6020820151610ab39042612fde565b8251610abf9190612ff1565b610ac99190613008565b610ad39086612f21565b94505080610ae090612f34565b9050610a2f565b505050919050565b600054610100900460ff1615808015610b0f5750600054600160ff909116105b80610b295750303b158015610b29575060005460ff166001145b610b8c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105e1565b6000805460ff191660011790558015610baf576000805461ff0019166101001790555b610bb7611d26565b610bc78989898989898989611d55565b8015610c0d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b6041548015801590610c355750604c54610c329042612f21565b81105b1561069257604c54610c479082612f21565b9050603f548111156106925750603f5490565b603354600160201b90046001600160a01b03163314610c8b5760405162461bcd60e51b81526004016105e190612fa4565b60425415610cab5760405162461bcd60e51b81526004016105e190612f4d565b60335462010000900460ff1615610cd45760405162461bcd60e51b81526004016105e190612f6a565b6033546301000000900460ff1615610d145760405162461bcd60e51b81526020600482015260036024820152622920a960e91b60448201526064016105e1565b604554600114610d4c5760405162461bcd60e51b81526020600482015260036024820152622921a960e91b60448201526064016105e1565b603d5442118015610d6b57506040805460009081526048602052205442115b8015610d855750604d54603f54610d829190612fde565b42105b610db75760405162461bcd60e51b8152602060048201526003602482015262292a2960e91b60448201526064016105e1565b6033805463ff000000191663010000001790556044546040517fc9fce8903c0374743352608574b0e3bfc73ce3af1d4f17bdd3a08045547a820890600090a2565b603354600090600160201b90046001600160a01b03163314610e2c5760405162461bcd60e51b81526004016105e190612fa4565b610e34611b20565b603354610100900460ff1615610e5c5760405162461bcd60e51b81526004016105e190612f87565b6033805461ff0019166101001790556040517f0a2faf0a3c3f5b47a50a6a353f0fe6478f470cb962e2045989e4bcbede93887c90600090a150600161069260018055565b604354600090815b818110156105b8576000806000610ee560438581548110610ecb57610ecb612ef5565b6000918252602090912001546001600160a01b0316610695565b509194509250905080610ef88385612f21565b610f029190612f21565b610f0c9087612f21565b955050505080610f1b90612f34565b9050610ea8565b603354600090600160201b90046001600160a01b03163314610f565760405162461bcd60e51b81526004016105e190612fa4565b816001600160a01b038116610f935760405162461bcd60e51b81526020600482015260036024820152624e5a4160e81b60448201526064016105e1565b60425415610fb35760405162461bcd60e51b81526004016105e190612f4d565b610fbb611b20565b610fc483611e91565b9150610fcf60018055565b50919050565b603354600090600160201b90046001600160a01b031633146110095760405162461bcd60e51b81526004016105e190612fa4565b611011611b20565b603354610100900460ff161561104f5760405162461bcd60e51b815260206004820152600360248201526204f50560ec1b60448201526064016105e1565b60008290036110865760405162461bcd60e51b815260206004820152600360248201526226262d60e91b60448201526064016105e1565b61084f60008484611b79565b600061109c611b20565b6110a533611789565b81806000036110dc5760405162461bcd60e51b815260206004820152600360248201526216959360ea1b60448201526064016105e1565b60335462010000900460ff16156111055760405162461bcd60e51b81526004016105e190612f6a565b604254156111255760405162461bcd60e51b81526004016105e190612f4d565b61112f83336120bf565b91505061113b60018055565b919050565b60006301da9c0082604b546111559190612ff1565b61085b9190613008565b6001600160a01b0381166000908152604760205260408120600181015482918291820361119757600080600093509350935050611214565b60335460ff16156111c1576111b58582600401548360020154611832565b91955093509150611212565b60006111cb610c18565b905060008142116111dc57816111de565b425b90506111f3836004015484600201548361241e565b909650945061120187611c3d565b935061120d8487612f21565b955050505b505b9193909250565b603554604080516363f7002f60e11b815290516000926001600160a01b03169163c7ee005e9160048083019260209291908290030181865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611289919061302a565b905090565b603354600160201b90046001600160a01b031633146112bf5760405162461bcd60e51b81526004016105e190612fa4565b604254156112df5760405162461bcd60e51b81526004016105e190612f4d565b6112e7611b20565b60335460ff16156113205760405162461bcd60e51b815260206004820152600360248201526213935360ea1b60448201526064016105e1565b611328612486565b61133160018055565b565b600061133e33611789565b6042541561135e5760405162461bcd60e51b81526004016105e190612f4d565b60335462010000900460ff16156113875760405162461bcd60e51b81526004016105e190612f6a565b3360009081526047602052604081206001015490036113ce5760405162461bcd60e51b815260206004820152600360248201526213169360ea1b60448201526064016105e1565b336000908152604a602052604090205460ff16156113fe5760405162461bcd60e51b81526004016105e190612f87565b603f5442106114355760405162461bcd60e51b815260206004820152600360248201526211535160ea1b60448201526064016105e1565b6033546301000000900460ff161561144f5761144f612520565b6046805490600061145f83612f34565b90915550506040805180820182526001808252426020808401918252336000818152604a9092528582209451855460ff191690151517855591519390920192909255915190917fa64980a49b0572c7b3106aa75a1480ce0e6c5ce99caf11c0aacb03354173e03591a250600190565b603354600090600160201b90046001600160a01b031633146115025760405162461bcd60e51b81526004016105e190612fa4565b604254156115225760405162461bcd60e51b81526004016105e190612f4d565b61152a611b20565b60435460005b81811015611579576115686043828154811061154e5761154e612ef5565b6000918252602090912001546001600160a01b0316611e91565b5061157281612f34565b9050611530565b50600191505061069260018055565b61159133611789565b60335462010000900460ff16156115ba5760405162461bcd60e51b81526004016105e190612f6a565b604254156115da5760405162461bcd60e51b81526004016105e190612f4d565b6033546301000000900460ff166116195760405162461bcd60e51b815260206004820152600360248201526241524d60e81b60448201526064016105e1565b603f5442106116505760405162461bcd60e51b8152602060048201526003602482015262292a2960e91b60448201526064016105e1565b33600090815260476020526040812060018101549091036116835760405162461bcd60e51b81526004016105e190612fc1565b6033805463ff00000019169055604480549060006116a083612f34565b9091555060408181558051808201909152603f54808252603e5460208301916116c99190612f21565b9052600082815260486020908152604090912082518155910151600190910155603854603e54670de0b6b3a76400009161170291612565565b83600101546117119190612ff1565b61171b9190613008565b82600401600082825461172e9190612f21565b9091555050603e54603f8054600090611748908490612f21565b9091555050603f5460405190815281907f01d3e7d9e37a1ba8e45cd56d6778b3f9eea1dfc58752d6522349db020479de599060200160405180910390a25050565b61179161121b565b60405163288c314960e21b81526001600160a01b038381166004830152919091169063a230c52490602401602060405180830381865afa1580156117d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fd9190613055565b61182f5760405162461bcd60e51b81526020600482015260036024820152624e504d60e81b60448201526064016105e1565b50565b600080600080603f549050603f5442111561184e575042611899565b6001600160a01b0387166000908152604a602052604090205460ff1680156118775750603f5442105b156118995750603354429060ff1615801561189157508085115b156118995750835b6118a486868361241e565b90945092506118b287611c3d565b91506118be8285612f21565b93505093509350939050565b6000603a546000036118de57506000919050565b506001600160a01b03811660009081526047602090815260408083206003810154604a90935292205490919060ff1680156119345750603e54603c54603d546119279190612fde565b6119319190612f21565b42105b1561198757600042603f546119499190612fde565b9050670de0b6b3a7640000611960603a5483612565565b836001015461196f9190612ff1565b6119799190613008565b6119839084612fde565b9250505b60445460011415801561199b5750603b5415155b15610fcf576000670de0b6b3a7640000603b54670de0b6b3a76400006119c5603a54603e54612565565b85600101546119d49190612ff1565b6119de9190613008565b6119e89190612ff1565b6119f29190613008565b6001600160a01b0385166000908152604a602052604090205490915060ff168015611a475750600160005260486020527f149d903478f13b7f42654b0aa3a0f06ce2ec329315e01622f824555dff9970635442115b8015611a545750603f5442105b15611ab757603e54600160005260486020527f149d903478f13b7f42654b0aa3a0f06ce2ec329315e01622f824555dff99706354611a929042612fde565b611a9c9083612ff1565b611aa69190613008565b611ab09084612f21565b9250611add565b6001604454611ac69190612fde565b611ad09082612ff1565b611ada9084612f21565b92505b5050919050565b6033805462ff00001916620100001790556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a90600090a1565b600260015403611b725760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105e1565b6002600155565b6014819003611bb457611baf83611b908484612587565b600081518110611ba257611ba2612ef5565b6020026020010151612665565b505050565b6000611bc08383612587565b8051909150603c811115611bfc5760405162461bcd60e51b815260206004820152600360248201526211505360ea1b60448201526064016105e1565b60005b81811015611c2f57611c1d86848381518110611ba257611ba2612ef5565b80611c2781612f34565b915050611bff565b505050505050565b60018055565b6001600160a01b038116600090815260476020526040812060018101548203611c695750600092915050565b60335460009060ff16611c8d57604c548260020154611c889190612f21565b611c91565b603f545b60335490915060ff16158015611ca85750603f5481115b15611cb25750603f545b604254429015611cc157506042545b81811115611d1b576000611cd861048c8484612fde565b905080600003611cee5750600095945050505050565b670de0b6b3a7640000846001015482611d079190612ff1565b611d119190613008565b9695505050505050565b506000949350505050565b600054610100900460ff16611d4d5760405162461bcd60e51b81526004016105e190613072565b611331612758565b600054610100900460ff16611d7c5760405162461bcd60e51b81526004016105e190613072565b60338054640100000000600160c01b031916600160201b6001600160a01b038b1602179055611db16040840160208501612d99565b603480546001600160a01b0319166001600160a01b039290921691909117905560408301356037556060830135603e55608083013560385560a0830135603c55611dfe60208401846130bd565b6033805460ff19169115159190911790556039879055603a869055603b859055604b84905562278d00604c556202a300604d556203f480604e5560448054600090611e4890612f34565b90915550603580546001600160a01b031916331790556000819003611e7b576033805461ff001916610100179055611e87565b611e8760018383611b79565b5050505050505050565b6001600160a01b038116600090815260476020526040812060018101548203611ebd5750600192915050565b600080600080611ecc87610695565b6001600160a01b038b166000908152604a60205260409020549397509195509350915060ff1615611f18576001600160a01b0387166000908152604a60205260409020805460ff191690555b60405415611f265760006040555b6040805185815260208101859052908101839052606081018290526001600160a01b038816907f4d717b642cf5faf5bf4c2e2dfa4d80e68dd08aa4530694c0a67fe5006a28caa49060800160405180910390a2846001015460366000828254611f8f9190612fde565b9091555050600060048601819055600386018190556001860181905542600287015560458054909190611fc1906130da565b909155506001600160a01b0387166000908152604960205260408120611fe691612d42565b603654158015611ff8575042603d5411155b1561200557612005611ae4565b60006120118385612f21565b9050801561209957603454612099906001600160a01b03163361203261121b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561206f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612093919061302a565b8461277f565b6034546120b1906001600160a01b0316338a8861277f565b506001979650505050505050565b6000603754836036546120d29190612f21565b11156121065760405162461bcd60e51b81526020600482015260036024820152624f534560e81b60448201526064016105e1565b6001600160a01b0382166000908152604760205260409020603354610100900460ff161561213e5761213983600161279a565b612164565b8054610100900460ff166121645760405162461bcd60e51b81526004016105e190612fc1565b603d546000036121e857603c5461217b9042612f21565b603d55603e5461218b9042612f21565b603f5560335460ff1661219d57426041555b7f4867887a5b0bebacccb6e4c9c656b3a6b2fe478e226ea1fa5230d9b4bdabc26e603d54603f546040516121db929190918252602082015260400190565b60405180910390a1612220565b603d544211156122205760405162461bcd60e51b815260206004820152600360248201526244574360e81b60448201526064016105e1565b83603660008282546122329190612f21565b9091555050600181015460000361225d5760456000815461225290612f34565b909155504260028201555b600042603f5461226d9190612fde565b905060496000856001600160a01b03166001600160a01b031681526020019081526020016000206040518060600160405280670de0b6b3a76400006122b460385486612565565b6122be908a612ff1565b6122c89190613008565b815242602080830191909152603f54604092830152835460018181018655600095865294829020845160039092020190815590830151938101939093550151600290910155603854670de0b6b3a7640000906123249083612565565b61232e9087612ff1565b6123389190613008565b82600401600082825461234b9190612f21565b92505081905550670de0b6b3a7640000612367603a5483612565565b6123719087612ff1565b61237b9190613008565b82600301600082825461238e9190612f21565b92505081905550848260010160008282546123a99190612f21565b90915550506040518581526001600160a01b038516907f26ff3f6dedac6d273c293b8c866e073f40896739d99ad513862fe7ba70cf63ca9060200160405180910390a2603454603354612413916001600160a01b03908116918791600160201b909104168861277f565b506001949350505050565b60008083603f5461242f9190612fde565b6124398585612fde565b6124439087612ff1565b61244d9190613008565b9150670de0b6b3a7640000603954836124669190612ff1565b6124709190613008565b905061247c8183612fde565b9150935093915050565b60415442116124bd5760405162461bcd60e51b815260206004820152600360248201526252544560e81b60448201526064016105e1565b60006124c7610c18565b60435490915060005b8181101561251957612509604382815481106124ee576124ee612ef5565b6000918252602090912001546001600160a01b0316846128d8565b61251281612f34565b90506124d0565b5050604155565b6033805463ff000000191690556044546040513381527f5c34576b5e454f10dc4c9d9bd51b9c481a15af0738c70a740634b1ce47dc36379060200160405180910390a2565b60006301da9c006125768385612ff1565b6125809190613008565b9392505050565b60606000612596601484613008565b90508067ffffffffffffffff8111156125b1576125b16130f1565b6040519080825280602002602001820160405280156125da578160200160208202803683370190505b50915060005b8181101561265d5761262185856125f8846014612ff1565b90612604856001612f21565b61260f906014612ff1565b9261261c93929190613107565b612a58565b83828151811061263357612633612ef5565b6001600160a01b03909216602092830291909101909101528061265581612f34565b9150506125e0565b505092915050565b61266e81611789565b6001600160a01b038116600090815260476020526040902082156126f557805460ff166126a5576126a082600161279a565b6126b3565b805461ff0019166101001781555b6040516001600160a01b03831681527feafaba2a6f658ac7632689fd61982a1c5387c8437e5ff730560eb63d3c935ed1906020015b60405180910390a1505050565b805460ff166127165760405162461bcd60e51b81526004016105e190612fc1565b805461ff00191681556040516001600160a01b03831681527f646f70a08891433fa5fa07bd0874c798dfc78b4b8be5b9db947619f1cc9df3a3906020016126e8565b600054610100900460ff16611c375760405162461bcd60e51b81526004016105e190613072565b6127946001600160a01b038516848484612a9d565b50505050565b6001600160a01b03821660009081526047602052604090205460ff166128d4576033546001600160a01b03808416600160201b90920416036128045760405162461bcd60e51b8152602060048201526003602482015262424c5360e81b60448201526064016105e1565b6040805160c081018252600180825283151560208084019182526000848601818152606086018281526080870183815260a088018481526001600160a01b038c16808652604790965298842097518854965161ffff1990971690151561ff00191617610100961515969096029590951787559051868601555160028601559151600385015593516004909301929092556043805491820181559091527f9690ad99d6ce244efa8a0f6c2d04036d3b33a9474db32a71b71135c6951027930180546001600160a01b03191690911790555b5050565b6001600160a01b0382166000908152604760205260408120600181015490910361290157505050565b600080600061290f8661115f565b9250925092508360020154603f546129279190612fde565b60028501546129369087612fde565b85600401546129459190612ff1565b61294f9190613008565b8460040160008282546129629190612fde565b90915550506002840185905560408051848152602081018490529081018290526001600160a01b038716907f4b17857dbdcd87f2659c612a7f181d1c2ff8f5f2d77a3d4fe275f559c94351b29060600160405180910390a28115612a4057603454612a40906001600160a01b0316336129d961121b565b6001600160a01b03166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3a919061302a565b8561277f565b603454611c2f906001600160a01b031633888661277f565b60008083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050505060140151949350505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180516001600160e01b03166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261279492879291600091612b35918516908490612bb2565b805190915015611baf5780806020019051810190612b539190613055565b611baf5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105e1565b6060612bc18484600085612bc9565b949350505050565b606082471015612c2a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105e1565b600080866001600160a01b03168587604051612c469190613155565b60006040518083038185875af1925050503d8060008114612c83576040519150601f19603f3d011682016040523d82523d6000602084013e612c88565b606091505b5091509150612c9987838387612ca4565b979650505050505050565b60608315612d13578251600003612d0c576001600160a01b0385163b612d0c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105e1565b5081612bc1565b612bc18383815115612d285781518083602001fd5b8060405162461bcd60e51b81526004016105e19190613171565b508054600082556003029060005260206000209081019061182f91905b80821115612d80576000808255600182018190556002820155600301612d5f565b5090565b6001600160a01b038116811461182f57600080fd5b600060208284031215612dab57600080fd5b813561258081612d84565b60008083601f840112612dc857600080fd5b50813567ffffffffffffffff811115612de057600080fd5b602083019150836020828501011115612df857600080fd5b9250929050565b60008060208385031215612e1257600080fd5b823567ffffffffffffffff811115612e2957600080fd5b612e3585828601612db6565b90969095509350505050565b600080600080600080600080888a03610180811215612e5f57600080fd5b8935612e6a81612d84565b985060208a0135975060408a0135965060608a0135955060808a0135945060c0609f1982011215612e9a57600080fd5b5060a08901925061016089013567ffffffffffffffff811115612ebc57600080fd5b612ec88b828c01612db6565b999c989b5096995094979396929594505050565b600060208284031215612eee57600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561085b5761085b612f0b565b600060018201612f4657612f46612f0b565b5060010190565b60208082526003908201526214111160ea1b604082015260600190565b6020808252600390820152624f414360e81b604082015260600190565b60208082526003908201526210505160ea1b604082015260600190565b6020808252600390820152622721a960e91b604082015260600190565b60208082526003908201526224a6a160e91b604082015260600190565b8181038181111561085b5761085b612f0b565b808202811582820484141761085b5761085b612f0b565b60008261302557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561303c57600080fd5b815161258081612d84565b801515811461182f57600080fd5b60006020828403121561306757600080fd5b815161258081613047565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156130cf57600080fd5b813561258081613047565b6000816130e9576130e9612f0b565b506000190190565b634e487b7160e01b600052604160045260246000fd5b6000808585111561311757600080fd5b8386111561312457600080fd5b5050820193919092039150565b60005b8381101561314c578181015183820152602001613134565b50506000910152565b60008251613167818460208701613131565b9190910192915050565b6020815260008251806020840152613190816040850160208701613131565b601f01601f1916919091016040019291505056fea26469706673582212201f650f0a3a8b992976eb2508a8c21f2a1669e289900f8d189a27752681666a1364736f6c63430008110033",
  "devdoc": {
    "events": {
      "Activated(uint256,uint256)": {
        "params": {
          "depositMaturity": "- Lender can deposit until this timestamp",
          "maturityDate": "- Borrower's maturity date (timestamp)"
        }
      },
      "RollAccepted(uint256,uint256)": {
        "params": {
          "newMaturity": "- New maturity date (timestamp)",
          "rollId": "- Id of the new roll"
        }
      },
      "RollRejected(uint256,address)": {
        "params": {
          "rollId": "- Id of the roll",
          "user": "- Address of the user who rejected the roll"
        }
      },
      "RollRequested(uint256)": {
        "params": {
          "rollId": "- Id of the roll"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "__Pool_init(address,uint256,uint256,uint256,uint256,(bool,address,uint256,uint256,uint256,uint256),bytes)": {
        "details": "This function is called only once during the pool creation",
        "params": {
          "_borrower": "- Pool borrower address",
          "_incrementPerRoll": "- Pool rolling increment rate of origination fee",
          "_members": "- Pool members (lenders) addresses encoded in bytes",
          "_originationRate": "- Pool origination fee rate",
          "_penaltyRatePerYear": "- Pool penalty rate calculated for 1 year",
          "_poolData": "- Pool data struct: asset, size, tenor, rateMantissa, depositWindow",
          "_spreadRate": "- Pool protocol spread rate"
        }
      },
      "acceptRoll()": {
        "details": "Can be called only by the whitelisted Prime lenders"
      },
      "balanceOf(address)": {
        "params": {
          "lender": "- The address of the lender"
        },
        "returns": {
          "balance": "interestAccrued - Accrued amount until today"
        }
      },
      "blacklistLenders(bytes)": {
        "details": "Can be called only by the borrower",
        "params": {
          "lenders": "- Lenders addresses encoded in bytes"
        }
      },
      "canBeDefaulted()": {
        "returns": {
          "isAbleToDefault": "True if the pool can be defaulted"
        }
      },
      "cancelCallBack()": {
        "details": "Can be called only by the whitelisted Prime lenders",
        "returns": {
          "success": "- True if the callback is cancelled by the lender"
        }
      },
      "close()": {
        "details": "Can be called only by the borrower",
        "returns": {
          "success": "- True if the pool is closed"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "dueInterestOf(address)": {
        "params": {
          "lender": "The lender address"
        },
        "returns": {
          "due": "The interest amount",
          "penalty": "The penalty amount",
          "spreadFee": "The spread amount"
        }
      },
      "dueOf(address)": {
        "params": {
          "lender": "- The address of the lender"
        },
        "returns": {
          "due": "- Due amount for repayment",
          "originationFee": "- Origination protocol fee",
          "penalty": "- Penalty fee",
          "spreadFee": "- Protocol spread fee"
        }
      },
      "getNextPaymentTimestamp()": {
        "returns": {
          "payableToTimestamp": "- The timestamp of the next payment"
        }
      },
      "lend(uint256)": {
        "details": "Can be called only by the whitelisted Prime lenders",
        "params": {
          "amount": "- Amount of funds to lend"
        },
        "returns": {
          "success": "- True if the funds are lent"
        }
      },
      "markPoolDefaulted()": {
        "details": "Can be called only by lender or borrower if time conditions are metCan be called by governor without time conditions"
      },
      "penaltyOf(address)": {
        "params": {
          "lender": "- The address of the lender"
        },
        "returns": {
          "penalty": "penaltyFee - Penalty fee"
        }
      },
      "penaltyRate(uint256)": {
        "params": {
          "interval": "The interval in seconds"
        },
        "returns": {
          "_0": "The penalty rate as a mantissa between [0, 1e18]"
        }
      },
      "prime()": {
        "details": "Prime converted as IPrime interface",
        "returns": {
          "primeInstance": "- Prime address"
        }
      },
      "repay(address)": {
        "details": "Can be called only by the borrower",
        "params": {
          "lender": "- Lender address"
        },
        "returns": {
          "success": "- True if the lender is repaid"
        }
      },
      "repayAll()": {
        "details": "Can be called only by the borrower",
        "returns": {
          "success": "- True if all lenders are repaid"
        }
      },
      "repayInterest()": {
        "details": "Can be called only by the borrower in monthly loans"
      },
      "requestCallBack()": {
        "details": "Can be called only by the whitelisted Prime lenders",
        "returns": {
          "success": "- True if the callback is created by the lender"
        }
      },
      "requestRoll()": {
        "details": "Can be called only by the borrower"
      },
      "switchToPublic()": {
        "details": "Can be called only by the borrower",
        "returns": {
          "success": "- True if the pool is converted to public"
        }
      },
      "totalDue()": {
        "returns": {
          "totalDueAmount": "- Total due amount for repayment"
        }
      },
      "totalDueInterest()": {
        "returns": {
          "totalInterest": "The interest amount"
        }
      },
      "whitelistLenders(bytes)": {
        "details": "Can be called only by the borrower",
        "params": {
          "lenders": "- Lenders addresses encoded in bytes"
        }
      }
    },
    "title": "Pool contract is responsible for managing the pool",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Activated(uint256,uint256)": {
        "notice": "Emitted when the pool is activated"
      },
      "CallbackCancelled(address)": {
        "notice": "Emitted when callback is cancelled"
      },
      "CallbackCreated(address)": {
        "notice": "Emitted when callback is created"
      },
      "Closed()": {
        "notice": "Emitted when the pool is closed"
      },
      "ConvertedToPublic()": {
        "notice": "Emitted when pool is converted to public"
      },
      "Defaulted()": {
        "notice": "Emitted when pool is defaulted"
      },
      "LenderBlacklisted(address)": {
        "notice": "Emitted when lender is removed from the pool"
      },
      "LenderWhitelisted(address)": {
        "notice": "Emitted when new lender is added to the pool"
      },
      "Lent(address,uint256)": {
        "notice": "Emitted when funds are lent to the pool"
      },
      "Repayed(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when lender is fully repayed"
      },
      "RepayedInterest(address,uint256,uint256,uint256)": {
        "notice": "Emitted when interest is repayed to the lender"
      },
      "RollAccepted(uint256,uint256)": {
        "notice": "Emitted when the pool is rolled"
      },
      "RollRejected(uint256,address)": {
        "notice": "Emitted when the roll is rejected"
      },
      "RollRequested(uint256)": {
        "notice": "Emitted when the roll is requested"
      }
    },
    "kind": "user",
    "methods": {
      "YEAR()": {
        "notice": "Standart year in seconds"
      },
      "__Pool_init(address,uint256,uint256,uint256,uint256,(bool,address,uint256,uint256,uint256,uint256),bytes)": {
        "notice": "Initialize the pool"
      },
      "acceptRoll()": {
        "notice": "Accepts the roll"
      },
      "activeRollId()": {
        "notice": "Pool active roll id"
      },
      "asset()": {
        "notice": "Asset address of the pool"
      },
      "balanceOf(address)": {
        "notice": "Calculates the accrued amount until today, excluding penalty"
      },
      "blacklistLenders(bytes)": {
        "notice": "Blacklists lenders"
      },
      "borrower()": {
        "notice": "Pool borrower address"
      },
      "canBeDefaulted()": {
        "notice": "Checks if the pool can be defaulted by borrower or lender"
      },
      "cancelCallBack()": {
        "notice": "Cancels the callback"
      },
      "close()": {
        "notice": "Closes the pool"
      },
      "currentSize()": {
        "notice": "Pool current size"
      },
      "defaultedAt()": {
        "notice": "If pool is defaulted, this is the timestamp of the default"
      },
      "depositMaturity()": {
        "notice": "Pool deposit maturity"
      },
      "depositWindow()": {
        "notice": "Pool deposit window (in seconds)"
      },
      "dueInterestOf(address)": {
        "notice": "Calculates the total interest and penalty for the next payment to the lender"
      },
      "dueOf(address)": {
        "notice": "Calculates the due amount for repayment including interestAccrued, penalty fee and spread for the lender"
      },
      "factory()": {
        "notice": "Pool factory address"
      },
      "getNextPaymentTimestamp()": {
        "notice": "Calculates the next payment timestamp for the borrower"
      },
      "incrementPerRoll()": {
        "notice": "Pool rolling increment fee rate"
      },
      "isBulletLoan()": {
        "notice": "Pool repayment option. Bullet loan or monthly repayment"
      },
      "isClosed()": {
        "notice": "Pool availability status"
      },
      "isPublic()": {
        "notice": "Pool publicity status"
      },
      "isRollRequested()": {
        "notice": "Roll request status"
      },
      "lastPaidTimestamp()": {
        "notice": "The last timestamp at which a payment was made or received in monthly repayment pool."
      },
      "lend(uint256)": {
        "notice": "Lends funds to the pool"
      },
      "markPoolDefaulted()": {
        "notice": "Defaults the pool"
      },
      "maturityDate()": {
        "notice": "Pool maturity date"
      },
      "maxSize()": {
        "notice": "Pool maximum size"
      },
      "originationRate()": {
        "notice": "Origination fee rate"
      },
      "penaltyOf(address)": {
        "notice": "When maturity date passed, calculates the penalty fee for the lender"
      },
      "penaltyRate(uint256)": {
        "notice": "Calculates the penalty rate for a given interval"
      },
      "penaltyRatePerYear()": {
        "notice": "Pool penalty rate calculated for 1 year"
      },
      "prime()": {
        "notice": "Returns Prime address"
      },
      "rateMantissa()": {
        "notice": "Pool interest rate (in mantissa)"
      },
      "repay(address)": {
        "notice": "Fully repays the lender with the principal and interest"
      },
      "repayAll()": {
        "notice": "Repays all lenders with the principal and interest"
      },
      "repayInterest()": {
        "notice": "Repays interest to the lender"
      },
      "requestCallBack()": {
        "notice": "Creates the callback"
      },
      "requestRoll()": {
        "notice": "Requests the roll"
      },
      "spreadRate()": {
        "notice": "Protocol spread rate"
      },
      "switchToPublic()": {
        "notice": "Converts the pool to public"
      },
      "tenor()": {
        "notice": "Pool tenor"
      },
      "totalDue()": {
        "notice": "Calculates the total due amount for repayment including interestAccrued, penalty fee and spread for all lenders"
      },
      "totalDueInterest()": {
        "notice": "Calculates the total interest and penalty amount for the next payment for all lenders"
      },
      "whitelistLenders(bytes)": {
        "notice": "Whitelists lenders"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 314,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 372,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6478,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "isBulletLoan",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 6481,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "isPublic",
        "offset": 1,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 6484,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "isClosed",
        "offset": 2,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 6487,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "isRollRequested",
        "offset": 3,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 6490,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "borrower",
        "offset": 4,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 6493,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "asset",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 6497,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "factory",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPoolFactory)6438"
      },
      {
        "astId": 6500,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "currentSize",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 6503,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "maxSize",
        "offset": 0,
        "slot": "55",
        "type": "t_uint256"
      },
      {
        "astId": 6506,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "rateMantissa",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 6509,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "spreadRate",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 6512,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "originationRate",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 6515,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "incrementPerRoll",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 6518,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "depositWindow",
        "offset": 0,
        "slot": "60",
        "type": "t_uint256"
      },
      {
        "astId": 6521,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "depositMaturity",
        "offset": 0,
        "slot": "61",
        "type": "t_uint256"
      },
      {
        "astId": 6524,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "tenor",
        "offset": 0,
        "slot": "62",
        "type": "t_uint256"
      },
      {
        "astId": 6527,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "maturityDate",
        "offset": 0,
        "slot": "63",
        "type": "t_uint256"
      },
      {
        "astId": 6530,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "activeRollId",
        "offset": 0,
        "slot": "64",
        "type": "t_uint256"
      },
      {
        "astId": 6533,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "lastPaidTimestamp",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 6536,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "defaultedAt",
        "offset": 0,
        "slot": "66",
        "type": "t_uint256"
      },
      {
        "astId": 6540,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_lenders",
        "offset": 0,
        "slot": "67",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6543,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_nextRollId",
        "offset": 0,
        "slot": "68",
        "type": "t_uint256"
      },
      {
        "astId": 6546,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_activeLendersCount",
        "offset": 0,
        "slot": "69",
        "type": "t_uint256"
      },
      {
        "astId": 6549,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_activeCallbacksCount",
        "offset": 0,
        "slot": "70",
        "type": "t_uint256"
      },
      {
        "astId": 6555,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "poolMembers",
        "offset": 0,
        "slot": "71",
        "type": "t_mapping(t_address,t_struct(Member)6213_storage)"
      },
      {
        "astId": 6561,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_poolRolls",
        "offset": 0,
        "slot": "72",
        "type": "t_mapping(t_uint256,t_struct(Roll)6218_storage)"
      },
      {
        "astId": 6568,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_lenderPositions",
        "offset": 0,
        "slot": "73",
        "type": "t_mapping(t_address,t_array(t_struct(Position)6230_storage)dyn_storage)"
      },
      {
        "astId": 6574,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "_poolCallbacks",
        "offset": 0,
        "slot": "74",
        "type": "t_mapping(t_address,t_struct(CallBack)6223_storage)"
      },
      {
        "astId": 6577,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "penaltyRatePerYear",
        "offset": 0,
        "slot": "75",
        "type": "t_uint256"
      },
      {
        "astId": 6580,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "monthlyPaymentRoundDuration",
        "offset": 0,
        "slot": "76",
        "type": "t_uint256"
      },
      {
        "astId": 6583,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "rollRangeDuration",
        "offset": 0,
        "slot": "77",
        "type": "t_uint256"
      },
      {
        "astId": 6586,
        "contract": "contracts/Pool/Pool.sol:Pool",
        "label": "gracePeriodDuration",
        "offset": 0,
        "slot": "78",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Position)6230_storage)dyn_storage": {
        "base": "t_struct(Position)6230_storage",
        "encoding": "dynamic_array",
        "label": "struct IPool.Position[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPoolFactory)6438": {
        "encoding": "inplace",
        "label": "contract IPoolFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Position)6230_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.Position[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Position)6230_storage)dyn_storage"
      },
      "t_mapping(t_address,t_struct(CallBack)6223_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.CallBack)",
        "numberOfBytes": "32",
        "value": "t_struct(CallBack)6223_storage"
      },
      "t_mapping(t_address,t_struct(Member)6213_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IPool.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)6213_storage"
      },
      "t_mapping(t_uint256,t_struct(Roll)6218_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPool.Roll)",
        "numberOfBytes": "32",
        "value": "t_struct(Roll)6218_storage"
      },
      "t_struct(CallBack)6223_storage": {
        "encoding": "inplace",
        "label": "struct IPool.CallBack",
        "members": [
          {
            "astId": 6220,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "isCreated",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6222,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Member)6213_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Member",
        "members": [
          {
            "astId": 6202,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "isCreated",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6204,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "isWhitelisted",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6206,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "principal",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6208,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "accrualTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6210,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "totalOriginationFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6212,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "totalInterest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Position)6230_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Position",
        "members": [
          {
            "astId": 6225,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "interest",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6227,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "startAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6229,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "endAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Roll)6218_storage": {
        "encoding": "inplace",
        "label": "struct IPool.Roll",
        "members": [
          {
            "astId": 6215,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "startDate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6217,
            "contract": "contracts/Pool/Pool.sol:Pool",
            "label": "endDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}